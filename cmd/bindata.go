// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\xb6\x16\xff\x3f\x9f\xe2\xd4\x0d\x60\x7b\x80\xe2\x9b\xdc\xff\x36\xe4\x02\xe9\x12\xb4\x01\xda\x26\x48\xdb\x0d\x17\x45\x27\xd0\xd2\xb1\x4c\x84\x22\x35\x92\x72\xe2\x21\x1f\xfe\x82\xa4\x1e\xa4\x44\x37\xdd\x9d\x5a\x03\x43\x17\xf2\xbc\x78\x1e\xbf\x73\x48\xbd\x7c\xb1\x5a\x53\xbe\xda\x50\xb5\x5d\x1d\x1d\x6d\x6a\x9e\x69\x2a\x38\xec\x8a\x23\x00\x00\xba\x01\x2e\x34\x64\xa2\xe6\x1a\x8e\x89\x2c\x76\xf0\x1f\x58\xe5\xb8\x5b\xf1\x9a\x31\x4b\x62\x7e\x99\x28\x4b\xc2\xf3\x96\xcb\xfc\x24\xea\x5a\x72\xfb\x27\xf2\xdc\xfe\xfb\x12\x30\xdb\x0a\x27\xe6\xf3\xe9\x17\xbb\xa6\x1e\xa8\xce\xb6\xe1\x9a\x95\x48\x14\x02\xe5\x54\x77\x2b\xe6\x97\xee\x8a\xd4\x2c\xb6\xf4\x27\x27\xc9\x90\x87\x64\x9a\xee\x88\xc6\x11\x5f\xbb\xf1\x15\xde\x1c\x0f\x72\x47\xb6\x2c\x4b\x96\x57\x24\xbb\x27\x05\xaa\x11\x4b\x64\xcb\xb2\x14\x4c\xac\x09\xbb\x7a\xc4\x6c\xc4\xd2\x6f\x7d\xc5\xca\xba\x2a\x24\xc9\xc7\x26\x0e\xd7\x2d\xf1\xfc\xa7\x79\x40\xd8\x47\xca\x69\xe8\x02\x64\xfe\xf3\xe2\xdf\x7a\xfa\x28\xee\x3e\xbb\xbc\x2b\x80\x51\x7e\xef\x58\x03\xce\xc1\xd1\xe9\x06\x3e\x43\xf2\x17\xcc\x8e\x7f\xbb\xbe\xfb\xf8\xe9\xe2\xed\xeb\x9b\x19\xf4\xa7\xb2\x59\x71\x25\xa5\x90\x3f\xc3\x7b\x01\x3b\x2a\x75\x4d\x58\x21\xe0\x41\xc8\x7b\x55\x91\x0c\x81\x2a\x17\x58\x04\xa2\x41\x6f\x11\x4a\x51\x22\xef\x93\x63\x57\xc0\x16\x59\x15\x0b\x87\x4b\x44\x38\x0d\x52\x31\xcb\xa1\xb7\x25\xbd\xbd\xf8\xf8\x66\xa5\x64\xb6\x8a\x1c\x25\x08\xbb\x3b\x08\x3f\x74\x90\x48\xa2\x58\x81\x1d\xeb\xc2\x2b\xa4\x25\x24\x4c\xc3\x99\xc7\xae\x50\x83\x8d\xfa\xd9\x17\x58\xac\x89\x42\x4e\x4a\x84\xe3\xdb\xdf\x2f\x97\xa1\x2c\x43\xd8\xfb\x66\xb1\x2b\x6c\xa5\x7c\x40\xad\x29\x2f\x54\x93\x3a\x67\x36\x75\x96\x3d\x47\x52\x3c\x42\x67\x76\x4b\xe4\xb4\xdb\x08\x5c\x38\xbb\x29\x2f\x3c\xdf\xc4\xb9\xad\xc7\xe0\xf8\xcd\xcd\xbb\xab\xd5\x49\x17\xaf\x95\xc7\x16\xf0\xa5\x3d\xe3\xcd\xdb\xcb\xd7\x37\x8e\xdb\xfd\x3b\xf0\xeb\xeb\x9b\x57\xd7\xef\x67\x03\xa7\xc4\x64\xbc\xba\x7e\x0f\x8e\xda\x9d\x80\x29\xfc\x36\x9e\x98\x31\x06\x02\xc7\x2e\x1e\x8b\x70\x86\x5b\xb3\x3b\x2a\x57\xb3\xe9\x86\x30\xb6\x26\xd9\xbd\x0d\xc7\x9f\x35\xca\x7d\x1b\x8f\xa5\x97\x00\xc7\x43\xea\x73\xd0\xb2\xc6\xc8\x79\x5b\x2f\x85\x3e\xff\xd9\xf7\x5a\xf4\xcc\x71\xbe\xf8\xe1\x1a\x8f\x0c\x0a\xc1\xf8\xc2\x92\x95\xf7\x39\x95\x90\x54\xf1\x52\x09\x29\x5c\x24\x02\xe9\x6d\x94\xad\x8e\xde\x67\x11\x30\x48\x2f\xaf\x3f\x5c\xbc\x7a\x7b\x95\xde\xde\xdd\xbc\xbb\xfd\xe8\x87\xbf\xad\x45\x05\x49\x06\xa6\x49\xa5\x95\x14\x65\xa5\x21\x15\x2c\x4f\xbd\x85\x11\x07\xc4\x36\xbb\x64\x37\xc9\xb6\xe8\x2d\x58\xc2\x2c\xc4\xd3\x43\xd2\x5b\x00\xe9\x20\x33\x00\x8b\x41\xf1\xff\x38\xdc\x8b\xb4\xa7\x11\xee\xf5\x95\x7e\xd9\x52\x0f\x6a\xbd\x0f\x5f\x97\x1b\x91\x12\x0a\xa9\x5c\x94\x63\x45\xe5\xd3\xc5\xa8\x26\x48\x09\x8c\x06\x39\xc8\x99\x61\x24\x9f\xe3\xc0\x78\xec\xc3\xda\x41\x88\x00\x24\x42\xa4\xe6\x9a\x9d\xc8\xc9\x0f\xee\x0e\x9c\x3c\xde\xb6\xec\xe3\xe4\xf3\xfb\xbf\xe5\x64\x60\x4e\xd2\xa7\xd5\x00\xd5\xff\x41\x33\xb3\x59\xf4\xa9\xca\x5d\x06\x75\x1a\xec\x5e\x21\xa0\x30\xda\x6b\x28\xa8\xde\xd6\xeb\x93\x4c\x94\xab\xd7\xa8\x3f\x68\x89\xa4\x5c\xed\x0a\x4f\xc4\x1d\x32\x41\x72\x23\xc3\xe4\xb6\xda\x22\x63\x50\x11\xa9\x41\x6c\xfe\xb6\xd4\xa6\x1c\x70\x47\x18\x24\x89\x93\x65\xa2\x08\x4f\xa0\x44\x2d\x33\x3c\x1a\x9c\x3a\x70\xce\x0c\x12\x12\x7a\xe2\xc5\xf9\x98\x66\x50\xbb\x77\x41\x1d\x05\xb4\x7e\x85\xf6\xa3\xd3\x98\x24\x8e\x23\x83\x11\xf1\x1b\x66\x07\x1f\x4b\xfe\x2b\x6a\x50\x5b\x51\xb3\x1c\x54\x85\x19\xdd\xec\x81\x74\x83\x9f\xde\x12\xdd\xee\xae\x11\xf0\x11\xb3\x5a\x63\x3e\x42\x94\xc8\x94\x1a\x47\x94\xef\x9d\x6a\x26\x9e\xfe\x44\xd3\x29\x55\x9a\xe8\x5a\xa5\x99\xc8\x11\x8e\xdd\x1f\x93\x86\xf8\x1b\x22\xe7\x79\xe5\xd8\x33\x67\x18\x51\x3b\x47\xd6\x5a\xf4\x43\x74\x92\x08\x9e\xec\x88\xa4\x64\xcd\x10\x6e\x7f\xbf\x6c\x0d\x77\x52\x20\x49\xa8\x4a\x9a\x90\x25\xaa\x5e\x2b\x4d\x75\x6d\x84\x1d\xba\x5f\x35\x17\xac\x0d\xe5\x39\x10\x0e\x46\x5b\xd2\x26\xa7\xed\x85\x2c\x00\x86\x7e\x2b\x95\x42\x68\x3b\x64\xda\xfd\x87\x2d\x65\x08\x1a\x95\xc9\xb4\x01\x91\x71\x57\xdf\x26\xe9\xc6\x91\x25\x1b\x98\x0d\x49\xbd\xa1\x30\xec\xab\x46\x3d\xc7\x87\xde\x95\xa9\x9d\x71\x17\x19\xd1\x5f\x97\xb2\x0c\xc4\xd0\x0d\xac\xb1\xa0\xdc\x5e\x4e\xed\x91\xfe\xec\xc1\xf7\x17\x10\xb2\x39\x41\x44\xd5\x8b\x73\x2f\x39\x7f\xe9\xa2\xe8\xff\x82\xc0\x8f\x45\x84\xc3\xc4\x80\xdf\x0b\xcb\x70\xfb\x25\xe8\x2d\x55\xa0\xb4\xa4\x95\xb2\x80\xc7\x88\xd2\x50\x11\xbd\x35\xd5\x59\x09\x8e\x5c\xc3\x46\x8a\xd2\x6e\x9a\xf5\x93\xf0\x6e\x30\x88\xc7\xa2\xb9\x4e\x0f\x96\x9f\x40\x61\x0e\x73\xf5\xb4\xfa\xfc\xc7\xea\xcb\x4f\xc7\x4f\x4f\xf3\x65\x88\x35\xe3\x84\x3c\x3a\x32\x16\x30\x34\xa9\x99\x19\x07\x24\x09\x3e\x66\xac\x56\x74\x17\xd9\xe3\x30\xb3\xfe\x5d\xa4\xae\x4f\xf2\xba\x5c\xa3\x4c\xc5\x26\xcd\xca\x3c\x25\xb2\x50\xe9\x83\x48\x45\xa5\xd5\x12\xce\xe1\x74\x06\xc9\x23\xe9\x5d\x6a\x7f\x49\x0e\xb3\x8b\x76\x85\x34\x38\x45\xb3\xd8\x10\x34\x9b\x46\x7f\x7f\x35\x6c\xf5\xff\xba\x25\xbc\x40\xeb\x6c\xa3\xcc\x80\x78\x4e\x25\x66\x5a\xc8\x3d\x68\xe1\x7a\x92\xcc\xbc\x45\xb1\xb1\x8b\xcd\x48\x36\xb5\x85\x3d\x04\xb6\x16\x5e\xf6\x2b\x46\x6f\x56\x4b\x69\x72\xe4\xfb\x39\x29\x47\xa5\xa5\xd8\x43\x1f\xa4\x3b\x2c\xc5\x0e\x15\x08\x8e\xa6\xae\xca\x9a\x69\x5a\x31\xef\xf0\x60\xba\x0a\x61\xcc\x58\x48\x25\x64\x82\x6b\xe4\x5a\x4d\x64\x10\x72\x55\x4b\x04\xcf\xa0\x0b\x78\x90\xa4\xaa\x50\xc2\x46\x48\xc8\xb1\x72\x2d\x8d\x72\xa5\x09\x63\xae\xb0\x72\xac\x90\xe7\xc8\x33\x8a\x0a\x28\xb7\x6b\xd1\xf1\x9a\x2b\x8d\x24\xb7\xe3\x06\xf2\x5c\xc8\xa9\xac\x36\x4d\x0b\x7c\xab\xaf\x1e\x2b\xa1\x5c\x14\x55\x26\x69\xa5\x47\x8d\x78\x47\x58\x82\x79\x6b\x6d\x1b\x6a\x3b\xc7\x4c\x64\x95\xf7\xba\xd4\x59\x65\xbb\xbf\x37\x1e\x38\x1a\xb6\x87\x85\xa8\xb5\xa2\x39\x46\x13\x7e\x39\x91\x45\x76\xd2\x08\xfc\xf4\xc6\xac\x90\xb5\xa8\x35\x10\xbe\x6f\xcd\x9a\x48\x9d\x7d\x3a\x0c\xd4\xfd\x2a\xd1\x02\x10\xcf\x01\xb9\xed\xc5\x64\x90\xd9\x8c\xf2\x7b\xa0\xba\xc5\x83\x36\x2e\x1d\x26\xcc\x8e\x5e\xc2\x64\xc6\x75\x4f\x38\xd6\xb8\x8f\xa6\x5d\xb4\x81\x31\xdb\x94\x30\xfa\x17\xba\x14\x57\x2d\xa9\x69\xed\xb6\x14\x08\x64\x28\x35\xa1\x7c\x72\x54\xb0\x3e\x08\xfc\xf6\xd6\xac\x3c\x03\x49\xad\xcb\x6c\xd7\xf3\xfc\x35\x91\x49\x4a\x0f\x4d\x52\xda\xe2\x10\x3e\x52\x65\x27\xf2\xce\x92\xa9\xc0\x88\x89\x8c\xb0\x6b\x07\x34\x4e\xe9\x75\x8b\x3a\x04\x9a\xee\xe2\x1a\xf8\x5e\xd4\xd2\x46\x46\xed\x95\xc6\xd2\x00\x4d\x5b\x4b\x53\x07\xc7\xc0\xf3\x6f\x16\xbc\x5a\x4f\xbc\xb3\x80\x6d\x31\xcf\xad\x8f\xba\x9a\x67\xc3\x44\xd9\x1b\xbc\x78\x79\xd9\x4b\xb8\x01\xb7\xda\x4c\x24\x5a\x38\xaa\x2e\x4d\xfb\x14\xb6\xd9\x3b\xb5\x63\x14\xea\xba\x0a\x41\xd8\x96\xb8\xf2\x92\x95\x72\x17\xaa\x29\x61\xb6\x19\xe1\x3d\xbd\x1f\xb6\xe2\x01\x28\xdf\x88\x06\xd9\xac\xca\xb6\x72\xa6\x3e\x76\xcd\x69\x9b\xa1\x8d\xfa\x4f\xdd\xca\x20\x4b\xbf\xe3\x2c\x53\x73\x1f\x34\x9c\x15\x66\x45\xc5\x51\xb4\xb7\xc7\x6b\xce\x7a\xae\x2c\xf4\xd8\xdc\x99\xca\x2e\xf7\x48\xe2\xdb\xd5\xac\x84\x33\xc2\x9a\x72\x22\xf7\xb6\x03\x48\xfb\x48\x61\x7a\xc0\x77\xec\xcd\x3b\x94\xca\x5c\xd4\x7a\xbb\x6e\x25\xe5\xba\x2d\x63\xb7\xe9\xbf\x8a\xb8\xf9\x61\x2f\x6a\x20\xd2\x14\x18\xe5\xc5\x2c\xb8\x73\x5a\xdd\xbb\x22\xb5\x5b\x69\xd3\x46\xba\x3b\x60\x56\xe6\xb0\x68\x16\x19\xe5\x08\x89\xa8\xb2\x65\xe4\x53\x45\x56\xe6\x4b\x48\x0a\x0d\xa7\xde\xd5\xd8\xbd\x65\x37\xdf\xec\xe0\xdc\x52\x7d\x3e\xfb\xe2\x51\xf4\x77\x21\xf8\x57\xf4\xf1\xd4\xbf\x3b\x9f\xc6\x2e\xcc\x05\xea\x34\xf8\x98\x63\xef\xb6\xad\x52\xfb\x06\x0d\x49\x49\x1e\x73\xac\xf4\x16\xfe\x0d\x49\x49\x79\xf7\xff\x7a\x5f\x21\xe4\xcd\x55\x48\x9d\x07\x5c\xe7\xe7\xf0\x04\x85\xc4\x0a\x92\x1d\xcc\xff\x28\x84\x28\x18\x9e\x14\x82\x11\x5e\x9c\x08\x59\xac\xe6\xcf\xab\x3b\xf3\xd4\x9d\x7d\xab\xba\xff\x53\x57\xec\x68\xec\xc7\x1e\xed\x59\x75\x71\x5d\x07\xa2\xda\x95\x78\x18\xdf\x51\xd4\x47\x1f\x31\x0e\xc8\x6b\xbe\xa9\x3c\x27\xec\xf0\x33\x6a\xa4\x82\x0f\xd4\x4f\x77\x8b\x75\x55\x3b\x5b\xd8\x6f\xa0\x4a\xc7\x07\xe2\x43\x42\x9a\x5b\xd6\x3f\x92\xd1\xc1\xbc\x93\x32\x5f\x7c\xc5\xbd\xcb\xf9\xdf\x91\xec\x4f\x39\x23\xe1\x03\x5f\x2f\xe7\x47\xff\x0b\x00\x00\xff\xff\x54\x23\x31\x1e\x41\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8257, mode: os.FileMode(420), modTime: time.Unix(1501598175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\xc7\x04\xc2\x92\x20\x41\x1a\x20\x8d\x8d\x38\xdd\x30\x14\x9d\x40\x4b\x67\x89\xb0\x24\x6a\x24\xa5\xa4\xab\xfb\xdf\x07\x51\x16\xf5\x46\xdb\xdd\x9b\xbe\x18\xe6\xdd\x3d\xe4\xdd\x3d\xf7\x90\x6f\xdf\xb8\x6b\x9a\xb9\x22\xb6\xac\x32\x9a\x4c\xe1\x9b\x05\x00\x10\x10\x81\x60\x3b\x73\x1b\x68\xa6\x16\xaa\x8f\x66\x54\x4e\xf5\xbf\xea\xf3\xfd\x32\xf2\xab\x65\xb0\x9d\x6f\x97\xe7\x3f\x7d\xb7\x7b\xe6\x8b\x0b\xfd\x97\x04\x92\x96\x44\xa2\x21\xbe\x31\x9d\xc4\x08\xf1\x08\x4a\x6b\x3c\x89\x13\x84\x39\x09\xb6\x24\x42\x61\xc0\x69\x8d\x27\x71\xa2\x84\xad\x49\x72\xfb\x8a\x81\x01\xa7\x35\x9e\xc4\x29\xf2\x88\x93\xd0\x94\xd4\xde\x72\x12\xe1\x7d\x3f\x36\x60\x69\x4a\xb2\x10\xca\x08\x9c\x4b\x65\x41\x41\x02\xcb\xfa\x6e\x59\xba\x63\xba\xd5\x65\xa4\x9b\xd3\x78\x97\x11\x24\x34\xdb\x6a\xff\xb6\x26\x3a\x8a\x6e\xe0\x33\xcc\xfe\x04\xdb\xf9\xe5\xfe\xe9\xf9\xd3\xd5\xc3\xdd\xc2\x86\x2f\x17\x20\x63\x6c\x09\x83\x41\xcc\xe0\x96\x73\xc6\xcf\xe1\x91\x41\x49\xb9\x2c\x48\x12\x31\x78\x61\x7c\x2b\x72\x12\x20\x50\x51\xef\x8e\x40\x64\x15\x0c\x29\x4b\x31\x93\x1a\xa2\x8c\x20\xc6\x24\xef\xf4\x4c\x9b\x38\xca\x82\x67\x30\x57\x0b\x1b\x5a\xf3\x36\x84\xf6\x40\xfe\xf2\xea\xf9\x83\x2b\x78\xe0\x56\x99\x58\x3d\xb2\x0d\x12\xc9\x8e\x27\x52\x46\x1d\xf2\x35\xfb\xd5\x85\x7d\xcd\x19\x97\xa0\x63\x3d\x67\x52\x46\x6a\x52\x56\x28\x25\xcd\x22\x01\xce\xe5\x74\xef\x5b\x95\xe3\xaa\x46\xa1\x59\xd4\x39\xa9\x19\x4b\x9d\xdf\x73\x3e\x2c\x3e\xde\xba\x67\xba\x78\xee\x81\x30\xbf\x8d\x5b\x3c\xdc\x2c\x57\x73\xcf\x59\xae\xe6\x87\x3d\xee\x16\x35\x7c\xfd\x7b\x04\x49\x79\x29\x9f\x41\xc1\xee\x16\xd7\xf7\x8f\x86\xae\x9b\x77\xbb\xbe\x7f\xf4\xea\x90\x7a\xaf\x44\xe0\x0f\x85\x98\x4e\x5d\x49\x56\xaf\x0d\xf5\xb4\xf9\x1b\x92\x24\x6b\x12\x6c\xeb\x2e\xfc\x51\x20\xff\xda\xb4\x61\xda\x39\xbd\xed\x0c\xfc\x6d\xf0\xc0\x96\xbc\xc0\x83\xd9\x34\xd5\xea\x37\xe7\xbc\x57\x3d\x43\x46\xe6\x30\x13\x83\xf6\xd9\x0e\xc8\xdb\xe4\xb9\x77\x52\x60\xfb\xc2\x9f\xab\x9e\xd8\x87\xa6\xd1\xbf\xb9\x5f\x5d\x5d\x3f\xdc\xfa\xcb\xa7\xc5\xc7\xe5\xf3\xc1\xc4\x2a\xa2\xd8\x93\x36\x6e\x0a\x15\x6d\xec\xde\x11\xd3\x6d\x48\x39\xcc\x72\xf3\x6c\xf5\x3d\xea\x0e\x37\xca\xd1\x4e\xcd\xbf\x52\x8e\x7f\x24\x19\x83\x89\x35\x49\x46\x3b\x96\x37\x8d\xf3\x91\xc1\x54\x33\x35\x1a\x33\x43\x13\x0d\x3c\xb6\x0c\xa4\x30\x31\x7b\xd4\xed\xe1\x86\x7a\x0e\x8b\x4c\x60\x47\x2c\xc6\xf3\x6f\x98\x63\xd3\x84\x19\x65\x61\x20\x42\xba\x9f\xa4\x90\x6c\xac\xa1\x4d\xe9\x58\xe6\x73\xc6\xa4\xe7\x2c\x7f\xbd\x51\x86\x97\x98\x26\xa8\x06\x6e\xe0\x62\xc3\x1b\x0f\x6c\xd5\xf7\x90\xb5\x0f\x0c\x45\x8d\xcd\xd8\xbd\x23\x7f\x63\xae\x54\x5f\x86\x2f\xbe\x76\xf1\x33\x92\xa2\xe7\x4c\x02\x22\x8f\x43\xf5\x6f\xcd\x5a\x1a\x94\x14\x74\xa9\x39\x63\x60\x3b\x63\xfc\x3a\x83\x63\x1c\xee\xf0\xb1\xbd\x60\xc7\x40\x3d\xff\xfd\x35\xd6\xe7\xab\x65\xb0\xbe\x05\x19\x53\x01\x42\x72\x9a\x0b\x35\x05\x09\x11\x12\x72\x22\xe3\xea\xfa\xcf\x59\x86\x99\x84\x0d\x67\xa9\x32\x56\xeb\x67\xc3\xc7\x58\xdb\xaf\x89\x9a\x81\x61\xa9\x60\x07\x02\x43\x78\x27\x76\xee\xe7\xdf\xdd\x2f\xef\x9d\xdd\xee\x5d\x5d\xb2\x90\x65\xa8\x39\xb1\x7f\xa4\x68\x36\xb0\x24\x6c\x53\xec\x28\xda\x8f\x5f\xb7\x03\xe9\x18\x4f\xeb\xa7\x3c\xac\x27\x55\xef\x53\xdf\x02\x0c\x22\x94\x30\x2b\x20\xa2\x32\x2e\xd6\x67\x01\x4b\xdd\x3b\x94\x2b\xc9\x91\xa4\x6e\x19\x75\x20\x9e\x30\x61\x24\xac\x30\xaa\xfa\x88\x18\x93\x04\x72\xc2\x25\xb0\xcd\xdf\x46\xd5\x67\xe6\x0a\x74\x78\x4f\xf6\x0a\x62\xc3\x8c\xf4\xb3\x57\x3c\x1a\xf8\x18\xf5\xf0\xa9\xa7\x51\xbd\x08\xcb\x48\xb6\xb1\xcb\x86\xea\xb6\xb5\x0f\x54\x83\x34\xcf\x8f\x4b\xf2\x6f\xac\x00\x11\xb3\x22\x09\x41\xe4\x18\xd0\xcd\x57\x20\xfa\xd5\x29\x63\x22\x1b\xeb\x1a\x01\x5f\x31\x28\x24\x86\x23\x7d\x6e\x0f\x70\x5c\x9f\x0f\xf2\xe9\x3f\x22\x54\x49\x92\xe6\xe1\x5b\xef\xef\x07\x2c\x44\xcf\xf9\xf9\x7f\xe8\xe3\xe9\xf6\x74\xca\xe0\x74\x8e\xa3\x5e\xb0\x06\x0d\xb6\xfe\x0a\x00\x00\xff\xff\x9f\xc4\x00\xa6\xc0\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3520, mode: os.FileMode(420), modTime: time.Unix(1501598099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xcc\x2a\xbd\xe5\x5b\xca\x4b\xbf\x6a\xca\xef\xa5\x78\x3c\x6f\x04\xda\x14\x76\xe5\xe8\x26\x0f\x79\xcb\x85\x8c\x0c\x48\x50\xe7\xe6\x96\xb7\x29\xec\xa2\xa1\x16\xa6\xaf\x0c\x0c\x5d\xf3\x37\x00\x00\xff\xff\x80\x34\x98\x76\xf9\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1273, mode: os.FileMode(420), modTime: time.Unix(1501332229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

