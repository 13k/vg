// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1501412832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\xb6\x16\xff\xdf\x9f\xe2\xd4\x35\x60\x7b\x80\xe2\x9b\xdc\xff\x36\xe4\x02\xe9\x12\xb4\x01\xda\x26\x48\xdb\x0d\x17\x45\x27\xd0\xd2\xb1\x4c\x84\x22\x35\x92\x52\xe2\x21\x1f\xfe\x82\xa4\x1e\x94\x44\x37\xdd\x9d\x5a\x03\x43\x17\xf2\xbc\x78\x1e\xbf\x73\x48\xbd\x7c\xb1\xd9\x52\xbe\xd9\x51\xb5\xdf\xcc\x66\xbb\x92\x27\x9a\x0a\x0e\x55\x36\x03\x00\xa0\x3b\xe0\x42\x43\x22\x4a\xae\x61\x41\x64\x56\xc1\x7f\x60\x93\x62\xb5\xe1\x25\x63\x96\xc4\xfc\x12\x91\xe7\x84\xa7\x0d\x97\xf9\x49\xd4\xa5\xe4\xf6\x4f\xe4\xa9\xfd\xf7\x25\x60\xb2\x17\x4e\xcc\xe7\xd3\x2f\x76\x4d\x3d\x50\x9d\xec\xfb\x6b\x56\x22\x51\x08\x94\x53\xdd\xae\x98\x5f\x5c\x65\xb1\x59\x6c\xe8\x4f\x4e\xa2\x21\x0f\x49\x34\xad\x88\xc6\x11\x5f\xb3\xf1\x15\xde\x14\x8f\x72\x07\xb6\x2c\x4b\x92\x16\x24\xb9\x27\x19\xaa\x11\x4b\x60\xcb\xb2\x64\x4c\x6c\x09\xbb\x7a\xc4\x64\xc4\xd2\x6d\x7d\xc5\xca\xb2\xc8\x24\x49\xc7\x26\x0e\xd7\x2d\xf1\xf2\xa7\x65\x8f\xb0\x8b\x94\xd3\xd0\x06\xc8\xfc\xe7\xc5\xbf\xf1\xf4\x2c\xec\x3e\xbb\x5c\x65\xc0\x28\xbf\x77\xac\x3d\xce\xc1\xd1\xe9\x0e\x3e\x43\xf4\x17\xcc\x17\xbf\x5d\xdf\x7d\xfc\x74\xf1\xf6\xf5\xcd\x1c\xba\x53\xd9\xac\xb8\x92\x52\xc8\x9f\xe1\xbd\x80\x8a\x4a\x5d\x12\x96\x09\x78\x10\xf2\x5e\x15\x24\x41\xa0\xca\x05\x16\x81\x68\xd0\x7b\x84\x5c\xe4\xc8\xbb\xe4\xa8\x32\xd8\x23\x2b\x42\xe1\x70\x89\x08\xa7\xbd\x54\x4c\x52\xe8\x6c\x89\x6f\x2f\x3e\xbe\xd9\x28\x99\x6c\x02\x47\xe9\x85\xdd\x1d\x84\x1f\x3b\x48\x20\x51\xac\xc0\x96\x75\xe5\x15\xd2\x1a\x22\xa6\xe1\xcc\x63\x57\xa8\xc1\x46\xfd\xec\x0b\xac\xb6\x44\x21\x27\x39\xc2\xe2\xf6\xf7\xcb\x75\x5f\x96\x21\xec\x7c\xb3\xaa\x32\x5b\x29\x1f\x50\x6b\xca\x33\x55\xa7\xce\x99\x4d\x9d\x75\xc7\x11\x65\x8f\xd0\x9a\x0d\x8b\x56\xc0\xac\x8d\xc1\x85\xb3\x9c\xf2\xcc\xf3\x4e\x98\xdf\xfa\x0c\x16\x6f\x6e\xde\x5d\x6d\x4e\xda\x88\x6d\x3c\xb6\x1e\x5f\xdc\x31\xde\xbc\xbd\x7c\x7d\xe3\xb8\xdd\xbf\x03\xcf\xbe\xbe\x79\x75\xfd\x7e\x3e\x70\x4b\x48\xc6\xab\xeb\xf7\xe0\xa8\xdd\x09\x98\xc2\x6f\xe3\x09\x19\x63\x40\x70\xec\xe4\xb1\x08\x67\xb8\x35\xbb\xa5\x72\x55\x1b\xef\x08\x63\x5b\x92\xdc\xdb\x80\xfc\x59\xa2\x3c\x34\x11\x59\x7b\x29\xb0\x18\x52\x9f\x83\x96\x25\x06\xce\xdb\x78\xa9\xef\xf3\x9f\x7d\xaf\x05\xcf\x1c\xe6\x0b\x1f\xae\xf6\xc8\xa0\x14\x8c\x2f\x2c\x59\x7e\x9f\x52\x09\x51\x11\x2e\x96\x3e\x85\x8b\x44\x4f\x7a\x13\x65\xab\xa3\xf3\x59\x00\x0e\xe2\xcb\xeb\x0f\x17\xaf\xde\x5e\xc5\xb7\x77\x37\xef\x6e\x3f\xfa\xe1\x6f\xaa\x51\x41\x94\x80\x69\x53\x71\x21\x45\x5e\x68\x88\x05\x4b\x63\x6f\x61\xc4\x01\xa1\xcd\x36\xd9\x4d\xb2\xad\x3a\x0b\xd6\x30\xef\x23\xea\x31\xe9\x0d\x84\xb4\xa0\xd9\x83\x8b\x41\xf9\xff\x38\xe4\x0b\x34\xa8\x11\xf2\x75\x95\x7e\xd9\x50\x0f\x6a\xbd\x0b\x5f\x9b\x1b\x81\x12\xea\x53\xb9\x28\x87\x8a\xca\xa7\x0b\x51\x4d\x90\x12\x18\x0c\x72\x2f\x67\x86\x91\x7c\x8e\x03\xc3\xb1\xef\xd7\x0e\x42\x00\x20\x11\x02\x35\x57\xef\x04\x4e\x7e\x74\x77\xe0\xe4\xf1\xb6\x65\x1f\x27\x9f\x3f\x01\x58\x4e\x06\xe6\x24\x5d\x5a\x0d\x50\xfd\x1f\xb4\x33\x9b\x45\x9f\x8a\xd4\x65\x50\xab\xc1\xee\x65\x02\x32\xa3\xbd\x84\x8c\xea\x7d\xb9\x3d\x49\x44\xbe\x79\x8d\xfa\x83\x96\x48\xf2\x4d\x95\x79\x22\xee\x90\x09\x92\x1a\x19\x26\xb7\xd5\x1e\x19\x83\x82\x48\x0d\x62\xf7\xb7\xa5\xd6\xe5\x80\x15\x61\x10\x45\x4e\x96\x89\x22\x3c\x81\x12\xa5\x4c\x70\x36\x38\x75\xcf\x39\x73\x88\x48\xdf\x13\x2f\xce\xc7\x34\x83\xda\xbd\xeb\xd5\x51\x8f\xd6\xaf\xd0\x6e\x78\x1a\x93\x84\x71\x64\x30\x24\x7e\xc3\xf4\xe0\x63\xc9\x7f\x45\x09\x6a\x2f\x4a\x96\x82\x2a\x30\xa1\xbb\x03\x90\x76\xf4\xd3\x7b\xa2\x9b\xdd\x2d\x02\x3e\x62\x52\x6a\x4c\x47\x88\x12\x98\x53\xc3\x88\xf2\xbd\x53\xcd\xc4\xd3\x9f\x69\x5a\xa5\x4a\x13\x5d\xaa\x38\x11\x29\xc2\xc2\xfd\x31\x69\x88\xbf\x21\x72\x9e\x57\x16\x9e\x39\xc3\x88\xda\x49\xb2\xd4\xa2\x1b\xa3\xa3\x48\xf0\xa8\x22\x92\x92\x2d\x43\xb8\xfd\xfd\xb2\x31\xdc\x49\x81\x28\xa2\x2a\xaa\x43\x16\xa9\x72\xab\x34\xd5\xa5\x11\x76\xec\x86\x55\x5f\xb1\x76\x94\xa7\x40\x38\x18\x6d\x51\x93\x9c\xb6\x17\xb2\x1e\x30\x74\x5b\xb1\x14\x42\xdb\x31\xd3\xee\x3f\xec\x29\x43\xd0\xa8\x4c\xa6\x0d\x88\x8c\xbb\xba\x36\x49\x77\x8e\x2c\xda\xc1\x7c\x48\xea\x0d\x85\xfd\xbe\x6a\xd4\x73\x7c\xe8\x5c\x19\xdb\x29\x77\x95\x10\xfd\x75\x29\xeb\x9e\x18\xba\x83\x2d\x66\x94\xdb\xeb\xa9\x3d\xd2\x9f\x1d\xf8\xfe\x02\x42\xd6\x27\x08\xa8\x7a\x71\xee\x25\xe7\x2f\x6d\x14\xfd\x5f\x2f\xf0\x63\x11\xfd\x61\x62\xc0\xef\x85\x65\xb8\xfd\x12\xf4\x9e\x2a\x50\x5a\xd2\x42\x59\xc0\x63\x44\x69\x28\x88\xde\x9b\xea\x2c\x04\x47\xae\x61\x27\x45\x6e\x37\xcd\xfa\x49\xff\x76\x30\x88\xc7\xaa\xbe\x50\x0f\x96\x9f\x40\x61\x0a\x4b\xf5\xb4\xf9\xfc\xc7\xe6\xcb\x4f\x8b\xa7\xa7\xe5\xba\x8f\x35\xe3\x84\x9c\xcd\x8c\x05\x0c\x4d\x6a\x26\xc6\x01\x51\x84\x8f\x09\x2b\x15\xad\x02\x7b\x1c\xe6\xd6\xbf\xab\xd8\xf5\x49\x5e\xe6\x5b\x94\xb1\xd8\xc5\x49\x9e\xc6\x44\x66\x2a\x7e\x10\xb1\x28\xb4\x5a\xc3\x39\x9c\xce\x21\x7a\x24\x9d\x4b\xed\x2f\x4a\x61\x7e\xd1\xac\x90\x1a\xa7\x68\x12\x1a\x82\xe6\xd3\xe8\xef\x2e\x87\x8d\xfe\x5f\xf7\x84\x67\x68\x9d\x6d\x94\x19\x10\x4f\xa9\xc4\x44\x0b\x79\x00\x2d\x5c\x4f\x92\x89\xb7\x28\x76\x76\xb1\x1e\xc9\xa6\xb6\xb0\x83\xc0\xc6\xc2\xcb\x6e\xc5\xe8\x4d\x4a\x29\x4d\x8e\x7c\x3f\x27\xa5\xa8\xb4\x14\x07\xe8\x82\x74\x87\xb9\xa8\x50\x81\xe0\x68\xea\x2a\x2f\x99\xa6\x05\xf3\x0e\x0f\xa6\xab\x10\xc6\x8c\x85\x54\x42\x22\xb8\x46\xae\xd5\x44\x06\x21\x57\xa5\x44\xf0\x0c\xba\x80\x07\x49\x8a\x02\x25\xec\x84\x84\x14\x0b\xd7\xd2\x28\x57\x9a\x30\xe6\x0a\x2b\xc5\x02\x79\x8a\x3c\xa1\xa8\x80\x72\xbb\x16\x1c\xaf\xb9\xd2\x48\x52\x3b\x6e\x20\x4f\x85\x9c\xca\x6a\xd3\xb4\xc0\xb7\xfa\xea\xb1\x10\xca\x45\x51\x25\x92\x16\x7a\xd4\x88\x2b\xc2\x22\x4c\x1b\x6b\x9b\x50\xdb\x39\x66\x22\xab\xbc\xf7\xa5\xd6\x2a\xdb\xfd\xbd\xf1\xc0\xd1\xb0\x03\xac\x44\xa9\x15\x4d\x31\x98\xf0\xeb\x89\x2c\xb2\x93\x46\xcf\x4f\x6f\xcc\x0a\xd9\x8a\x52\x03\xe1\x87\xc6\xac\x89\xd4\xd9\xc7\xc3\x9e\xba\x5f\x25\x5a\x00\xe2\x29\x20\xb7\xbd\x98\x0c\x32\x9b\x51\x7e\x0f\x54\x37\x78\xd0\xc4\xa5\xc5\x84\xf9\xec\x25\x4c\x66\x5c\xfb\x88\x63\x8d\xfb\x68\xda\x45\x13\x18\xb3\x4d\x09\xa3\x7f\xa1\x4b\x71\xd5\x90\x9a\xd6\x6e\x4b\x81\x40\x82\x52\x13\xca\x27\x47\x05\xeb\x83\x9e\xdf\xde\x9a\x95\x67\x20\xc9\xb9\x8c\x2a\xdf\x57\x13\x99\xa3\xf4\xd0\x1c\xa5\x2d\x06\xe1\x23\x55\x76\x1a\x6f\xad\x98\x0a\x88\x98\x48\x08\xbb\x76\x20\xe3\x94\x5e\x37\x88\x43\xa0\xee\x2c\xae\x79\x1f\x44\x29\x6d\x54\xd4\x41\x69\xcc\x0d\xc8\x34\x75\x34\x75\x60\x0c\x34\xff\x66\x81\xab\xf1\xc4\x3b\x0b\xd6\x16\xef\xdc\xfa\xa8\xa3\x79\x36\x4c\x94\xb9\xbd\xd7\x2e\x2f\x73\x09\x37\xc0\x56\x9a\x69\x44\x0b\x47\xd5\xa6\x68\x97\xbe\x36\x73\xa7\x76\x8c\x42\x5d\x16\x7d\x00\xb6\xe5\xad\xbc\x44\xa5\xdc\x85\x6a\x4a\x88\xad\xc7\x77\x4f\xef\x87\xbd\x78\x00\xca\x77\xa2\x46\x35\xab\xb2\xa9\x9a\xa9\x8f\x5d\x72\xda\x64\x68\xad\xfe\x53\xbb\x32\xc8\xd2\xef\x38\xc7\x94\xdc\x07\x0c\x67\x85\x59\x51\x61\x04\xed\xec\xf1\x1a\xb3\x5e\x2a\x0b\x3b\x36\x77\xa6\xb2\xcb\x3d\x90\xf8\x76\xd5\x2b\xfd\xf9\x60\x4b\x39\x91\x07\x8b\xfe\xd2\x3e\x50\x18\xfc\xff\x8e\x7d\xb9\x42\xa9\xcc\x25\xad\xb3\xeb\x56\x52\xae\x9b\x32\x76\x9b\xfe\x8b\x88\x9b\x1d\x0e\xa2\x04\x22\x4d\x81\x51\x9e\xcd\x7b\xf7\x4d\xab\xbb\xca\x62\xbb\x15\xd7\x2d\xa4\xbd\xff\x25\x79\x0a\xab\x7a\x91\x51\x8e\x10\x89\x22\x59\x07\x3e\x54\x24\x79\xba\x86\x28\xd3\x70\xea\x5d\x8b\xdd\x3b\x76\xfd\xc5\x0e\xce\x2d\xd5\xe7\xb3\x2f\x1e\x45\x77\x0f\x82\x7f\x05\x1f\x4e\xfd\x7b\xf3\x69\xe8\xb2\x9c\xa1\x8e\x7b\x9f\x72\xec\xbd\xb6\x51\x6a\xdf\x9f\x21\xca\xc9\x63\x8a\x85\xde\xc3\xbf\x21\xca\x29\x6f\xff\x5f\x1f\x0a\x84\xb4\xbe\x06\xa9\xf3\x1e\xd7\xf9\x39\x3c\x41\x26\xb1\x80\xa8\x82\xe5\x1f\x99\x10\x19\xc3\x93\x4c\x30\xc2\xb3\x13\x21\xb3\xcd\xf2\x79\x75\x67\x9e\xba\xb3\x6f\x55\xf7\x7f\xea\x0a\x1d\x8d\xfd\xd8\xa3\x3d\xab\x2e\xac\xeb\x48\x54\xdb\x12\xef\xc7\x77\x14\xf5\xd1\x07\x8c\x23\xf2\xea\xef\x29\xcf\x09\x3b\xfe\x84\x1a\xa8\xe0\x23\xf5\xd3\xde\x60\x5d\xd5\xce\x57\xf6\x0b\xa8\xd2\xe1\x61\xf8\x98\x90\xfa\x86\xf5\x8f\x64\xb4\x30\xef\xa4\x2c\x57\x5f\x71\xef\x7a\xf9\x77\x24\xfb\x53\xce\x48\xf8\xc0\xd7\xeb\xe5\xec\x7f\x01\x00\x00\xff\xff\x31\x48\x35\x53\x3f\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8255, mode: os.FileMode(420), modTime: time.Unix(1503149124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\xc7\x04\xc2\x92\x20\x41\x1a\x20\x8d\x8d\x38\xdd\x30\x14\x9d\x40\x4b\x67\x89\xb0\x24\x6a\x24\xa5\xa4\xab\xfb\xdf\x07\x51\x16\xf5\x46\xdb\xdd\x9b\xbe\x18\xe6\xdd\x3d\xe4\xdd\x3d\xf7\x90\x6f\xdf\xb8\x6b\x9a\xb9\x22\xb6\xac\x32\x9a\x4c\xe1\x9b\x05\x00\x10\x10\x81\x60\x3b\x73\x1b\x68\xa6\x16\xaa\x8f\x66\x54\x4e\xf5\xbf\xea\xf3\xfd\x32\xf2\xab\x65\xb0\x9d\x6f\x97\xe7\x3f\x7d\xb7\x7b\xe6\x8b\x0b\xfd\x97\x04\x92\x96\x44\xa2\x21\xbe\x31\x9d\xc4\x08\xf1\x08\x4a\x6b\x3c\x89\x13\x84\x39\x09\xb6\x24\x42\x61\xc0\x69\x8d\x27\x71\xa2\x84\xad\x49\x72\xfb\x8a\x81\x01\xa7\x35\x9e\xc4\x29\xf2\x88\x93\xd0\x94\xd4\xde\x72\x12\xe1\x7d\x3f\x36\x60\x69\x4a\xb2\x10\xca\x08\x9c\x4b\x65\x41\x41\x02\xcb\xfa\x6e\x59\xba\x63\xba\xd5\x65\xa4\x9b\xd3\x78\x97\x11\x24\x34\xdb\x6a\xff\xb6\x26\x3a\x8a\x6e\xe0\x33\xcc\xfe\x04\xdb\xf9\xe5\xfe\xe9\xf9\xd3\xd5\xc3\xdd\xc2\x86\x2f\x17\x20\x63\x6c\x09\x83\x41\xcc\xe0\x96\x73\xc6\xcf\xe1\x91\x41\x49\xb9\x2c\x48\x12\x31\x78\x61\x7c\x2b\x72\x12\x20\x50\x51\xef\x8e\x40\x64\x15\x0c\x29\x4b\x31\x93\x1a\xa2\x8c\x20\xc6\x24\xef\xf4\x4c\x9b\x38\xca\x82\x67\x30\x57\x0b\x1b\x5a\xf3\x36\x84\xf6\x40\xfe\xf2\xea\xf9\x83\x2b\x78\xe0\x56\x99\x58\x3d\xb2\x0d\x12\xc9\x8e\x27\x52\x46\x1d\xf2\x35\xfb\xd5\x85\x7d\xcd\x19\x97\xa0\x63\x3d\x67\x52\x46\x6a\x52\x56\x28\x25\xcd\x22\x01\xce\xe5\x74\xef\x5b\x95\xe3\xaa\x46\xa1\x59\xd4\x39\xa9\x19\x4b\x9d\xdf\x73\x3e\x2c\x3e\xde\xba\x67\xba\x78\xee\x81\x30\xbf\x8d\x5b\x3c\xdc\x2c\x57\x73\xcf\x59\xae\xe6\x87\x3d\xee\x16\x35\x7c\xfd\x7b\x04\x49\x79\x29\x9f\x41\xc1\xee\x16\xd7\xf7\x8f\x86\xae\x9b\x77\xbb\xbe\x7f\xf4\xea\x90\x7a\xaf\x44\xe0\x0f\x85\x98\x4e\x5d\x49\x56\xaf\x0d\xf5\xb4\xf9\x1b\x92\x24\x6b\x12\x6c\xeb\x2e\xfc\x51\x20\xff\xda\xb4\x61\xda\x39\xbd\xed\x0c\xfc\x6d\xf0\xc0\x96\xbc\xc0\x83\xd9\x34\xd5\xea\x37\xe7\xbc\x57\x3d\x43\x46\xe6\x30\x13\x83\xf6\xd9\x0e\xc8\xdb\xe4\xb9\x77\x52\x60\xfb\xc2\x9f\xab\x9e\xd8\x87\xa6\xd1\xbf\xb9\x5f\x5d\x5d\x3f\xdc\xfa\xcb\xa7\xc5\xc7\xe5\xf3\xc1\xc4\x2a\xa2\xd8\x93\x36\x6e\x0a\x15\x6d\xec\xde\x11\xd3\x6d\x48\x39\xcc\x72\xf3\x6c\xf5\x3d\xea\x0e\x37\xca\xd1\x4e\xcd\xbf\x52\x8e\x7f\x24\x19\x83\x89\x35\x49\x46\x3b\x96\x37\x8d\xf3\x91\xc1\x54\x33\x35\x1a\x33\x43\x13\x0d\x3c\xb6\x0c\xa4\x30\x31\x7b\xd4\xed\xe1\x86\x7a\x0e\x8b\x4c\x60\x47\x2c\xc6\xf3\x6f\x98\x63\xd3\x84\x19\x65\x61\x20\x42\xba\x9f\xa4\x90\x6c\xac\xa1\x4d\xe9\x58\xe6\x73\xc6\xa4\xe7\x2c\x7f\xbd\x51\x86\x97\x98\x26\xa8\x06\x6e\xe0\x62\xc3\x1b\x0f\x6c\xd5\xf7\x90\xb5\x0f\x0c\x45\x8d\xcd\xd8\xbd\x23\x7f\x63\xae\x54\x5f\x86\x2f\xbe\x76\xf1\x33\x92\xa2\xe7\x4c\x02\x22\x8f\x43\xf5\x6f\xcd\x5a\x1a\x94\x14\x74\xa9\x39\x63\x60\x3b\x63\xfc\x3a\x83\x63\x1c\xee\xf0\xb1\xbd\x60\xc7\x40\x3d\xff\xfd\x35\xd6\xe7\xab\x65\xb0\xbe\x05\x19\x53\x01\x42\x72\x9a\x0b\x35\x05\x09\x11\x12\x72\x22\xe3\xea\xfa\xcf\x59\x86\x99\x84\x0d\x67\xa9\x32\x56\xeb\x67\xc3\xc7\x58\xdb\xaf\x89\x9a\x81\x61\xa9\x60\x07\x02\x43\x78\x27\x76\xee\xe7\xdf\xdd\x2f\xef\x9d\xdd\xee\x5d\x5d\xb2\x90\x65\xa8\x39\xb1\x7f\xa4\x68\x36\xb0\x24\x6c\x53\xec\x28\xda\x8f\x5f\xb7\x03\xe9\x18\x4f\xeb\xa7\x3c\xac\x27\x55\xef\x53\xdf\x02\x0c\x22\x94\x30\x2b\x20\xa2\x32\x2e\xd6\x67\x01\x4b\xdd\x3b\x94\x2b\xc9\x91\xa4\x6e\x19\x75\x20\x9e\x30\x61\x24\xac\x30\xaa\xfa\x88\x18\x93\x04\x72\xc2\x25\xb0\xcd\xdf\x46\xd5\x67\xe6\x0a\x74\x78\x4f\xf6\x0a\x62\xc3\x8c\xf4\xb3\x57\x3c\x1a\xf8\x18\xf5\xf0\xa9\xa7\x51\xbd\x08\xcb\x48\xb6\xb1\xcb\x86\xea\xb6\xb5\x0f\x54\x83\x34\xcf\x8f\x4b\xf2\x6f\xac\x00\x11\xb3\x22\x09\x41\xe4\x18\xd0\xcd\x57\x20\xfa\xd5\x29\x63\x22\x1b\xeb\x1a\x01\x5f\x31\x28\x24\x86\x23\x7d\x6e\x0f\x70\x5c\x9f\x0f\xf2\xe9\x3f\x22\x54\x49\x92\xe6\xe1\x5b\xef\xef\x07\x2c\x44\xcf\xf9\xf9\x7f\xe8\xe3\xe9\xf6\x74\xca\xe0\x74\x8e\xa3\x5e\xb0\x06\x0d\xb6\xfe\x0a\x00\x00\xff\xff\x9f\xc4\x00\xa6\xc0\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3520, mode: os.FileMode(420), modTime: time.Unix(1503149123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1503149123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

