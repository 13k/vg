// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x69\x6f\xdb\x3c\x12\xfe\xee\x5f\x31\x75\x03\xd8\x7e\x01\xc5\x9b\xec\xb7\x16\x59\x20\x6d\x82\x34\x40\xda\x04\x49\xbb\xc5\x22\x48\x05\x5a\x1c\xcb\x44\x28\x52\x4b\x52\x8a\xbd\xc8\x8f\x5f\x90\xba\x28\x89\xe9\x81\xba\xaf\x81\x22\x15\x39\x17\x67\x9e\x39\xc8\xd7\xaf\x96\x2b\x26\x96\x6b\xa6\x37\xcb\xc9\x64\x5d\x88\xc4\x30\x29\xa0\x4c\x27\x00\x00\x6c\x0d\x42\x1a\x48\x64\x21\x0c\x1c\x10\x95\x96\xf0\x2f\x58\x52\x2c\x97\xa2\xe0\xdc\x91\xd8\x5f\x22\xb3\x8c\x08\xda\x70\xd9\x9f\x42\x53\x28\xe1\x3e\x51\x50\xf7\xf7\x35\x60\xb2\x91\x95\x98\xfb\xa3\x07\xb7\xa6\x9f\x98\x49\x36\xfd\x35\x27\x91\x68\x04\x26\x98\x69\x57\xec\x2f\x2e\xd3\xd8\x2e\x36\xf4\x87\x87\xd1\x90\x87\x24\x86\x95\xc4\xe0\x88\xaf\xd9\xf8\x0e\x2f\xc5\x17\xb9\x03\x5b\x8e\x25\xa1\x39\x49\x1e\x49\x8a\x7a\xc4\x12\xd8\x72\x2c\x29\x97\x2b\xc2\xcf\xb7\x98\x8c\x58\xba\xad\xef\x58\x59\xe4\xa9\x22\x74\x6c\xe2\x70\xdd\x11\xcf\xfe\x9a\xf5\x08\xbb\x48\x55\x1a\xda\x00\xd9\x7f\x5e\xfc\x1b\x4f\x4f\xc2\xee\x73\xcb\x65\x0a\x9c\x89\xc7\x8a\xb5\xc7\x39\x38\x3a\x5b\xc3\x3d\x44\xff\x83\xe9\xc1\xbf\x2f\x6f\x3f\x7f\x39\xbd\xba\xb8\x9e\x42\x77\x2a\x87\x8a\x73\xa5\xa4\x7a\x03\x9f\x24\x94\x4c\x99\x82\xf0\x54\xc2\x93\x54\x8f\x3a\x27\x09\x02\xd3\x55\x60\x11\x88\x01\xb3\x41\xc8\x64\x86\xa2\x03\x47\x99\xc2\x06\x79\x1e\x0a\x47\x05\x44\x38\xea\x41\x31\xa1\xd0\xd9\x12\xdf\x9c\x7e\xfe\xb0\xd4\x2a\x59\x06\x8e\xd2\x0b\x7b\x75\x10\xf1\xd2\x41\x02\x40\x71\x02\x5b\xd6\xb9\x97\x48\x0b\x88\xb8\x81\x63\x8f\x5d\xa3\x01\x17\xf5\xe3\x07\x98\xaf\x88\x46\x41\x32\x84\x83\x9b\xaf\x67\x8b\xbe\x2c\x4b\xd8\xf9\x66\x5e\xa6\x2e\x53\xee\xd0\x18\x26\x52\x5d\x43\xe7\xd8\x41\x67\xd1\x71\x44\xe9\x16\x5a\xb3\x1b\xa2\x4a\xbb\x8b\xc0\x69\x65\x37\x13\xa9\xe7\x9b\x30\xb7\xf3\x18\x1c\x7c\xb8\xfe\x78\xbe\x3c\x6c\xe3\xb5\xf4\xd8\x7a\x7c\x71\xc7\x78\x7d\x75\x76\x71\x5d\x71\x57\x7f\x07\x7e\xbd\xb8\x7e\x77\xf9\x69\x3a\x70\x4a\x48\xc6\xbb\xcb\x4f\x50\x51\x57\x27\xe0\x1a\x7f\x8e\x27\x64\x8c\x2d\x81\x63\x17\x8f\x45\x54\x86\x3b\xb3\x7b\x54\xcd\x91\xfa\x0e\x7a\xe3\x1f\xb1\x23\x75\x56\x0c\xc0\x67\xf5\x3b\xb2\xec\x91\x32\x05\x51\x1e\x86\x67\x9f\xa2\x3a\x7d\x4f\x7a\xe3\x59\xa7\xa3\xb3\x33\x90\x80\xf1\xd9\xe5\xdd\xe9\xbb\xab\xf3\xf8\xe6\xf6\xfa\xe3\xcd\x67\xdf\xe5\x0d\xfe\x35\x44\x09\xd8\xc6\x10\xe7\x4a\x66\xb9\x81\x58\x72\x1a\x7b\x0b\x23\x0e\x08\x6d\xb6\x00\xb3\x01\x9e\x77\x16\x2c\x60\xda\xaf\x61\x2f\x49\x6f\x92\xb6\x2d\x53\xbd\x04\x1d\x24\xdc\xdf\x57\x6b\x02\x2d\x61\x54\x6b\xba\xec\x3a\x6b\xa8\x07\xf9\xd5\x85\xaf\xc5\x46\x00\xb6\x7d\xaa\x2a\xca\x21\x20\xfb\x74\x21\xaa\x3d\x40\x02\x83\x41\xee\x61\x66\x18\xc9\x1f\x71\x60\x38\xf6\xfd\x64\x44\x08\x14\x25\x1c\xd4\x24\x7f\x27\x70\xf2\x17\x77\x07\x4e\x1e\x6f\x3b\xf6\x31\xf8\xfc\x9e\xeb\x38\x39\xd8\x93\x74\xb0\x1a\x54\xd2\xdf\x68\x20\x0e\x45\x5f\x72\x5a\x21\xa8\xd5\xe0\xf6\x52\x09\xa9\xd5\x5e\x40\xca\xcc\xa6\x58\x1d\x26\x32\x5b\x5e\xa0\xb9\x33\x0a\x49\xb6\x2c\x53\x4f\xc4\x2d\x72\x49\xa8\x95\x61\xb1\xad\x37\xc8\x39\xe4\x44\x19\x90\xeb\x5f\x96\x5a\xa7\x03\x96\x84\x43\x14\x55\xb2\x6c\x14\xe1\x19\xb4\x2c\x54\x82\x93\xc1\xa9\x7b\xce\x99\x42\x44\xfa\x9e\x78\x75\x32\xa6\x19\xe4\xee\x6d\x2f\x8f\x7a\xb4\x7e\x86\x76\xe3\xca\x98\x24\x5c\x47\x06\x63\xd9\x4f\xf4\x6b\xbf\x96\xfc\x47\x16\xa0\x37\xb2\xe0\x14\x74\x8e\x09\x5b\xef\x80\xb4\xc3\x96\xd9\x10\xd3\xec\xae\x10\x70\x8b\x49\x61\x90\x8e\x2a\x4a\x60\x32\x0c\x57\x94\x3f\x0d\x35\x1b\x4f\x7f\x8a\xd8\x6b\x18\x7f\x3d\x3a\x6e\x0e\x2b\x8c\xec\x86\xd0\x28\x92\x22\x2a\x89\x62\x64\xc5\x11\x6e\xbe\x9e\x35\x06\x6a\x43\x4c\xa1\x21\x8a\x98\x8e\x6a\xf7\x47\xba\x58\x69\xc3\x4c\x61\x85\xbd\x74\x3f\xa9\x2f\x28\x6b\x26\x28\x10\x01\x56\x5b\xd4\x00\xcd\xf5\x35\xde\x4b\xf2\x6e\x2b\x56\x52\x1a\x37\xa4\xb9\xfd\xa7\x0d\xe3\x08\x06\xb5\x45\xcd\x80\xc8\xba\xa5\x6b\x79\x6c\x5d\x91\x45\x6b\x98\x0e\x49\xbd\xa1\xaa\xdf\x23\xad\x7a\x81\x4f\x9d\xcb\x62\x37\x23\xce\x13\x62\xbe\x2f\x65\xd1\x13\xc3\xd6\xb0\xc2\x94\x09\x77\xb9\x73\x47\xfa\x6f\x57\x48\xdf\x82\x54\xf5\x09\x02\xaa\x5e\x9d\x78\x40\x7b\xdb\xf6\x66\xff\xd7\x0b\xf0\x58\x44\x7f\x30\x18\xf0\x7b\x61\x19\x6e\xbf\x06\xb3\x61\x1a\xb4\x51\x2c\xd7\xae\x78\x71\xa2\x0d\xe4\xc4\x6c\x6c\xa6\xe5\x52\xa0\x30\xb0\x56\x32\x73\x9b\x76\xfd\xb0\x3f\x5b\x0f\xe2\x31\xaf\xaf\xa3\x83\xe5\x67\xd0\x48\x61\xa6\x9f\x97\xf7\xdf\x96\x0f\x7f\x1d\x3c\x3f\xcf\x16\x7d\x64\x8e\x01\x39\x99\x58\x0b\x38\x5a\x68\x26\xd6\x01\x51\x84\xdb\x84\x17\x9a\x95\x81\x3d\x01\x53\xe7\xdf\x79\x5c\xf5\x3c\x51\x64\x2b\x54\xb1\x5c\xc7\x49\x46\x63\xa2\x52\x1d\x3f\xc9\x58\xe6\x46\x2f\xe0\x04\x8e\xa6\x10\x6d\x49\xe7\x52\x00\x88\x28\x4c\x4f\x9b\x6f\x52\x57\x1c\x96\x84\xc6\x99\xe9\x7e\xb4\x77\x17\xab\x4a\xfb\xfb\x0d\x11\x29\x3a\x47\x5b\x55\xb6\x18\x53\xa6\x30\x31\x52\xed\xc0\xc8\xaa\xb7\xa8\xc4\x5b\x94\x6b\xb7\x58\x8f\x56\xfb\xb6\xaf\x2b\x65\x95\x7d\x67\xdd\xb7\xd5\x9a\x14\x4a\x59\x74\xfc\x39\x07\x51\xd4\x46\xc9\x1d\x34\xe1\xb9\xc5\x4c\x96\xa8\x41\x0a\xb4\xf9\x94\x15\xdc\xb0\x9c\x7b\x07\x07\xdb\x19\x08\xe7\xd6\x3e\xa6\x20\x91\xc2\xa0\x30\x7a\x4f\xe6\xa0\xd0\x85\x42\x68\xcd\x39\x85\x27\x45\xf2\x1c\x15\xac\xa5\x02\x8a\x79\xd5\x94\x98\xd0\x86\x70\x5e\xa5\x13\xc5\x1c\x05\x45\x91\x30\xd4\xc0\x84\x5b\x0b\x0e\xc8\x42\x1b\x24\xd4\x0d\x0c\x28\xa8\x54\xfb\xb2\xd9\xb6\x1d\xe8\x6c\x3e\xdf\xe6\x52\x57\xf1\xd3\x89\x62\xb9\x19\x35\xd2\x92\xf0\x08\x69\x63\x6b\x13\x64\x37\x87\xec\xc9\x26\xef\x45\xa6\xb6\xc9\xf5\x6e\xaf\xb9\x57\x14\x7c\x07\x73\x59\x18\xcd\x28\x06\x61\xbe\xd8\x93\x3d\x6e\x4e\xf0\x7c\xf4\xc1\x7e\x93\x95\x2c\x0c\x10\xb1\x6b\x8c\xda\x93\x32\xf7\xd4\xe6\x29\x7b\xaf\xd0\x15\x1c\x41\x01\x85\xeb\xbc\x64\x80\x67\xce\xc4\x23\x30\xd3\x54\x80\x26\x22\x6d\x15\xd8\x93\x61\x4e\x8d\x67\xd8\x95\xfd\xfe\x41\x9e\x37\x36\xb9\x26\xb2\x7f\x83\xb4\xe9\x1b\xa4\x8d\x4b\x6e\xdc\x32\xed\x46\xd5\xd6\x8e\x7d\x65\xb8\x46\x53\xe4\x7e\xb6\xb8\x88\x68\xef\xe8\x4c\xc0\x4e\x16\x6a\xaf\xf9\x50\xcf\x57\xad\xd6\xbb\x8d\x7c\x02\x26\xd6\xb2\x06\xa1\x53\xd8\x44\x61\xdf\x35\xb6\x10\x75\xbd\xaa\x95\x7f\x69\xbf\x09\xd4\xed\xa9\xeb\xff\x7f\xa8\xd1\x14\xa2\x03\x5f\x65\x83\xfd\xd6\x61\xb8\x77\xd6\x78\xd5\xd3\xcc\xb4\x03\x30\x52\x30\x72\x5f\x56\x55\xf7\xd0\xce\xaa\xfa\xbb\x5f\xc2\x57\x4c\x10\xb5\x73\x89\xaa\xdc\x2d\xd0\xa6\x6a\xb8\x78\xfa\xd3\xb7\x33\xc3\x5e\x76\x35\x13\x69\x5c\x97\x98\x76\x1a\x4e\x32\x6a\xef\x49\x6e\x91\x33\x81\x10\xc9\x3c\x59\x04\x1e\x3d\x93\x8c\x2e\x20\x4a\x0d\x1c\x79\x97\x01\x47\xd1\xbc\xfe\xc3\x89\xa3\xba\x3f\x7e\xf0\x28\xba\xa9\x10\xfe\x11\x7c\x12\x9a\x80\x7f\x4f\x0a\x5c\x1d\x52\x34\x71\xef\x59\xd8\x4d\xf9\xa1\x07\x36\x88\x32\xb2\xa5\x98\x9b\x0d\xfc\x13\xa2\x8c\x89\xf6\xff\x66\x97\x23\xd0\x7a\x36\xd4\x27\x21\xe6\x93\x13\x78\x86\x54\x61\x0e\x51\x09\xb3\x6f\xa9\x94\x29\xc7\xc3\x54\x72\x22\xd2\x43\xa9\xd2\xe5\xec\xa7\x95\x1f\x7b\xca\x8f\x7f\x51\x79\x58\xb3\x73\x4b\x00\x6a\x2f\x44\xb7\x9d\x36\x2b\x78\x4d\xe7\xee\xad\x5f\x9b\x70\x1b\x7b\x49\x48\x3d\x13\xfd\x96\x8c\x36\xe7\x2b\x29\xb3\xf9\x28\xa4\x8b\xd9\xe4\xff\x01\x00\x00\xff\xff\xca\x23\x79\xb4\xc5\x1a\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 6853, mode: os.FileMode(420), modTime: time.Unix(1500223778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x29\xe0\x08\xde\x63\x02\x03\x4d\x90\x20\x0d\x90\xc6\x46\x92\x6e\x18\x82\x4e\xa0\xa5\xb3\x44\x44\x12\x05\x92\x52\xb2\x35\xfd\xdf\x07\x52\x16\xf5\x8b\x96\xd3\xad\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xbe\x23\xdf\xbf\xf3\x37\x34\xf7\x45\xe2\x38\x55\x3c\x3b\x82\xef\x0e\x00\x40\x48\x04\x82\xeb\x2d\x5c\xa0\xb9\x5e\x50\x1f\xcd\xa9\x3c\x32\xff\xd4\x17\x04\x55\x1c\xa8\x65\x70\xbd\xef\x9f\x4e\x7e\xfb\xe1\xf6\xcc\xa7\xa7\xe6\x2f\x09\x25\xad\x88\x44\x4b\x7c\x63\x3a\x88\x11\xe1\x04\x4a\x6b\x3c\x88\x13\x46\x05\x09\x9f\x48\x8c\xc2\x82\xd3\x1a\x0f\xe2\xc4\x29\xdb\x90\xf4\xf2\x05\x43\x0b\x4e\x6b\x3c\x88\x53\x16\x31\x27\x91\x2d\xa9\x9d\xe5\x20\xc2\xc7\x7e\x6c\xc8\xb2\x8c\xe4\x11\x54\x31\x78\x9f\xb4\x05\x05\x09\x1d\xe7\x87\xe3\x98\x8e\x99\x56\x57\xb1\x69\x4e\xe3\x5d\xc5\x90\xd2\xfc\xc9\xf8\xb7\x35\x31\x51\x74\x0b\x8f\x30\xff\x07\x5c\xef\xf7\xeb\xbb\x87\xaf\x67\x37\x57\x2b\x17\xbe\x9d\x82\x4c\xb0\x25\x0c\x86\x09\x83\x4b\xce\x19\x3f\x81\x5b\x06\x15\xe5\xb2\x24\x69\xcc\xe0\x99\xf1\x27\x51\x90\x10\x81\x8a\x7a\x77\x04\x22\x55\x30\x64\x2c\xc3\x5c\x1a\x88\x2a\x86\x04\xd3\xa2\xd3\x33\x63\xe2\x28\x4b\x9e\xc3\x42\x2f\x6c\x69\xcd\xdb\x08\xda\x03\x05\xeb\xb3\x87\xcf\xbe\xe0\xa1\xaf\x32\x71\x7a\x64\x1b\x24\x92\x4f\x27\x52\xc5\x1d\xf2\x35\xfb\xd5\x85\x7d\x29\x18\x97\x60\x62\x97\xde\xe2\x27\xea\x33\x0a\x9e\x6d\x88\xc0\x9c\x64\x08\xde\xfa\x8f\x8b\xa3\xfe\x56\xaa\x9a\x67\xf5\x21\x68\x1e\x77\x12\xb5\x1f\x45\xa7\xbf\xf4\x3e\xaf\xbe\x5c\xfa\xc7\xa6\xf6\xfe\x9e\xb0\xa0\x8d\x5b\xdd\x5c\xac\xef\x17\x4b\x6f\x7d\xbf\xd8\xef\x71\xb5\xaa\xe1\xeb\xdf\x09\x24\xed\xa5\x7d\x06\xf5\xbe\x5a\x9d\x5f\xdf\xee\x2d\xca\x70\xb7\xf3\xeb\xdb\x65\x1d\x52\xef\x95\x0a\x7c\x53\x88\xed\xd4\x6a\xe2\x99\xd2\x76\x8f\xde\x24\xd5\xaf\xe1\x89\x25\xc9\x1d\xfa\x80\x6b\x0d\xee\xce\x49\x83\xed\x12\x3d\xd1\x35\x70\xf7\x91\x23\xb8\xb8\xbe\x3f\x3b\xbf\xb9\x0c\xd6\x77\xab\x2f\xeb\x87\xbd\x65\x51\x8d\x71\x67\x6d\xdc\x11\xa8\x36\xb9\x3d\xa2\x64\x4f\x11\xe5\x30\x2f\xec\x52\xe8\x7b\xd4\x15\x6d\x84\xde\x92\xfc\x7f\x09\xfd\x3f\x29\x7c\x20\x30\x9b\xc2\x5b\x19\x5c\x34\xce\x13\x42\xd0\x1c\x1e\xd1\xda\xd2\x44\x0b\x6f\x6c\xa4\xb0\x31\x69\xd4\xed\xe1\x86\x86\xf7\x65\x2e\xb0\x23\xce\xb1\xde\x2c\xba\xb1\x31\xda\x2a\xc3\x81\xe8\x4d\x3f\x49\x29\xd9\x78\xe4\x35\xa5\x63\x79\xc0\x19\x93\x4b\x35\x6a\xb4\xe1\x39\xa1\x29\xc2\x23\xb8\xde\xc0\xc5\x85\x77\x4b\x70\x75\xdf\x23\xd6\xbe\x07\x34\x35\xb6\x63\xf7\xce\xb8\x19\x73\x45\x7d\x39\x3e\x07\xc6\x25\x50\xf3\x6e\xe9\xcd\x42\x22\xa7\xa1\xfa\x97\x9c\xde\xdd\x75\x61\xd9\xa7\xe6\x9c\x81\xeb\x8d\xf1\xeb\x0c\xa6\x38\xdc\xe1\x63\x7b\x1f\x8e\x81\x7a\xfe\xbb\x5b\xa7\xcf\x57\xc7\x62\x7d\x0f\x32\xa1\x02\x84\xe4\xb4\x10\x5a\x05\x29\x11\x12\x0a\x22\x13\x75\x5b\x17\x2c\xc7\x5c\xc2\x96\xb3\x4c\x1b\xd5\xfa\xf1\xf0\xed\xd4\xf6\x6b\xa6\x35\x30\x2c\x15\xbc\x82\xc0\x08\x3e\x88\x57\xff\xf1\x2f\xff\xdb\x47\xef\xf5\xf5\x43\x5d\xb2\x88\xe5\x68\x38\xb1\x7b\x53\x18\x36\xb0\x34\x6a\x53\xec\x4c\xb4\xb7\xdf\x8e\x83\xd1\x31\x56\xeb\xd7\x22\xaa\x95\x6a\xf6\xd1\xb6\x98\x41\x8c\x12\xe6\x25\xc4\x54\x26\xe5\xe6\x38\x64\x99\x7f\x85\xf2\x5e\x72\x24\x99\x5f\xc5\x1d\x88\x3b\x4c\x19\x89\x14\x86\xaa\x8f\x48\x30\x4d\xa1\x20\x5c\x02\xdb\xfe\x34\xaa\x39\x33\xd7\xa0\xc3\x7b\xa9\x57\x10\x17\xe6\xa4\x9f\xbd\xe6\xd1\xc0\xc7\x3a\x0f\xef\x7a\x33\xaa\x17\xe1\x58\xc9\x36\x76\xd9\x52\xd3\xb6\xf6\x3d\x69\x19\xcd\x8b\xe9\x91\xfc\x27\x2b\x41\x24\xac\x4c\x23\x10\x05\x86\x74\xfb\x37\x10\xf3\x48\x94\x09\x91\x8d\x75\x83\x80\x2f\x18\x96\x12\xa3\xd1\x7c\x6e\x0f\x30\x3d\x9f\xf7\xf2\xe9\x17\x11\xaa\x22\xa9\x7a\xa7\xfe\xfa\xa6\xbd\xa9\x17\xb6\xc1\xea\xfc\x1b\x00\x00\xff\xff\x6d\xe6\x70\xd7\x44\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3396, mode: os.FileMode(420), modTime: time.Unix(1496824195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x85\x1e\x7a\x2d\x14\x4a\x09\x63\x69\x6c\x8b\x28\x92\xd0\x8c\x9c\xcd\x2e\xfb\xee\xc5\x4a\x9c\x44\x6e\xa0\xb7\xf0\x69\xf4\xcf\x8c\xfe\x3f\x7e\xf8\xf0\xd4\x5a\xff\xf4\xca\x43\xd3\x6c\xb7\x63\xbf\x4d\xe4\x02\x9a\xd5\x1a\xde\x1a\x00\x00\x1a\xd1\x81\x7a\x5c\x8d\xfd\xe9\xe7\x66\xc3\x03\x39\x07\xaf\x3c\xac\x55\xf3\xde\x34\x7a\x88\x07\xb3\xed\xb2\xd7\x62\x83\xe7\x4f\xab\xc7\xb7\x05\xfa\xfd\xf9\xcf\x3b\xa8\x22\x8e\x59\xc2\x16\xb5\xd8\x11\x85\xd4\xfa\xdc\x52\x87\x7d\x74\x54\x6a\x2f\x7d\x27\x86\xc6\xc0\x5c\x5c\x41\x6d\x22\xea\x1d\xf6\xc4\x15\x36\x74\xb7\xda\x10\x4b\x0a\xc7\x8a\x91\xe7\x9c\xea\xb2\x69\xbd\x0a\xf4\x2e\xb4\xe8\x9e\x5f\x48\x57\x78\x20\x17\x2b\x60\xbd\x95\x0a\x38\xeb\x77\x0b\xc0\x75\x05\x93\xe4\x5a\x84\x05\x25\xd7\xeb\x64\x6f\x3d\x0b\x3a\xb7\xa0\xff\xc8\xe7\xd8\x27\x34\xa7\x6d\x1e\x2e\x74\xf3\x0b\xd4\x97\xf3\x7b\x00\x02\x47\xd2\xb6\xb3\x1a\x46\x9b\x24\xa3\xeb\x03\x1c\x42\xda\x71\x44\x4d\xaa\x7e\xe6\x5a\xe3\xdb\xe5\x55\x41\x06\x02\x9d\x53\x22\x2f\xf7\x65\x16\x0e\x2c\x86\x81\x43\xc2\x18\x29\x41\x17\x12\x18\x8a\x20\x03\x0a\x9c\x97\xe4\xa2\x6e\x28\x92\x37\xe4\xb5\x25\x06\xeb\x0b\xbb\xd3\xa9\x5c\x22\x34\x10\x3a\x18\xc9\x9b\x90\xd4\xad\xa5\x75\xdf\xe7\x97\x18\xf8\x34\x3c\xeb\x64\xa3\x9c\xfa\xf2\x10\xb2\x33\xd0\x52\x71\x7e\x43\x66\xee\x37\x6f\x58\x82\xae\xae\xb9\xa8\x55\xbf\x93\x8b\x80\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xd7\x78\xd4\xe5\x5f\x13\x15\x1f\xfc\x94\x3d\x6c\xdd\x64\xc9\x75\x9d\x09\x4f\xb6\x82\x15\x90\x50\x4d\x61\x6c\x22\x2d\x21\x1d\xd5\x35\x68\xb5\xf4\x8f\xe9\xe2\x7f\xac\x99\x55\x65\xb0\x7c\x2b\x79\xc9\x52\x2d\xf9\xb3\x84\x8c\xef\x0f\x02\x5d\x0a\xfb\x72\x74\xe3\x87\x7c\xe4\x22\x46\x06\x24\xa8\x39\xa5\xe5\x03\x11\xf6\xd1\x50\x07\xcb\xbf\x3a\x8c\x7d\xf3\x37\x00\x00\xff\xff\x27\x7d\x68\x13\x7e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1496592103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

