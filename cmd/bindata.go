// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x4d\xf3\xa1\x3d\x94\x3e\x40\xc9\xa1\x2c\x63\x0c\x96\xc5\x84\xae\x3d\x8c\x21\xdc\xce\x49\x0c\x4e\x1c\x1c\xc7\x97\xb1\x77\x1f\x4e\x06\x63\x10\x5f\x2c\x21\xfd\x9f\xbe\xfb\xbb\xfd\xd5\xf4\xfb\xab\x1a\x5b\x00\xe6\xd8\xb0\xd7\xd6\xa9\xcf\xcd\x16\xbf\x00\x11\x51\x47\x65\x91\xc4\x26\x36\x4b\xb9\xdb\x8d\xad\xb6\x16\x53\x62\x4b\xf0\x0d\xc0\xb2\x7a\x3c\xf3\xf9\xb9\x3a\xbd\x1d\x5f\x9e\x4a\x96\x97\x3c\x23\xfa\xa5\x0d\xde\x75\x43\xe0\x9b\xeb\x3a\xd5\xff\x51\x4d\x8d\xef\x48\x42\x5e\x72\xc2\x0c\x49\xac\x30\x08\x3f\x0e\x18\x5a\xdd\xcf\x81\xf4\xbc\x0e\x93\x5f\xda\xda\xcc\xdf\xea\xe9\x99\x0a\xcb\x3c\x29\xa8\x29\x38\x56\xb7\x60\xa2\x0a\x3a\x09\xcb\xaa\x2c\xe4\x89\x1f\xca\xa2\x38\xbe\xe6\x19\xad\x88\xe2\x01\xc5\xff\x35\x82\x9f\x00\x00\x00\xff\xff\x5f\xbd\x85\xe3\x2b\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 299, mode: os.FileMode(420), modTime: time.Unix(1496825964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6d\x6f\xdb\x38\x12\xfe\xee\x5f\x31\x75\x03\xc4\x5e\x40\xf1\xb5\xf7\x6d\x17\x39\x20\xdd\x04\x69\x80\x6c\x13\xa4\xed\x2d\x0e\x41\x4e\xa0\xc9\x91\x4c\x84\x22\x75\x24\xe5\x38\x87\xfc\xf8\x03\x49\xbd\x50\x32\xd3\xdd\x45\xdd\x33\x50\xa4\x22\x67\x38\xcf\xbc\x0f\xf9\xf6\xcd\x6a\xcd\xe5\xaa\xe0\x66\xb3\x9a\xcd\x8a\x46\x52\xcb\x95\x84\x6d\x39\x03\x00\xe0\x05\x48\x65\x81\xaa\x46\x5a\x38\x22\xba\xdc\xc2\x3f\x60\xc5\x70\xbb\x92\x8d\x10\x9e\xc4\xfd\xa8\xaa\x2a\x22\x59\xc7\xe5\x7e\x1a\x6d\xa3\xa5\xff\x44\xc9\xfc\xdf\xb7\x80\x74\xa3\xc2\x31\xf7\xef\x1e\xfc\x9a\x79\xe2\x96\x6e\xc6\x6b\xfe\x44\x62\x10\xb8\xe4\xb6\x5f\x71\xbf\x7c\x5b\xe6\x6e\xb1\xa3\x3f\x39\xc9\xa6\x3c\x84\x5a\xbe\x25\x16\xf7\xf8\xba\x8d\x6f\xf0\x32\x7c\x95\x3b\xb1\xe5\x59\x28\xab\x09\x7d\x24\x25\x9a\x3d\x96\xc4\x96\x67\x29\x85\x5a\x13\x71\xb1\x43\xba\xc7\x32\x6c\x7d\x03\x65\x53\x97\x9a\xb0\x7d\x88\xd3\x75\x4f\x7c\xfc\xd3\xf1\x88\x70\xf0\x54\x90\xd0\x3b\xc8\xfd\x8b\xfc\xdf\x59\x7a\x96\x36\x9f\x5f\xde\x96\x20\xb8\x7c\x0c\xac\x23\xce\x89\xea\xbc\x80\x7b\xc8\xfe\x0b\xf3\xa3\x7f\x5e\xdd\x7d\xf9\x7a\x76\x7d\x79\x33\x87\x41\x2b\x1f\x15\x17\x5a\x2b\xfd\x33\x7c\x52\xb0\xe5\xda\x36\x44\x94\x0a\x9e\x94\x7e\x34\x35\xa1\x08\xdc\x04\xc7\x22\x10\x0b\x76\x83\x50\xa9\x0a\xe5\x10\x1c\xdb\x12\x36\x28\xea\x94\x3b\x42\x20\xc2\xbb\x51\x28\x52\x06\x03\x96\xfc\xf6\xec\xcb\xc7\x95\xd1\x74\x95\x50\x65\xe4\xf6\xa0\x88\x7c\x4d\x91\x44\xa0\xf8\x03\x7b\xd6\x45\x94\x48\x4b\xc8\x84\x85\xf7\x11\xbb\x41\x0b\xde\xeb\xef\x1f\x60\xb1\x26\x06\x25\xa9\x10\x8e\x6e\x7f\x3f\x5f\x8e\xcf\x72\x84\x59\xb9\x83\x1e\x44\x1b\x2d\xef\xc3\x59\xde\x9e\x67\x01\x05\x97\x65\xa4\x69\x9a\xdb\xeb\x0f\x47\x1f\x6f\x7e\xbb\x58\x9d\xf4\xd6\x5f\x45\x6c\x23\xbe\x7c\x60\xbc\xb9\x3e\xbf\xbc\x09\xdc\xe1\xef\xc4\x4a\x97\x37\x1f\xae\x3e\xcd\x27\x2a\xa6\xce\xf8\x70\xf5\x09\x02\x75\xd0\x40\x18\xfc\x73\x3c\x29\x30\xae\xa0\xa5\x0d\x36\xa6\x0e\xc0\x3d\xec\x11\x55\xa7\xd2\xd8\x40\x3f\xc7\x2a\x0e\xa4\x1e\xc5\x24\x94\x9c\x7c\x4f\x56\x3d\x32\xae\x21\xab\xd3\xc1\x36\xa6\x08\xda\x8f\x4e\xef\x2c\xeb\x65\x0c\x38\x13\xe9\x94\x9f\x5f\x7d\x3e\xfb\x70\x7d\x91\xdf\xde\xdd\xfc\x76\xfb\x25\x36\x79\x17\xcd\x06\x32\x0a\xae\xcc\xe7\xb5\x56\x55\x6d\x21\x57\x82\xe5\xd1\xc2\x1e\x07\xa4\x36\xfb\x00\x73\x0e\x5e\x0c\x08\x96\x30\x1f\x57\xa4\xd7\x4e\xef\x52\xb0\x2f\x3a\xa3\x74\x9b\xa4\xcf\xff\xaf\x72\x24\x0a\xfc\x5e\xe5\x18\xb2\xeb\xbc\xa3\x9e\xe4\xd7\xe0\xbe\x3e\x36\x12\x61\x3b\xa6\x0a\x5e\x4e\x05\x72\x4c\x97\xa2\x3a\x40\x48\x60\xd2\xc9\xa3\x98\x99\x7a\xf2\x8f\x38\x30\xed\xfb\x71\x32\x22\x24\x8a\x12\x4e\x6a\x52\xbc\x93\xd0\xfc\xd5\xdd\x89\x91\xf7\xb7\x3d\xfb\x7e\xf0\xc5\x1d\xd4\x73\x0a\x70\x9a\x0c\x61\x35\xa9\xa4\xdf\xd1\x0e\x7c\x14\x7d\xad\x59\x88\xa0\x5e\x82\xdf\x2b\x15\x94\x4e\x7a\x03\x25\xb7\x9b\x66\x7d\x42\x55\xb5\xba\x44\xfb\xd9\x6a\x24\xd5\x6a\x5b\x46\x47\xdc\xa1\x50\x84\xb9\x33\x5c\x6c\x9b\x0d\x0a\x01\x35\xd1\x16\x54\xf1\x97\x4f\x6d\xd3\x01\xb7\x44\x40\x96\x85\xb3\x9c\x17\xe1\x05\x8c\x6a\x34\xc5\xd9\x44\xeb\x91\x71\xe6\x90\x91\xb1\x25\xde\x9c\xee\xd3\x4c\x72\xf7\x6e\x94\x47\x23\xda\x38\x43\x87\xe1\x63\x9f\x24\x5d\x47\x26\x43\xd6\x9f\xe8\xbe\x71\x2d\xf9\x97\x6a\xc0\x6c\x54\x23\x18\x98\x1a\x29\x2f\x9e\x81\xf4\xa3\x93\xdd\x10\xdb\xed\xae\x11\x70\x87\xb4\xb1\xc8\xf6\x2a\x4a\x62\xce\x4b\x57\x94\x1f\x1d\x6a\xce\x9f\xed\x80\x10\xc6\xc9\x43\xba\xf1\xaf\x7b\xc7\x4f\x55\x8d\x55\xc3\x48\x99\x65\x4a\x66\x5b\xa2\x39\x59\x0b\x84\xdb\xdf\xcf\x3b\x80\xc6\x12\xdb\x18\xc8\x32\x6e\xb2\xd6\xfc\x99\x69\xd6\xc6\x72\xdb\xb8\xc3\x5e\xbb\x6d\xb4\xd7\x8d\x82\x4b\x06\x44\x82\x93\x96\x75\x81\xe6\xfb\x9a\x18\x25\xf9\xb0\x95\x6b\xa5\xac\x1f\xb9\xfc\xfe\xd3\x86\x0b\x04\x8b\xc6\x45\xcd\x84\xc8\x99\x65\x68\x79\xbc\x08\x64\x59\x01\xf3\x29\x69\x34\x54\x8d\x7b\xa4\x13\x2f\xf1\x69\x30\x59\xee\x27\xbe\x05\x25\xf6\xdb\xa7\x2c\x47\xc7\xf0\x02\xd6\x58\x72\xe9\xaf\x6a\x5e\xa5\xff\x0c\x85\xf4\x17\x50\xba\xd5\x20\x21\xea\xcd\x69\x14\x68\xbf\xf4\xbd\x39\xfe\x8d\x1c\xbc\x7f\xc4\x78\x30\x98\xf0\x47\x6e\x99\x6e\xbf\x05\xbb\xe1\x06\x8c\xd5\xbc\x36\xbe\x78\x09\x62\x2c\xd4\xc4\x6e\x5c\xa6\xd5\x4a\xa2\xb4\x50\x68\x55\xf9\x4d\xb7\x7e\x32\x9e\x94\x27\xfe\x58\xb4\x97\xcb\xc9\xf2\x0b\x18\x64\x70\x6c\x5e\x56\xf7\xff\x5e\x3d\xfc\x74\xf4\xf2\x72\xbc\x1c\x47\xe6\x7e\x40\xce\x66\x0e\x81\x40\x17\x9a\xd4\x19\x20\xcb\x70\x47\x45\x63\xf8\x36\xb1\x27\x61\xee\xed\xbb\xc8\x43\xcf\x93\x4d\xb5\x46\x9d\xab\x22\xa7\x15\xcb\x89\x2e\x4d\xfe\xa4\x72\x55\x5b\xb3\x84\x53\x78\x37\x87\x6c\x47\x06\x93\x02\x40\xc6\x60\x7e\xd6\x7d\x93\xb6\xe2\x70\x9a\x1a\x67\xe6\x87\x91\x3e\x5c\x93\x82\xf4\x5f\x37\x44\x96\xe8\x0d\xed\x44\xb9\x62\xcc\xb8\x46\x6a\x95\x7e\x06\xab\x42\x6f\xd1\x34\x5a\x54\x85\x5f\x6c\x47\xab\x43\xe3\x1b\x4a\x59\xc0\x77\x3e\x7c\x3b\xa9\xb4\xd1\xda\x45\xc7\x8f\x33\x10\x43\x63\xb5\x7a\x86\xce\x3d\x77\x58\xa9\x2d\x1a\x50\x12\x5d\x3e\x55\x8d\xb0\xbc\x16\x91\xe2\xe0\x3a\x03\x11\xc2\xe1\xe3\x1a\xa8\x92\x16\xa5\x35\x07\x82\x83\xd2\x34\x1a\xa1\x87\x73\x06\x4f\x9a\xd4\x35\x6a\x28\x94\x06\x86\x75\x68\x4a\x5c\x1a\x4b\x84\x08\xe9\xc4\xb0\x46\xc9\x50\x52\x8e\x06\xb8\xf4\x6b\xc9\x01\x59\x1a\x8b\x84\xf9\x81\x01\x25\x53\xfa\x50\x98\x5d\xdb\x81\x01\xf3\xc5\xae\x56\x26\xf8\xcf\x50\xcd\x6b\xbb\xd7\x48\xb7\x44\x64\xc8\x3a\xac\x9d\x93\xfd\x1c\x72\x20\x4c\xd1\xfb\x4a\x8b\xc9\xf7\xee\xa8\xb9\x07\x0a\xf1\x0c\x0b\xd5\x58\xc3\x19\x26\xc3\x7c\x79\x20\x3c\x7e\x4e\x88\x6c\xf4\xd1\x7d\x93\xb5\x6a\x2c\x10\xf9\xdc\x81\x3a\x90\x30\xff\x70\x16\x09\xfb\x55\xa3\x2f\x38\x92\x01\x4a\xdf\x79\xc9\x24\x9e\x05\x97\x8f\xc0\x6d\x57\x01\x3a\x8f\xf4\x55\xe0\x40\xc0\xbc\x98\x08\xd8\xb5\xfb\xfe\x83\x3c\xef\x30\xf9\x26\x72\x78\x40\xc6\x8e\x01\x19\xeb\x93\x1b\x77\xdc\xf8\x51\xb5\xc7\x71\xa8\x0c\x37\x68\x9b\x3a\xce\x16\xef\x11\x13\xa9\xce\x25\x3c\xab\x46\x1f\x34\x1f\xda\xf9\xaa\x97\xfa\x79\xa3\x9e\x80\xcb\x42\xb5\x41\xe8\x05\x76\x5e\x38\x74\x8d\x6d\x64\x5b\xaf\x5a\xe1\x5f\xfb\x6f\x02\x6d\x7b\x1a\xfa\xff\x0f\x6a\x34\x8d\x1c\x82\x2f\x60\x70\xdf\x26\x1d\xee\x03\x9a\xa8\x7a\xda\x63\xe3\x03\x18\x19\x58\x75\x28\x54\xe1\x1e\x3a\xa0\x6a\xbf\xc7\x25\x7c\xcd\x25\xd1\xcf\x3e\x51\xb5\xbf\x05\xba\x54\x4d\x17\xcf\x78\xfa\xf6\x30\xdc\x65\xd7\x70\x59\xe6\x6d\x89\xe9\xa7\x61\x5a\x31\x77\x4f\xf2\x8b\x82\x4b\x84\x4c\xd5\x74\x99\x78\xc2\xa4\x15\x5b\x42\x56\x5a\x78\x17\x5d\x06\x3c\x45\xf7\x96\x0f\xa7\x9e\xea\xfe\xfd\x43\x44\x31\x4c\x85\xf0\xb7\xe4\x93\xd0\x0c\xe2\x7b\x52\xe2\xea\x50\xa2\xcd\x47\x8f\xbc\x7e\xca\x4f\x3d\xb0\x41\x56\x91\x1d\xc3\xda\x6e\xe0\xef\x90\x55\x5c\x76\xff\x7f\x01\x8d\x5b\x78\x01\xda\x58\xc8\xd8\x7c\x35\x87\xac\xc8\xda\xe5\x20\x32\xe1\xc6\x57\x2c\xd7\x4f\x72\xc1\x75\xf3\x85\x7f\x15\x37\x36\xdd\x22\x5e\x3b\xa4\x9d\x37\xbe\xeb\x8c\x3e\x9f\xc2\x29\xc7\x8b\x3d\x73\x2d\x8f\x67\xff\x0b\x00\x00\xff\xff\xe1\x32\xfc\xbd\xef\x19\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 6639, mode: os.FileMode(420), modTime: time.Unix(1496824427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x29\xe0\x08\xde\x63\x02\x03\x4d\x90\x20\x0d\x90\xc6\x46\x92\x6e\x18\x82\x4e\xa0\xa5\xb3\x44\x44\x12\x05\x92\x52\xb2\x35\xfd\xdf\x07\x52\x16\xf5\x8b\x96\xd3\xad\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xbe\x23\xdf\xbf\xf3\x37\x34\xf7\x45\xe2\x38\x55\x3c\x3b\x82\xef\x0e\x00\x40\x48\x04\x82\xeb\x2d\x5c\xa0\xb9\x5e\x50\x1f\xcd\xa9\x3c\x32\xff\xd4\x17\x04\x55\x1c\xa8\x65\x70\xbd\xef\x9f\x4e\x7e\xfb\xe1\xf6\xcc\xa7\xa7\xe6\x2f\x09\x25\xad\x88\x44\x4b\x7c\x63\x3a\x88\x11\xe1\x04\x4a\x6b\x3c\x88\x13\x46\x05\x09\x9f\x48\x8c\xc2\x82\xd3\x1a\x0f\xe2\xc4\x29\xdb\x90\xf4\xf2\x05\x43\x0b\x4e\x6b\x3c\x88\x53\x16\x31\x27\x91\x2d\xa9\x9d\xe5\x20\xc2\xc7\x7e\x6c\xc8\xb2\x8c\xe4\x11\x54\x31\x78\x9f\xb4\x05\x05\x09\x1d\xe7\x87\xe3\x98\x8e\x99\x56\x57\xb1\x69\x4e\xe3\x5d\xc5\x90\xd2\xfc\xc9\xf8\xb7\x35\x31\x51\x74\x0b\x8f\x30\xff\x07\x5c\xef\xf7\xeb\xbb\x87\xaf\x67\x37\x57\x2b\x17\xbe\x9d\x82\x4c\xb0\x25\x0c\x86\x09\x83\x4b\xce\x19\x3f\x81\x5b\x06\x15\xe5\xb2\x24\x69\xcc\xe0\x99\xf1\x27\x51\x90\x10\x81\x8a\x7a\x77\x04\x22\x55\x30\x64\x2c\xc3\x5c\x1a\x88\x2a\x86\x04\xd3\xa2\xd3\x33\x63\xe2\x28\x4b\x9e\xc3\x42\x2f\x6c\x69\xcd\xdb\x08\xda\x03\x05\xeb\xb3\x87\xcf\xbe\xe0\xa1\xaf\x32\x71\x7a\x64\x1b\x24\x92\x4f\x27\x52\xc5\x1d\xf2\x35\xfb\xd5\x85\x7d\x29\x18\x97\x60\x62\x97\xde\xe2\x27\xea\x33\x0a\x9e\x6d\x88\xc0\x9c\x64\x08\xde\xfa\x8f\x8b\xa3\xfe\x56\xaa\x9a\x67\xf5\x21\x68\x1e\x77\x12\xb5\x1f\x45\xa7\xbf\xf4\x3e\xaf\xbe\x5c\xfa\xc7\xa6\xf6\xfe\x9e\xb0\xa0\x8d\x5b\xdd\x5c\xac\xef\x17\x4b\x6f\x7d\xbf\xd8\xef\x71\xb5\xaa\xe1\xeb\xdf\x09\x24\xed\xa5\x7d\x06\xf5\xbe\x5a\x9d\x5f\xdf\xee\x2d\xca\x70\xb7\xf3\xeb\xdb\x65\x1d\x52\xef\x95\x0a\x7c\x53\x88\xed\xd4\x6a\xe2\x99\xd2\x76\x8f\xde\x24\xd5\xaf\xe1\x89\x25\xc9\x1d\xfa\x80\x6b\x0d\xee\xce\x49\x83\xed\x12\x3d\xd1\x35\x70\xf7\x91\x23\xb8\xb8\xbe\x3f\x3b\xbf\xb9\x0c\xd6\x77\xab\x2f\xeb\x87\xbd\x65\x51\x8d\x71\x67\x6d\xdc\x11\xa8\x36\xb9\x3d\xa2\x64\x4f\x11\xe5\x30\x2f\xec\x52\xe8\x7b\xd4\x15\x6d\x84\xde\x92\xfc\x7f\x09\xfd\x3f\x29\x7c\x20\x30\x9b\xc2\x5b\x19\x5c\x34\xce\x13\x42\xd0\x1c\x1e\xd1\xda\xd2\x44\x0b\x6f\x6c\xa4\xb0\x31\x69\xd4\xed\xe1\x86\x86\xf7\x65\x2e\xb0\x23\xce\xb1\xde\x2c\xba\xb1\x31\xda\x2a\xc3\x81\xe8\x4d\x3f\x49\x29\xd9\x78\xe4\x35\xa5\x63\x79\xc0\x19\x93\x4b\x35\x6a\xb4\xe1\x39\xa1\x29\xc2\x23\xb8\xde\xc0\xc5\x85\x77\x4b\x70\x75\xdf\x23\xd6\xbe\x07\x34\x35\xb6\x63\xf7\xce\xb8\x19\x73\x45\x7d\x39\x3e\x07\xc6\x25\x50\xf3\x6e\xe9\xcd\x42\x22\xa7\xa1\xfa\x97\x9c\xde\xdd\x75\x61\xd9\xa7\xe6\x9c\x81\xeb\x8d\xf1\xeb\x0c\xa6\x38\xdc\xe1\x63\x7b\x1f\x8e\x81\x7a\xfe\xbb\x5b\xa7\xcf\x57\xc7\x62\x7d\x0f\x32\xa1\x02\x84\xe4\xb4\x10\x5a\x05\x29\x11\x12\x0a\x22\x13\x75\x5b\x17\x2c\xc7\x5c\xc2\x96\xb3\x4c\x1b\xd5\xfa\xf1\xf0\xed\xd4\xf6\x6b\xa6\x35\x30\x2c\x15\xbc\x82\xc0\x08\x3e\x88\x57\xff\xf1\x2f\xff\xdb\x47\xef\xf5\xf5\x43\x5d\xb2\x88\xe5\x68\x38\xb1\x7b\x53\x18\x36\xb0\x34\x6a\x53\xec\x4c\xb4\xb7\xdf\x8e\x83\xd1\x31\x56\xeb\xd7\x22\xaa\x95\x6a\xf6\xd1\xb6\x98\x41\x8c\x12\xe6\x25\xc4\x54\x26\xe5\xe6\x38\x64\x99\x7f\x85\xf2\x5e\x72\x24\x99\x5f\xc5\x1d\x88\x3b\x4c\x19\x89\x14\x86\xaa\x8f\x48\x30\x4d\xa1\x20\x5c\x02\xdb\xfe\x34\xaa\x39\x33\xd7\xa0\xc3\x7b\xa9\x57\x10\x17\xe6\xa4\x9f\xbd\xe6\xd1\xc0\xc7\x3a\x0f\xef\x7a\x33\xaa\x17\xe1\x58\xc9\x36\x76\xd9\x52\xd3\xb6\xf6\x3d\x69\x19\xcd\x8b\xe9\x91\xfc\x27\x2b\x41\x24\xac\x4c\x23\x10\x05\x86\x74\xfb\x37\x10\xf3\x48\x94\x09\x91\x8d\x75\x83\x80\x2f\x18\x96\x12\xa3\xd1\x7c\x6e\x0f\x30\x3d\x9f\xf7\xf2\xe9\x17\x11\xaa\x22\xa9\x7a\xa7\xfe\xfa\xa6\xbd\xa9\x17\xb6\xc1\xea\xfc\x1b\x00\x00\xff\xff\x6d\xe6\x70\xd7\x44\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3396, mode: os.FileMode(420), modTime: time.Unix(1496824195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x85\x1e\x7a\x2d\x14\x4a\x09\x63\x69\x6c\x8b\x28\x92\xd0\x8c\x9c\xcd\x2e\xfb\xee\xc5\x4a\x9c\x44\x6e\xa0\xb7\xf0\x69\xf4\xcf\x8c\xfe\x3f\x7e\xf8\xf0\xd4\x5a\xff\xf4\xca\x43\xd3\x6c\xb7\x63\xbf\x4d\xe4\x02\x9a\xd5\x1a\xde\x1a\x00\x00\x1a\xd1\x81\x7a\x5c\x8d\xfd\xe9\xe7\x66\xc3\x03\x39\x07\xaf\x3c\xac\x55\xf3\xde\x34\x7a\x88\x07\xb3\xed\xb2\xd7\x62\x83\xe7\x4f\xab\xc7\xb7\x05\xfa\xfd\xf9\xcf\x3b\xa8\x22\x8e\x59\xc2\x16\xb5\xd8\x11\x85\xd4\xfa\xdc\x52\x87\x7d\x74\x54\x6a\x2f\x7d\x27\x86\xc6\xc0\x5c\x5c\x41\x6d\x22\xea\x1d\xf6\xc4\x15\x36\x74\xb7\xda\x10\x4b\x0a\xc7\x8a\x91\xe7\x9c\xea\xb2\x69\xbd\x0a\xf4\x2e\xb4\xe8\x9e\x5f\x48\x57\x78\x20\x17\x2b\x60\xbd\x95\x0a\x38\xeb\x77\x0b\xc0\x75\x05\x93\xe4\x5a\x84\x05\x25\xd7\xeb\x64\x6f\x3d\x0b\x3a\xb7\xa0\xff\xc8\xe7\xd8\x27\x34\xa7\x6d\x1e\x2e\x74\xf3\x0b\xd4\x97\xf3\x7b\x00\x02\x47\xd2\xb6\xb3\x1a\x46\x9b\x24\xa3\xeb\x03\x1c\x42\xda\x71\x44\x4d\xaa\x7e\xe6\x5a\xe3\xdb\xe5\x55\x41\x06\x02\x9d\x53\x22\x2f\xf7\x65\x16\x0e\x2c\x86\x81\x43\xc2\x18\x29\x41\x17\x12\x18\x8a\x20\x03\x0a\x9c\x97\xe4\xa2\x6e\x28\x92\x37\xe4\xb5\x25\x06\xeb\x0b\xbb\xd3\xa9\x5c\x22\x34\x10\x3a\x18\xc9\x9b\x90\xd4\xad\xa5\x75\xdf\xe7\x97\x18\xf8\x34\x3c\xeb\x64\xa3\x9c\xfa\xf2\x10\xb2\x33\xd0\x52\x71\x7e\x43\x66\xee\x37\x6f\x58\x82\xae\xae\xb9\xa8\x55\xbf\x93\x8b\x80\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xd7\x78\xd4\xe5\x5f\x13\x15\x1f\xfc\x94\x3d\x6c\xdd\x64\xc9\x75\x9d\x09\x4f\xb6\x82\x15\x90\x50\x4d\x61\x6c\x22\x2d\x21\x1d\xd5\x35\x68\xb5\xf4\x8f\xe9\xe2\x7f\xac\x99\x55\x65\xb0\x7c\x2b\x79\xc9\x52\x2d\xf9\xb3\x84\x8c\xef\x0f\x02\x5d\x0a\xfb\x72\x74\xe3\x87\x7c\xe4\x22\x46\x06\x24\xa8\x39\xa5\xe5\x03\x11\xf6\xd1\x50\x07\xcb\xbf\x3a\x8c\x7d\xf3\x37\x00\x00\xff\xff\x27\x7d\x68\x13\x7e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1496592103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

