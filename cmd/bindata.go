// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x4f\xe3\x38\x17\xbe\xef\xaf\x38\xd3\x41\xa2\x1d\x29\xf4\x65\x2e\x67\xc4\x2b\xc1\x82\x06\x24\x06\x10\xc3\xec\x5c\x20\x36\x72\x93\x93\xc4\xc2\xb1\xb3\xf6\x49\x0a\x2b\x7e\xfc\xca\x4e\xd3\xc4\xa9\xcb\xdc\x74\x23\x55\x95\x7d\xbe\x1e\x9f\x4f\xfb\xe3\x87\xc5\x92\xcb\x45\xc6\x4d\xb1\x98\x4c\xb2\x5a\x26\xc4\x95\x84\x26\x9f\x00\x00\xf0\x0c\xa4\x22\x48\x54\x2d\x09\x0e\x98\xce\x1b\xf8\x3f\x2c\x52\x6c\x16\xb2\x16\xc2\xb1\xd8\x2f\x51\x65\xc9\x64\xda\x49\xd9\x4f\x23\xd5\x5a\xba\x25\xca\xd4\xfd\x7f\x04\x4c\x0a\xd5\xaa\x79\x3c\x7e\x72\x7b\x66\xc5\x29\x29\xfc\x3d\xa7\x91\x19\x04\x2e\x39\x6d\x76\xec\x17\x37\x79\x6c\x37\x3b\xfe\xa3\xa3\x68\x2c\xc3\x12\xe2\x0d\x23\xdc\x92\xeb\x08\xef\xc8\xa6\xb8\x53\x3a\x40\x72\x22\x87\x9f\x0e\x3d\xde\xde\x13\xad\x9d\x8d\x03\xec\x6f\xe0\xdf\xee\x24\x93\x30\x3c\xb7\xdd\xe4\x20\xb8\x7c\x0e\x89\x7a\x60\x78\x06\x8f\x10\x49\x98\x1e\xfc\x79\x75\xff\xf0\xf3\xf4\xfa\xdb\xed\x14\xfa\xa3\x05\xe0\x3b\x8d\x1b\xd1\xd9\x20\xbc\x73\x88\x04\xc1\xe7\x81\xb8\x41\x02\xe7\xb1\xcf\x4f\x30\x5b\x32\x83\x92\x95\x08\x07\x77\xbf\xce\xe7\xbe\x2e\xcb\x18\xe5\x2f\xb0\x01\xb1\xf6\xf4\xe7\xa7\x30\x39\xbe\x3b\x7d\xb8\x84\x83\xcb\xdb\xef\x17\x8b\xa3\x86\x6b\xaa\x99\xc8\xd5\xa2\x3f\x84\xaf\x36\xee\x05\x6f\xaf\xcf\xbf\xdd\xb6\xd2\xed\xff\xbb\x8c\x67\x57\x37\x96\xef\xec\xea\xe6\x1d\xb6\x56\x9b\xd3\xe5\x71\x75\x76\x7c\xd4\x5f\x42\x76\xd7\x96\x7c\x4e\x5b\x5c\xad\xc6\xf2\x39\xe5\x1a\xa2\x6a\x8b\xc3\xe8\x64\x31\xe2\x68\xd1\x7a\xda\xbb\xe3\x3a\x1b\x3d\xce\x36\xf6\xff\x0c\x63\x1f\x9f\x5f\xfd\x38\x3d\xbb\xbe\x88\xef\xee\x6f\xbf\xdf\x3d\x0c\x53\xa1\xcb\x21\x03\x51\x02\xb6\xe4\xe3\x4a\xab\xb2\x22\x88\x95\x48\xe3\xc1\xc6\x96\x04\x84\x88\x2e\xfc\xb6\xa4\x6d\xf2\xcd\x7a\x04\x73\x98\xfa\x05\xb4\x4b\x7b\xd7\x19\x36\x05\xe2\x25\xf9\x28\x69\x03\x47\x1d\x9e\xcd\x01\xb9\xd0\x5a\xe9\x2f\x70\xa3\x20\x57\xb0\x52\xfa\xd9\x54\x2c\x41\xe0\xa6\xed\x0b\x08\x8c\x80\x0a\x84\x52\x95\x28\x7b\x1c\x4d\x0e\x05\x8a\x6a\xd4\xbc\xe0\xd8\x6b\x5f\x2e\x12\x9b\x30\x07\xb2\xcc\xe7\x6a\x03\x16\xca\xda\x21\x5f\x88\x6b\x0f\xd1\xc5\x60\xbc\xbc\xf0\x8f\x83\xf2\x3b\x09\x0c\x87\xd1\x2f\x7f\xec\xcb\x3b\xb8\x19\xfb\xe7\xc7\x40\x15\xee\xa6\x8e\x9c\xbc\x4d\x76\xe2\xa3\x3c\x72\xdd\xb2\x26\xd5\x37\xd8\x28\x52\x32\x6a\x98\xe6\x6c\x29\x10\xee\x7e\x9d\x77\xae\x36\xc4\xa8\x36\x10\x45\xdc\x44\xeb\x3e\x1e\x99\x7a\x69\x88\x53\x6d\x95\xed\x9a\x6d\xeb\xe1\x96\x71\x99\x02\x93\x60\xad\x45\x6b\x6b\x6d\xe5\x08\xec\x51\x0b\xe8\x49\xb1\x56\x8a\x5c\x2b\x75\xf4\x55\xc1\x05\x02\xa1\xb1\xbd\x78\xc4\xf4\xe1\x04\xa6\x7d\x51\xf1\xac\x65\x8b\x32\x98\x8e\x59\x07\xbd\xd4\xaf\x42\x6b\x5e\xe2\x2a\xde\x90\x63\xd7\xc9\x67\x09\xa3\xf7\xb5\xcc\x3d\x35\x3c\x83\x25\xe6\x5c\xba\x8b\x81\x3b\xd2\xdf\x7d\x7c\xbf\x82\xd2\xeb\x13\x04\x4c\x7d\x38\x19\x34\xbf\xaf\x9b\xc2\x1a\x7e\x4d\x0e\xfd\x24\xdc\x56\xe1\xb7\x9e\x91\xfc\x20\x2c\x63\xf2\x47\xa0\x82\x1b\x30\xa4\x79\x65\x5c\x07\x10\xcc\x10\x54\x8c\x0a\x3b\xb2\x2b\x25\x51\x12\x64\x5a\x95\x8e\x68\xf7\x8f\xfc\x09\x38\x8a\xc7\x6c\x7d\x95\x19\x6d\xbf\x81\xc1\x14\x0e\xcd\xdb\xe2\xf1\xaf\xc5\xd3\xa7\x83\xb7\xb7\xc3\xb9\xdf\xe1\xb6\x13\x72\x32\xb1\x08\x04\xda\xd4\x4c\xac\x03\xa2\x08\x5f\x12\x51\x1b\xde\x04\x68\x12\xa6\xce\xbf\xb3\xb8\x2d\x45\x59\x97\x4b\xd4\xb1\xca\xe2\xa4\x4c\x63\xa6\x73\x13\xaf\x54\xac\x2a\x32\x73\x38\x81\xe3\x29\x44\x2f\xac\x77\x29\x00\x44\x29\x4c\x4f\xbb\x35\x03\x53\x61\xc2\x33\x9e\xc0\xc6\xd1\x7d\xdf\x9c\xee\xc7\x7a\xdf\xc7\x5b\xeb\xe7\xfd\xda\x3a\x3b\xa9\xb5\xb6\xde\xff\x2f\x01\x18\xd2\xea\xb5\xb5\x7e\x8f\xa5\x6a\xd0\x80\x92\x68\x93\xb5\xac\x05\xf1\x4a\xe0\x60\x5a\xd8\xfb\x1b\x13\xc2\x82\xe3\x1a\x12\x25\x09\x25\x99\x3d\x61\x41\x69\x6a\x8d\x6d\x62\xb9\x50\xc0\x4a\xb3\xaa\x42\x0d\x99\xd2\x90\x62\x05\x54\x30\x02\x2e\x0d\x31\x21\xda\x5c\x4d\xb1\x42\x99\xa2\x4c\x38\x1a\xe0\xd2\xed\x05\xbc\xe5\x84\x90\xa5\xa0\x32\x68\x50\xa6\x4a\xef\x0b\x73\xc3\x44\x57\x0c\x16\xf3\xc5\x4b\xa5\x4c\x1b\x3c\x93\x68\x5e\x51\x8b\xd9\x14\xaa\x16\x29\x2c\xd1\x09\x44\x98\x76\x58\xbb\x08\x9b\x02\x85\xd8\x13\x26\x3b\xaf\x87\x98\x2e\xed\x9a\x2d\x55\x4d\xc0\xe4\x6b\x77\x0f\xdf\x93\x31\xf7\xe6\x18\x18\xfb\x43\xa3\xab\x1e\x99\x02\x4a\x37\x46\xd8\x28\x7f\xec\xc5\x1d\x38\x01\x29\xcf\x03\x29\xd7\x98\x90\xd2\xaf\x7b\x02\xe6\xcc\x0c\x80\x5d\xdb\xf5\x6f\x8a\xaa\xc3\xe4\x3a\xe2\xfe\x01\x19\xf2\x01\x19\x72\xc5\x84\x2f\xdc\x10\x97\x79\x8f\x63\x5f\x15\x65\x90\xea\x6a\x98\x9d\x2e\x22\x66\x70\x74\x2e\xe1\x55\xd5\x7a\xaf\xf9\xb7\xbe\x2c\xf4\x66\x7f\x14\x6a\x05\x5c\x66\x6a\x9d\x85\xce\x62\x17\x86\x7d\x77\xb4\x5a\xf6\x91\xb7\xc6\x7f\xba\xb5\x09\xe7\x5a\x3f\xd7\x06\xad\x82\x0e\x8d\xcb\x1e\x4c\x81\xd4\xd4\xbb\x31\x39\x18\x4d\x1e\xd7\x86\xcb\x3c\x5e\x57\xd2\xe6\x06\x93\x94\xa9\x7d\x31\xba\x4d\xc1\x25\x42\xa4\xaa\x64\x1e\x78\x4e\x26\x65\x3a\x87\x28\x27\x38\x1e\xdc\x51\x1d\x47\xf7\xda\x87\x13\xc7\x65\x5f\x96\x4f\x81\x49\x0e\xff\x0b\x3e\x14\x26\x30\xbc\xa1\xbb\x9d\x80\x4f\x77\x1c\x63\x33\x0a\x5b\x3f\x4e\x67\xee\x91\x6d\x68\x1e\x0c\xcc\x2e\x25\xeb\x81\xb2\xad\xe3\xdf\x00\x00\x00\xff\xff\x51\xbe\x65\x14\x4e\x11\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 4430, mode: os.FileMode(420), modTime: time.Unix(1496483755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\x32\x2b\xb8\x7b\x58\xf6\x09\x04\x45\x05\x0f\x5e\x05\x41\xa4\xa9\x49\xaa\xa7\xc3\x66\x92\x90\xaa\xf4\x38\x2e\xfb\xee\x92\xac\x3d\x3d\x69\x66\xf1\xfa\x75\xe5\xab\x4a\xfe\xea\x9b\x37\x0f\x3b\x17\x1e\xfe\xf0\xa4\x94\x99\xd2\xd1\x0e\x63\x09\x46\x5c\x0c\xfc\xfe\xf6\xed\xd3\x06\xfd\xfc\xf0\xeb\x19\xf4\x30\xcc\xfb\x01\x8b\xc4\x01\x8d\xb8\x19\x85\xf4\x9d\x52\x8d\x9a\x78\x48\x9e\x5a\xed\xed\x1d\x3c\x29\x00\x80\xca\xd0\x5a\x58\x8a\x3b\x68\xe9\x15\xcc\x92\xe3\xa9\x63\x14\xb8\xe4\xbe\x8c\x66\xf4\x1d\x98\xc8\xa7\x0e\xb8\xe0\xa4\x03\xde\x85\xc7\x0d\xe0\xbe\x82\x49\x4a\x2f\x61\x41\x29\xdc\xa1\x12\xce\xa2\x9b\x33\xbc\xff\x01\xfa\xe3\xbf\xeb\x00\x02\x27\x32\x6e\x74\x06\x66\x97\xa5\xa0\xdf\x47\x38\xc6\xfc\xc8\x09\x0d\xe9\xfe\x39\x7a\xc7\xe7\xf3\xa3\x80\x4c\x04\xa6\xe4\x4c\x41\xae\x6b\x36\x0f\xb8\x19\x06\x8e\x19\x53\xa2\x0c\x63\xcc\x60\x29\x81\x4c\x28\xe0\x02\x0b\x7a\xcf\xcd\x6e\x29\x51\xb0\x14\x8c\x23\x06\x17\x1a\xbb\xd2\xa9\x1d\x22\xb4\x10\x47\x98\x29\xd8\x98\xf5\x65\x22\x7d\xdf\x2f\xbf\x53\xe4\x97\xe1\xd9\x64\x97\xe4\xa5\x2f\x4f\xb1\x78\x0b\x3b\x6a\xc1\xdd\x93\x5d\xfa\x2d\x37\xe4\x89\xbc\xd7\x6b\xac\xbd\xf5\x2b\xf9\x04\xb8\x8b\x45\x00\xc3\xa9\x7e\x3a\x60\xb0\x7a\x0d\xbd\x2f\xff\x94\xa9\xe5\x10\xea\xea\xe0\xce\xd7\x48\xd6\xeb\x54\x5c\x23\x04\x27\x20\xb1\x9b\xc2\xba\x4c\x46\x62\x3e\xe9\x75\x7d\x7a\xf5\xb7\x7a\xf0\x3f\xd1\x2c\x56\x99\x1c\x5f\x2a\x5f\xd9\x9b\xef\x6d\xa1\xf8\xfa\x20\x30\xe6\x78\x68\x9f\x2e\xf2\x90\x77\xdc\x64\x64\x41\xa2\x5e\x36\x52\x3d\x2b\x55\xbd\x96\x46\xd8\xfe\x92\x30\xef\xd5\xdf\x00\x00\x00\xff\xff\x1f\xab\x2e\x51\xf1\x03\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1009, mode: os.FileMode(420), modTime: time.Unix(1496483765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

