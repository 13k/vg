// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xba\x01\x62\x17\x50\xbc\xf4\xb1\x45\x06\xa4\x4b\xd0\x06\x48\x9b\xa0\x4b\xd7\x87\x20\x13\x68\xea\x24\x13\xa1\x48\x8d\x3c\xc9\xc9\x90\x0f\x3f\x90\xb2\x2c\x51\xa6\xd3\x17\x4f\x80\x61\xf0\xfe\xfe\x78\xff\x48\xbe\x7d\xb3\x58\x0a\xb5\xc8\x85\x5d\x2d\x26\x93\xbc\x56\x9c\x84\x56\xd0\x14\x13\x00\x00\x91\x83\xd2\x04\x5c\xd7\x8a\xe0\x88\x99\xa2\x81\xdf\x61\x91\x61\xb3\x50\xb5\x94\x5e\xc4\x7d\x5c\x97\x25\x53\x59\xa7\xe5\x3e\x83\x54\x1b\xe5\x97\xa8\x32\xff\xff\x16\x90\xaf\x74\x6b\xe6\xfe\xf4\xc1\xd3\xec\x5a\x10\x5f\x85\x34\x6f\x91\x59\x04\xa1\x04\x6d\x29\xee\x4b\x9b\x22\x75\xc4\x4e\xfe\xe4\x24\x19\xeb\x30\x4e\xa2\x61\x84\x3b\x7a\x1d\xe3\x15\xdd\x0c\xf7\x6a\x47\x58\x5e\xe5\xf8\xdd\x71\x20\xdb\x47\xa2\xf5\xb3\x0d\x80\xfb\x0d\xe2\xdb\xed\x64\x12\x87\xe7\xc9\x4d\x01\x52\xa8\xc7\x98\x6a\x00\x46\xe4\x70\x0f\x89\x82\xe9\xd1\x5f\x57\xdf\xef\x7e\x9c\x5f\x7f\xbe\x99\x42\xbf\xb5\x08\x7c\x6f\x71\xab\x3a\x1b\xa4\x77\x0e\x89\x24\x78\x3f\x50\xb7\x48\xe0\x23\xf6\xfe\x01\x66\x4b\x66\x51\xb1\x12\xe1\xe8\xf6\xe7\xc5\x3c\xb4\xe5\x04\x93\xe2\x09\xb6\x20\x36\x91\x7e\xff\x10\x67\xa7\xb7\xe7\x77\x5f\xe0\xe8\xcb\xcd\xd7\xcb\xc5\x49\x23\x0c\xd5\x4c\x16\x7a\xd1\x6f\x22\x34\x9b\xf6\x8a\x37\xd7\x17\x9f\x6f\x5a\xed\xf6\xff\x55\xc1\x4f\x57\xdf\x9c\xdc\xa7\xab\x6f\xaf\x88\xb5\xd6\xbc\xad\x40\xaa\xf3\x13\xa2\xfe\x10\xf3\xbb\xf1\x14\x4a\xba\xe6\x6a\x2d\x96\x8f\x99\x30\x90\x54\x3b\x12\xd6\xf0\xc5\x48\xa2\x45\x1b\x58\xef\xb6\xeb\x7d\xf4\x38\xdb\xdc\xff\x3b\xcc\x7d\x7a\x71\xf5\xe7\xf9\xa7\xeb\xcb\xf4\xf6\xfb\xcd\xd7\xdb\xbb\x61\x29\x74\x35\x64\x21\xe1\xe0\x5a\x3e\xad\x8c\x2e\x2b\x82\x54\xcb\x2c\x1d\x10\x76\x34\x20\xc6\xf4\xe9\x77\x2d\xed\x8a\x6f\xd6\x23\x98\xc3\x34\x6c\xa0\x7d\xd6\xbb\xc9\xb0\x6d\x90\xa0\xc8\x47\x45\x1b\xd9\xea\x70\x6f\x1e\xc8\xa5\x31\xda\x7c\x80\x6f\x1a\x0a\x0d\x6b\x6d\x1e\x6d\xc5\x38\x82\xb0\xed\x5c\x40\x60\x04\xb4\x42\x28\x75\x89\xaa\xc7\xd1\x14\xb0\x42\x59\x8d\x86\x17\x9c\x06\xe3\xcb\x67\x62\x9b\xe6\x48\x95\x85\x52\x6d\xc2\x62\x55\x3b\x94\x8b\x49\x1d\x20\xbb\x18\xcd\x57\x90\xfe\x71\x52\x7e\xa5\x81\xf1\x34\x86\xed\x8f\x7d\x7b\x47\x89\x69\xb8\x7f\x8c\x74\xe1\x7e\xee\x28\xc8\xbb\x6c\xaf\x3e\xaa\x23\x3f\x2d\x6b\xd2\xfd\x80\x4d\x12\xad\x92\x86\x19\xc1\x96\x12\xe1\xf6\xe7\x45\x17\x6a\x4b\x8c\x6a\x0b\x49\x22\x6c\xb2\x99\xe3\x89\xad\x97\x96\x04\xd5\xce\xd8\xbe\xb3\x6d\x73\xb8\xe5\x42\x65\xc0\x14\x38\x6f\xc9\xc6\x5b\xdb\x39\x12\x7b\xd4\x12\x7a\x56\x6a\xb4\x26\x3f\x4a\x3d\x7f\xbd\x12\x12\x81\xd0\xba\x59\x3c\x12\x7a\x73\x06\xd3\xbe\xa9\x44\xde\x8a\x25\x39\x4c\xc7\xa2\x83\x59\x1a\x76\xa1\x73\xaf\x70\x9d\x6e\xd9\xa9\x9f\xe4\x33\xce\xe8\x75\x2b\xf3\xc0\x8c\xc8\x61\x89\x85\x50\xfe\x62\xe0\xb7\xf4\x4f\x9f\xdf\x8f\xa0\xcd\x66\x07\x11\x57\x6f\xce\x06\xc3\xef\xe3\xb6\xb1\x86\x5f\x53\x40\x7f\x12\xee\x9a\x08\x47\xcf\x48\x7f\x90\x96\x31\xfb\x2d\xd0\x4a\x58\xb0\x64\x44\x65\xfd\x04\x90\xcc\x12\x54\x8c\x56\xee\xc8\xae\xb4\x42\x45\x90\x1b\x5d\x7a\xa6\xa3\x9f\x84\x27\xe0\x28\x1f\xb3\xcd\x55\x66\x44\x7e\x01\x8b\x19\x1c\xdb\x97\xc5\xfd\xdf\x8b\x87\x77\x47\x2f\x2f\xc7\xf3\x70\xc2\xed\x16\xe4\x64\xe2\x10\x48\x74\xa5\xc9\x5d\x00\x92\x04\x9f\xb8\xac\xad\x68\x22\x3c\x05\x53\x1f\xdf\x59\xda\xb6\xa2\xaa\xcb\x25\x9a\x54\xe7\x29\x2f\xb3\x94\x99\xc2\xa6\x6b\x9d\xea\x8a\xec\x1c\xce\xe0\x74\x0a\xc9\x13\xeb\x43\x0a\x00\x49\x06\xd3\xf3\x6e\xcd\xc0\x56\xc8\x45\x2e\x38\x6c\x03\xdd\xcf\xcd\xe9\x61\xbc\xf7\x73\xbc\xf5\x7e\xd1\xaf\x5d\xb0\x79\x6d\x8c\x8b\xfe\xff\x09\xc0\x92\xd1\xcf\xad\xf7\xef\x58\xea\x06\x2d\x68\x85\xae\x58\xcb\x5a\x92\xa8\x24\x0e\x4e\x0b\x77\x7f\x63\x52\x3a\x70\xc2\x00\xd7\x8a\x50\x91\x3d\x10\x16\x54\xb6\x36\xd8\x16\x96\x4f\x05\xac\x0d\xab\x2a\x34\x90\x6b\x03\x19\x56\x40\x2b\x46\x20\x94\x25\x26\x65\x5b\xab\x19\x56\xa8\x32\x54\x5c\xa0\x05\xa1\x3c\x2d\x12\x2d\xaf\x84\x2c\x03\x9d\x43\x83\x2a\xd3\xe6\x50\x98\x1b\x26\xbb\x66\x70\x98\x2f\x9f\x2a\x6d\xdb\xe4\x59\x6e\x44\x45\x2d\x66\xbb\xd2\xb5\xcc\x60\x89\x5e\x21\xc1\xac\xc3\xda\x65\xd8\xae\x50\xca\x03\x61\x72\xe7\xf5\x10\xd3\x17\xb7\x66\x4b\x5d\x13\x30\xf5\xdc\xdd\xc3\x0f\xe4\xcc\xbf\x39\x06\xce\xfe\x30\xe8\xbb\x47\x65\x80\xca\x1f\x23\x6c\x54\x3f\xee\xe2\x0e\x82\x80\x74\x10\x81\x4c\x18\xe4\xa4\xcd\xf3\x81\x80\x79\x37\x03\x60\xd7\x6e\xfd\x8b\xa6\xea\x30\xf9\x89\x78\x78\x40\x96\x42\x40\x96\x7c\x33\xe1\x93\xb0\x24\x54\xd1\xe3\x38\x54\x47\xd5\xaa\x8f\x82\x73\xf9\xc3\xaf\x6d\x3c\xee\xfd\x8c\x1f\xb4\x0d\x1d\x5b\x1f\x49\xcc\x80\xf4\x81\x50\x59\xa4\xba\x1a\xf6\x8c\xaf\x13\x3b\x48\x88\x50\xf0\xac\x6b\xd3\x75\xc5\xf0\xce\xe2\xdd\x34\x45\x5a\x5b\xa1\x8a\x74\x53\xcb\xdb\x3b\x04\x2f\x33\xf7\x66\xf3\x44\x29\x14\x42\xa2\x2b\x3e\x8f\x3c\xe8\x78\x99\xcd\x21\x29\x08\x4e\x07\xb7\x44\x2f\xd1\xbd\xb7\xe1\xcc\x4b\xb9\xb7\xdd\x43\xe4\x2c\x85\xdf\xa2\x57\xf5\x09\x0c\xef\xc8\x9e\x12\x89\xd9\x9e\x6d\x6c\x0f\xa3\x36\x4e\xd3\x99\x7f\xe6\x5a\x9a\x47\x03\xbf\xcf\xc8\x66\xa4\xef\xda\xf8\x2f\x00\x00\xff\xff\x17\x26\x71\xdd\xd0\x10\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 4304, mode: os.FileMode(420), modTime: time.Unix(1496483063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8a\x14\x31\x10\xc6\xef\x79\x8a\x32\x2b\xb8\x7b\x58\xf6\x09\x04\x45\x05\x0f\x5e\x05\x41\xa4\xc9\x24\xd5\xd3\x61\x33\xa9\x90\xaa\xf4\x38\x2e\xfb\xee\x92\xac\x3d\x3d\x69\x66\xf1\xfa\x4b\xd5\x57\x7f\xbe\xca\xcd\x9b\x87\x9d\x8f\x0f\x7f\x78\x52\xca\x4e\xe9\xe8\x86\xb1\x44\x2b\x9e\x22\xbf\xbf\x7d\xfb\xb4\x41\x3f\x3f\xfc\x7a\x06\x3d\x0c\xf3\x7e\x30\x45\x68\x30\x56\xfc\x6c\x04\xf5\x9d\x52\x8d\x5a\x3a\xa4\x80\x2d\xf6\xf6\x0e\x9e\x14\x00\x40\x65\xc6\x39\x58\x82\x3b\xe8\xf0\x15\xcc\x92\xe9\xd4\x31\x8c\x5c\x72\x1f\x86\xb3\x09\x1d\x98\x30\xa4\x0e\xf8\xe8\xa5\x03\xc1\xc7\xc7\x0d\xe0\x3e\x82\x51\x4a\x2f\x52\xe2\x39\xeb\xe6\x0c\xef\x7f\x80\xfe\xf8\xaf\x77\x30\xc0\x09\xad\x1f\xbd\x85\xd9\x67\x29\x26\xec\x09\x8e\x94\x1f\x39\x19\x8b\xba\x9f\xbd\xd7\xf8\x7c\xde\x00\xc8\x84\x60\x4b\xce\x18\xe5\xba\xcc\x66\x5b\x9b\x66\xe0\x98\x4d\x4a\x98\x61\xa4\x0c\x0e\x13\xc8\x64\x04\x7c\x64\x31\x21\x70\x53\x77\x98\x30\x3a\x8c\xd6\x23\x83\x8f\x8d\x5d\xa9\xd4\x92\xd0\x38\xa0\x11\x66\x8c\x8e\xb2\xbe\x5c\x7f\x5f\xf7\xcb\xef\x44\xfc\xd2\x3c\xdb\xec\x93\xbc\xd4\xe5\x89\x4a\x70\xb0\xc3\xe6\xd2\x3d\xba\xa5\xde\x32\x21\x4f\x18\x82\x5e\x3d\xec\x55\xbf\x62\x48\x60\x76\x54\x04\x4c\x3c\xd5\xa7\x83\x89\x4e\xaf\x0e\xf7\xe1\x9f\x32\x36\x1f\x62\xbd\x13\xb3\x0b\xd5\x92\x75\x9c\x8a\xab\x85\xe0\x05\x84\xba\x2e\x9c\xcf\x68\x85\xf2\x49\xaf\xb7\xd2\x4b\x7f\xab\x89\xff\xb1\x66\x51\x95\xc9\xf3\xa5\xe4\x2b\x77\xf3\xbd\x1d\x14\x5f\x6f\x04\xc6\x4c\x87\xf6\x74\xe1\x87\xbc\xe3\x26\x86\x0e\x84\xf4\x72\x91\xea\x59\xa9\xaa\xeb\x70\x84\xed\xff\x83\x79\xaf\xfe\x06\x00\x00\xff\xff\x30\xe5\x9b\x90\xde\x03\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 990, mode: os.FileMode(420), modTime: time.Unix(1496483140, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

