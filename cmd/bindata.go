// Code generated by go-bindata.
// sources:
// data/fish
// data/sh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x38\x01\x62\x17\x60\x84\xe6\xb1\x45\x07\x24\x73\xd0\x04\x48\x63\xa3\x4b\xd7\x87\x20\x13\x68\xe9\x24\x11\xa1\x49\x8d\xa4\xe4\x76\xc8\x87\x1f\x48\x59\xa6\x28\x33\xee\x1e\x26\xc0\x30\x78\xff\xef\x7e\x77\x47\x9e\x9e\x24\x6b\x26\x92\x82\xe9\x2a\x99\x4c\x8a\x46\x64\x86\x49\x01\x6d\x39\x01\x00\x60\x05\x08\x69\x20\x93\x8d\x30\x70\x46\x55\xd9\xc2\x6f\x90\xe4\xd8\x26\xa2\xe1\xdc\x89\xd8\x2f\x93\x9b\x0d\x15\x79\xaf\x65\x3f\x85\xa6\x51\xc2\x1d\x51\xe4\xee\xff\x14\x30\xab\x64\x67\xe6\xe9\xfd\xb3\xa3\xe9\x2d\x33\x59\x15\xd2\x9c\x45\xaa\x11\x98\x60\x66\x4f\xb1\x5f\xda\x96\xa9\x25\xf6\xf2\x17\x17\x64\xac\x43\x33\xc3\x5a\x6a\xf0\x40\xaf\x67\x1c\xd1\xcd\xf1\x4d\xed\x08\xcb\xa9\x9c\xbf\x3b\x0f\x64\x7d\x25\x3a\x3f\xfb\x02\xd8\xdf\xa0\xbe\x7d\x26\x93\x78\x78\x8e\xdc\x96\xc0\x99\x78\x89\xa9\x06\xc1\xb0\x02\x9e\x80\x08\x98\x9e\xfd\x79\xf7\xf5\xf1\xdb\xd5\xfd\xe7\xe5\x14\x7c\x6a\x91\xf0\x9d\xc5\xbd\xea\x6c\x00\xef\x1c\x08\x37\x70\x39\x50\xd7\x68\xc0\x55\xec\xf2\x19\x66\x6b\xaa\x51\xd0\x0d\xc2\xd9\xea\xfb\x62\x1e\xda\xb2\x82\xa4\xfc\x01\xfb\x20\x76\x95\xbe\x7c\x8e\xb3\xd3\xd5\xd5\xe3\x2d\x9c\xdd\x2e\xbf\xdc\x24\x17\x2d\x53\xa6\xa1\xbc\x94\x89\x4f\x22\x34\x9b\x7a\xc5\xe5\xfd\xe2\xf3\xb2\xd3\xee\xfe\x8f\x0a\x5e\xdf\x3d\x58\xb9\xeb\xbb\x87\x23\x62\x9d\x35\x67\x2b\x90\xea\xfd\x84\x51\x7f\x88\xf9\xdd\x79\x0a\x25\xed\x70\x75\x16\x37\x2f\x39\x53\x40\xea\x03\x09\xad\xb2\x64\x24\xd1\x45\x1b\x58\xef\xd3\x75\x3e\x7c\x9c\x1d\xf6\xff\x0c\xb1\x4f\x17\x77\x7f\x5c\x5d\xdf\xdf\xa4\xab\xaf\xcb\x2f\xab\xc7\x61\x2b\xf4\x3d\xa4\x81\x64\x60\x47\x3e\xad\x95\xdc\xd4\x06\x52\xc9\xf3\x74\x40\x38\xd0\x80\x18\xd3\xc1\x6f\x47\xda\x36\xdf\xcc\x47\x30\x87\x69\x38\x40\x6f\x59\xef\x37\xc3\x7e\x40\x82\x26\x1f\x35\x6d\x24\xd5\x61\x6e\x2e\x90\x1b\xa5\xa4\xfa\x00\x0f\x12\x4a\x09\x5b\xa9\x5e\x74\x4d\x33\x04\xa6\xbb\xbd\x80\x40\x0d\x98\x0a\x61\x23\x37\x28\x7c\x1c\x6d\x09\x15\xf2\x7a\xb4\xbc\xe0\x7d\xb0\xbe\x1c\x12\x7b\x98\x23\x5d\x16\x4a\x75\x80\xc5\xba\x76\x28\x17\x93\xfa\x1f\xd0\xc5\x28\x5e\x01\xfc\x63\x50\x7e\xa5\x81\x71\x18\xc3\xf1\x47\x3f\xde\x51\x62\x1a\xe6\x8f\x91\x29\x7c\x9b\x3b\x2a\xf2\x21\xdb\xa9\x8f\xfa\xc8\x6d\xcb\xc6\x48\xbf\x60\x09\x91\x82\xb4\x54\x31\xba\xe6\x08\xab\xef\x8b\xbe\xd4\xda\x50\xd3\x68\x20\x84\x69\xb2\xdb\xe3\x44\x37\x6b\x6d\x98\x69\xac\xb1\xb7\xee\xb6\xdd\xe5\x56\x30\x91\x03\x15\x60\xbd\x91\x9d\xb7\x6e\x72\x38\xfa\xa8\x39\x78\x56\xaa\xa4\x34\x6e\x95\x3a\xfe\xb6\x62\x1c\xc1\xa0\xb6\xbb\x78\x24\x74\xf2\x09\xa6\x7e\xa8\x58\xd1\x89\x91\x02\xa6\x63\xd1\xc1\x2e\x0d\xa7\xd0\xba\x17\xb8\x4d\xf7\xec\xd4\x6d\xf2\x59\x46\xcd\x71\x2b\xf3\xc0\x0c\x2b\x60\x8d\x25\x13\xee\x61\xe0\x52\xfa\xdb\xe3\xfb\x11\xa4\xda\x65\x10\x71\x75\xf2\x69\xb0\xfc\x3e\xee\x07\x6b\xf8\xb5\x25\xf8\x9b\xf0\xd0\x44\xb8\x7a\x46\xfa\x03\x58\xc6\xec\x53\x30\x15\xd3\xa0\x8d\x62\xb5\x76\x1b\x80\x53\x6d\xa0\xa6\xa6\xb2\x57\x76\x2d\x05\x0a\x03\x85\x92\x1b\xc7\xb4\xf4\x8b\xf0\x06\x1c\xe1\x31\xdb\x3d\x65\x46\xe4\x57\xd0\x98\xc3\xb9\x7e\x4d\x9e\xfe\x4a\x9e\xdf\x9d\xbd\xbe\x9e\xcf\xc3\x0d\x77\xd8\x90\x93\x89\x8d\x80\xa3\x6d\xcd\xcc\x16\x80\x10\x21\x89\xed\x1a\x7d\xc8\xa2\xbe\x3c\x00\x40\x72\x98\x5e\xf5\x67\x0a\xba\xc6\x8c\x15\x2c\x83\x7d\xd1\xfc\x0e\x9c\x46\x4c\xf9\x05\xdb\x99\x5a\xf8\xb3\xad\x42\xd6\x28\x65\xcb\xf2\x1f\xad\xa1\xd0\x8d\xc2\xae\x64\x2e\x30\xd8\x2a\x5a\xd7\xa8\xa0\x90\x0a\x72\xac\xc1\x54\xd4\x00\x13\xda\x50\xce\x3b\x14\x72\xac\x51\xe4\x28\x32\x86\x1a\x98\x70\xb4\x88\x3b\xa7\x84\x34\x07\x59\x40\x8b\x22\x97\x2a\x1a\x40\x4b\x79\x8f\x99\x0d\xe0\xe6\x47\x2d\x75\x97\x8a\xce\x14\xab\x4d\x17\x80\xae\x64\xc3\x73\x58\xa3\x53\x20\x98\xf7\x8e\xfb\x7c\x75\x85\x9c\xc7\x1c\xd8\x3b\x62\xe8\xe0\xd6\x9e\xe9\x5a\x36\x06\xa8\xf8\xd9\xbf\xfd\x62\x9a\xee\xd1\x3a\xd0\xfc\x5d\xa1\x83\x4c\xe4\x80\xc2\xed\x21\x3a\xc8\xd6\x92\xed\xcb\x0f\x98\x01\x23\x83\xd8\x72\xa6\x30\x33\x52\xfd\x8c\x79\x71\x3a\x03\x2f\xf7\xf6\xfc\x0b\x24\x7b\x07\x6e\x3e\x8e\x5a\x6f\x84\xb7\x6f\xad\x7f\x73\x67\x1d\x0f\xcf\xcf\xd2\x00\x44\x73\xae\x5d\x8c\x98\x83\x91\xd3\xc9\xe4\xdf\x00\x00\x00\xff\xff\x86\x09\xd4\x10\x7c\x0c\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 3196, mode: os.FileMode(420), modTime: time.Unix(1496345765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x5d\x6f\xea\x38\x10\x7d\xcf\xaf\x98\xeb\x46\xba\x50\x89\x22\xf6\x91\x2a\x52\xe9\x82\x5a\xa4\x02\x51\xdb\x6d\x1f\xaa\x6e\xe4\x26\x26\xb1\x4a\xec\x28\x36\x61\xb5\xa5\xff\xfd\xca\x0e\xf9\x76\x43\x5e\x90\x3d\x33\x67\x3c\x67\x8e\xc7\x5c\xfc\x1a\x7f\x50\x36\x16\x91\x65\x59\x59\x38\x18\xc2\x97\x05\x00\xe0\x63\x41\x00\xd9\x13\x04\x94\xe9\x0d\xf5\x51\x46\xe5\xb0\x5c\xa9\xcf\xf3\xb2\xd0\x53\xdb\x80\xec\xaf\x9b\xe9\x5f\xdf\xa8\x61\xbe\xbe\x2e\x97\xd8\x97\x34\xc3\x92\x18\xe2\x0b\xd3\x59\x8c\x80\xf4\xa0\x54\xc6\xb3\x38\x97\xcd\x70\x9f\xc7\x31\x66\x01\x64\x21\xd8\x37\xda\x42\x04\xf6\x2d\xeb\xdb\xb2\xca\xfa\x4a\x62\xb2\xb0\x2c\xa5\xf0\xce\x42\xd8\x51\xf6\x59\xfa\x17\xf6\x32\x86\x6e\xe1\x0d\x46\x0c\x90\xfd\xb2\x7c\x7c\xfe\x67\xf6\x70\xb7\x41\xf0\x7e\x0d\x32\x22\x15\xb9\x59\x58\xab\x4f\xef\x6e\xa9\x95\x9f\xe6\xbf\x84\xa7\x12\xca\x58\xc7\x9e\xd4\x60\xff\xef\x87\xed\x06\x0f\x3e\xb0\x20\x0c\xc7\x04\x6c\xf7\x75\x3e\xec\x4d\xe5\xb9\xb3\xe7\x7b\xc7\xbe\xdf\xac\x16\xe3\xab\x8c\xa6\x72\x8f\x77\x21\x1f\x57\x09\x1b\x61\x5e\x15\xb7\x79\x98\xbb\x4f\x13\xc7\x76\x9f\x26\x3f\x7b\xdc\x6d\x72\xf8\xfc\xb7\xcf\xef\x76\xb9\x56\x6e\xb7\xcb\x75\x4f\x3e\x8d\xa5\x91\xea\x4e\x45\x92\x66\x4d\x53\x43\xd2\x53\x9a\xa6\xa3\xba\x1d\x75\x27\x0d\x86\xf2\xb3\x4c\x75\x36\xf4\x53\x33\xbc\xf9\xf2\x69\x76\xfb\xb0\xf0\xdc\xc7\xcd\xca\x7d\xfe\xb1\x37\x8a\x28\x34\xa8\xe2\x86\xa0\x68\x43\x8d\xc6\xc4\x9f\x01\x4d\x61\x94\x40\xfb\x78\x22\xf5\xc7\x2d\x8f\x9c\xa7\x42\x8d\x95\xa8\x5a\x7a\x3c\x27\x1c\x3f\xe2\xb0\x48\x53\x9e\x4e\x61\xcd\x21\xe4\x70\xe0\xe9\xa7\x48\xb0\x4f\x80\x8a\xfc\x12\x10\xc0\x52\x45\x41\xcc\x63\xc2\x64\x5d\xcb\x11\xd9\x25\xe5\x3a\x25\x72\x9f\x32\x98\x14\x25\xb5\x8a\xb7\x3b\xc2\x31\xb4\xc5\x20\x09\x53\x9b\x4d\x0a\xeb\xf4\xaf\x9d\xb0\xd4\xcc\x9e\x09\x52\x93\x7f\x57\xd1\x06\xcd\x99\xc4\x6a\x14\x7a\xeb\x5a\xe9\x0e\xb9\x8f\x8b\x97\x9a\xaf\xfb\x3a\x77\x10\xea\x6e\x6b\x01\x79\x7f\x6f\x56\xab\xd9\x7a\xee\xd8\xcd\x75\xde\xe7\x24\xe5\x71\x22\xbd\xd3\x30\x2b\x7b\x7d\x01\x5b\xca\x02\xc0\x0c\xf0\x5e\xf2\xd1\x49\x0b\x94\x33\xd8\xd2\x1d\xa9\xe4\x80\x10\xfc\x72\x00\xd9\xfd\xa9\xbb\x32\x39\x13\xd0\x10\x71\x9e\x48\x4d\x1d\x04\xc6\x5c\xaf\x86\x04\xb9\x76\xea\xca\x31\x92\xa6\x51\xf3\x34\xf9\x10\xde\x4b\x5e\x4e\x62\x45\xb5\x88\x78\x22\x61\xb4\x87\x9c\xa8\x0c\xa7\xc2\xb2\x5a\xc4\x1a\x88\x2c\x66\x7a\x1d\xae\x24\xb7\x62\xd3\x4b\x39\x97\x8e\x3a\x84\x36\x1c\x22\xba\x23\xba\xd8\x96\x4b\xce\xb2\xae\x32\xe0\xd5\xc3\xaa\x2f\xe4\xb6\xeb\x5e\x1b\xba\x5d\x66\xd4\xc7\xc8\xc1\x2b\x5d\x3c\x35\xd5\x1d\x7b\xe0\x63\xd9\x0f\xd5\x7c\xff\x8a\xfe\x3b\xcd\x81\x30\xe2\x80\xec\x2e\xfe\x49\x27\x3d\x93\xa3\x36\x05\xaa\xa7\xb2\x0b\xd4\xf0\x3f\xb5\xd6\xd0\xf4\x96\xf5\x02\x64\x44\x05\x08\x99\xd2\x44\xe8\xd9\xb3\xc3\x42\x42\x82\x65\xa4\x1e\xf2\x84\x33\xc2\x24\x6c\x53\x1e\x6b\xa3\xda\xbf\x6a\xff\x09\xa9\xfa\x35\xd0\x53\xae\x4d\x15\x1c\x41\x90\x00\x7e\x8b\xe3\xf8\xed\xdf\xf1\xfb\xa5\x7d\x3c\xfe\xce\x29\x0b\x38\xd3\x62\xf2\xa3\xe4\x10\x78\xdb\x3d\xf3\x55\x90\x70\x06\xf6\x57\x6b\xeb\xed\xe6\xfd\x1b\x50\x57\x3b\x68\x68\x52\x94\xf5\x27\x00\x00\xff\xff\xbc\x15\x44\xac\x87\x09\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 2439, mode: os.FileMode(420), modTime: time.Unix(1496347023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/fish": dataFish,
	"data/sh": dataSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

