// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6e\xab\x30\x10\x45\xf7\xf3\x15\x13\x87\x45\xb2\x40\xf9\x80\x27\x16\xd1\xa3\xaa\x2a\x95\x82\x50\x1a\x16\x55\x65\x39\xc1\x04\x4b\xc6\x46\xc6\x78\x53\xf5\xdf\x2b\x9b\xb4\x15\x29\x6a\x59\xb1\x98\xb9\xe7\xce\xf1\x7a\xb5\x3b\x09\xb5\x3b\xb1\xa1\x05\xa0\xd4\x5d\xa8\xe1\x52\xb3\x7a\xb3\xc5\x37\x40\x44\xe4\x8e\x49\x24\xd1\xc6\x5d\xa6\xdf\x38\x1e\x5a\x2e\x25\xfa\x8d\x2d\x81\x77\x00\x5a\x94\x77\x47\x7a\x7c\x28\x0f\xcf\xfb\xc7\xfb\x9c\x16\x55\x9a\x10\x02\x20\x1a\x7c\x41\x12\x15\x65\x9e\x15\x07\xfa\x3f\xcf\xb2\xfd\x53\x4a\x70\x95\x60\xe0\xf4\x46\x77\xbd\xa5\x67\xdd\x75\x4c\xd5\xf8\xfa\x0f\x6d\xcb\x55\x60\xfe\x48\x9c\x45\x24\x37\x91\xd0\x88\x6b\xf5\x79\xe4\xd7\x09\x6b\x6c\x84\xaa\x91\x29\x64\xa3\xd5\x31\x3b\x5b\xe1\x98\x15\x5a\x61\x23\x24\x0f\x23\x53\xd7\x50\x8e\x44\xbf\xe3\xc9\xac\xaa\xff\xfe\x58\x08\x73\xbe\xe3\x37\x28\x2a\xaa\x94\xe0\x22\xab\x5a\x00\x18\x6e\x47\xa3\x3e\x73\x16\x0d\x79\xe7\x21\x75\xc2\x04\x1d\xfe\x5a\x7a\xbd\x96\xfb\x97\x1a\x5a\xdd\x5b\x8c\x47\x9c\x44\x39\x66\x06\x80\x1b\xb9\x0b\x22\x01\x3e\x02\x00\x00\xff\xff\xf3\x65\xa2\x5c\x26\x02\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 550, mode: os.FileMode(420), modTime: time.Unix(1496584906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6d\x4f\x1b\xb9\x13\x7f\x9f\x4f\x31\x4d\x91\x48\x2a\x2d\xf9\xc3\xff\x5d\x2b\x4e\xa2\x05\xb5\x48\xb4\x20\xda\x5e\x75\x42\xdc\xca\xb1\x67\x37\x16\xbb\xf6\x9e\xed\x0d\xe1\xc4\x87\x3f\xd9\xde\x07\xef\xc6\xd0\xab\x9a\x5e\xa4\x8a\xae\x3d\x4f\x9e\xf9\xcd\x83\xfd\xf2\xc5\x62\xc9\xc5\x22\xe3\x7a\xb5\x98\x4c\xb2\x5a\x50\xc3\xa5\x80\x75\x3e\x01\x00\xe0\x19\x08\x69\x80\xca\x5a\x18\xd8\x23\x2a\x5f\xc3\x6f\xb0\x60\xb8\x5e\x88\xba\x28\x1c\x89\xfd\x51\x59\x96\x44\xb0\x96\xcb\xfe\x14\x9a\x5a\x09\xf7\x89\x82\xb9\xbf\x2f\x01\xe9\x4a\x7a\x31\x37\x87\xb7\x6e\x4d\xdf\x73\x43\x57\xc3\x35\x27\x91\x68\x04\x2e\xb8\xe9\x56\xec\x2f\x5d\xe7\xa9\x5d\x6c\xe9\x0f\x0e\x92\x31\x0f\xa1\x86\xaf\x89\xc1\x2d\xbe\x76\xe3\x19\x5e\x86\x4f\x72\x47\xb6\x1c\x0b\x65\x15\xa1\x77\x24\x47\xbd\xc5\x12\xd9\x72\x2c\x79\x21\x97\xa4\x38\xdb\x20\xdd\x62\xe9\xb7\x9e\xb1\xb2\xae\x72\x45\xd8\xb6\x89\xe3\x75\x47\xbc\xff\x6a\x7f\x40\xd8\x47\xca\x6b\xe8\x02\x64\xff\x05\xf1\x6f\x3d\x3d\x89\xbb\xcf\x2d\xaf\x73\x28\xb8\xb8\xf3\xac\x03\xce\xd1\xd1\x79\x06\x37\x90\xfc\x0d\xd3\xbd\xdf\xcf\xaf\xbf\x7c\x3d\xb9\x78\x7f\x39\x85\xfe\x54\x0e\x15\x67\x4a\x49\xf5\x1a\x3e\x49\x58\x73\x65\x6a\x52\xe4\x12\xee\xa5\xba\xd3\x15\xa1\x08\x5c\xfb\xc0\x22\x10\x03\x66\x85\x50\xca\x12\x45\x0f\x8e\x75\x0e\x2b\x2c\xaa\x58\x38\x3c\x10\xe1\x70\x00\x45\xca\xa0\xb7\x25\xbd\x3a\xf9\xf2\x61\xa1\x15\x5d\x44\x8e\x32\x08\xbb\x3f\x88\x78\xea\x20\x11\xa0\x38\x81\x1d\xeb\x2c\x48\xa4\x39\x24\x85\x81\xa3\x80\x5d\xa3\x01\x17\xf5\xa3\x5b\x98\x2d\x89\x46\x41\x4a\x84\xbd\xab\x6f\xa7\xf3\xa1\x2c\x4b\x98\xe4\x1b\xe8\x8c\x68\xd0\x72\xe4\x65\x39\x7f\x9e\x78\x2b\xb8\xc8\x83\x93\xc6\xb9\xdd\xf9\x61\xef\xc3\xe5\xc7\xb3\xc5\x41\xe7\xfd\x45\xc0\x36\xe0\x4b\x7b\xc6\xcb\x8b\xd3\xf7\x97\x9e\xdb\xff\x7d\x96\xf0\xed\xf9\x27\x4b\xf7\xf6\xfc\xd3\x33\x64\x5e\x9a\x93\x35\xa0\x6a\xf5\x0c\xad\x7e\x1d\xd3\xdb\x68\x1a\xc5\x77\xc9\x85\x97\x58\xde\x31\xae\x20\xa9\xe2\x08\x18\x52\x78\x6b\x07\xd2\xdb\xe3\x3a\x1d\xbd\x9d\x11\x8c\xa7\xa7\xe7\x9f\x4f\xde\x5e\x9c\xa5\x57\xd7\x97\x1f\xaf\xbe\x84\x48\x69\x21\xa6\x21\xa1\x60\x6b\x6f\x5a\x29\x59\x56\x06\x52\x59\xb0\x34\x58\xd8\xe2\x80\xd8\x66\x17\x75\x8b\xcd\x59\x6f\xc1\x1c\xa6\xc3\x32\xf1\x94\xf4\x36\x2f\xba\x4a\x30\xc8\x81\x11\xa6\xff\xbb\x74\x8e\x54\xdd\xad\x74\xee\x21\x7f\xda\x52\x8f\x40\xdf\x87\xaf\xc3\x46\x04\x9a\x43\x2a\x1f\xe5\x18\xd4\x43\xba\x18\xd5\x0e\x20\x81\xd1\x20\x0f\x30\x33\x8e\xe4\xf7\x38\x30\x1e\xfb\x61\x49\x41\x88\x54\x0a\x1c\x15\x8a\x70\x27\x72\xf2\x27\x77\x47\x4e\xde\xde\x76\xec\xdb\xe0\x0b\xdb\x9a\xe3\x2c\xc0\x9e\xa4\x87\xd5\xa8\xbc\xfd\x44\x8d\x76\x28\xfa\x5a\x31\x8f\xa0\x4e\x83\xdb\xcb\x25\xe4\x56\x7b\x0d\x39\x37\xab\x7a\x79\x40\x65\xb9\x78\x8f\xe6\xb3\x51\x48\xca\xc5\x3a\x0f\x44\x5c\x63\x21\x09\xb3\x32\x2c\xb6\xf5\x0a\x8b\x02\x2a\xa2\x0c\xc8\xec\x87\xa5\x36\xe9\x80\x6b\x52\x40\x92\x78\x59\x36\x8a\xf0\x08\x5a\xd6\x8a\xe2\x64\x74\xea\x81\x73\xa6\x90\x90\xa1\x27\x5e\x1c\x6f\xd3\x8c\x72\xf7\x7a\x90\x47\x03\xda\x30\x43\xfb\x89\x60\x9b\x24\x5e\x47\x46\x93\xcf\xbf\x68\x89\x61\x2d\xf9\x43\xd6\xa0\x57\xb2\x2e\x18\xe8\x0a\x29\xcf\x1e\x80\x74\xf3\x8c\x59\x11\xd3\xee\x2e\x11\x70\x83\xb4\x36\xc8\xb6\x2a\x4a\x64\xf8\x8a\x57\x94\x5f\x0d\x35\x1b\xcf\xa6\x6b\xfb\x19\x6f\x97\x61\xfc\xf1\xe8\xb8\x51\xa7\x36\xb2\x9f\xf3\x92\x44\x8a\x64\x4d\x14\x27\xcb\x02\xe1\xea\xdb\x69\x6b\xa0\x36\xc4\xd4\x1a\x92\x84\xeb\xa4\x71\x7f\xa2\xeb\xa5\x36\xdc\xd4\x56\xd8\x53\x57\x80\xe6\x0e\x90\x71\xc1\x80\x08\xb0\xda\x92\x16\x68\xae\xaf\x15\x83\x24\xef\xb7\x52\x25\xa5\x71\x73\x90\xdb\xbf\x5f\xf1\x02\xc1\xa0\xb6\xa8\x19\x11\x59\xb7\xf4\x2d\x8f\x67\x9e\x2c\xc9\x60\x3a\x26\x0d\x26\x9d\x61\x8f\xb4\xea\x05\xde\xf7\x2e\x4b\xdd\x18\x36\xa3\xc4\x3c\x2f\x65\x3e\x10\xc3\x33\x58\x62\xce\x85\xbb\x3f\xb9\x23\xfd\xd5\x17\xd2\x37\x20\x55\x73\x82\x88\xaa\x17\xc7\x01\xd0\xde\x74\xbd\x39\xfc\x0d\x02\xbc\x2d\x62\x38\x18\x8c\xf8\x83\xb0\x8c\xb7\x5f\x82\x59\x71\x0d\xda\x28\x5e\x69\x57\xbc\x0a\xa2\x0d\x54\xc4\xac\x6c\xa6\x55\x52\xa0\x30\x90\x29\x59\xba\x4d\xbb\x7e\x30\x1c\x5f\x47\xf1\x98\x35\x37\xbe\xd1\xf2\x23\x68\x64\xb0\xaf\x1f\x17\x37\x7f\x2e\x6e\x5f\xed\x3d\x3e\xee\xcf\x87\xc8\xdc\x06\xe4\x64\x62\x2d\x28\xd0\x42\x93\x5a\x07\x24\x09\x6e\x68\x51\x6b\xbe\x8e\xec\x09\x98\x3a\xff\xce\x52\xdf\xf3\x44\x5d\x2e\x51\xa5\x32\x4b\x69\xc9\x52\xa2\x72\x9d\xde\xcb\x54\x56\x46\xcf\xe1\x18\x0e\xa7\x90\x6c\x48\xef\x52\x00\x48\x18\x4c\x4f\xda\x6f\xd2\x54\x1c\x4e\x63\xe3\xcc\x74\x37\xda\xfb\xbb\x8b\xd7\xfe\x6e\x45\x44\x8e\xce\xd1\x56\x95\x2d\xc6\x8c\x2b\xa4\x46\xaa\x07\x30\xd2\xf7\x16\x45\x83\x45\x99\xb9\xc5\x66\xb4\xda\xb5\x7d\x7d\x29\xf3\xf6\x9d\xf6\xdf\x56\x2b\xad\x95\xb2\xe8\xf8\x75\x0e\x62\xa8\x8d\x92\x0f\xd0\x86\xe7\x1a\x4b\xb9\x46\x0d\x52\xa0\xcd\xa7\xb2\x2e\x0c\xaf\x8a\xe0\xe0\x60\x3b\x03\x29\x0a\x6b\x1f\x57\x40\xa5\x30\x28\x8c\xde\x91\x39\x28\x74\xad\x10\x3a\x73\x4e\xe0\x5e\x91\xaa\x42\x05\x99\x54\xc0\xb0\xf2\x4d\x89\x0b\x6d\x48\x51\xf8\x74\x62\x58\xa1\x60\x28\x28\x47\x0d\x5c\xb8\xb5\xe8\x80\x2c\xb4\x41\xc2\xdc\xc0\x80\x82\x49\xb5\x2b\x9b\x6d\xdb\x81\xde\xe6\xb3\x4d\x25\xb5\x8f\x9f\xa6\x8a\x57\x66\xab\x91\xae\x49\x91\x20\x6b\x6d\x6d\x83\xec\xe6\x90\x1d\xd9\x14\x3c\x7a\x34\x36\xb9\xde\x1d\x34\x77\x4f\x51\x3c\xc0\x4c\xd6\x46\x73\x86\x51\x98\xcf\x77\x64\x8f\x9b\x13\x02\x1f\x7d\xb0\xdf\x64\x29\x6b\x03\x44\x3c\xb4\x46\xed\x48\x99\x7b\xcd\x0a\x94\xbd\x53\xe8\x0a\x8e\x60\x80\xc2\x75\x5e\x32\xc2\x73\xc1\xc5\x1d\x70\xd3\x56\x80\x36\x22\x5d\x15\xd8\x91\x61\x4e\x4d\x60\xd8\x85\xfd\xfe\x4e\x9e\xb7\x36\xb9\x26\xb2\x7b\x83\xb4\x19\x1a\xa4\x8d\x4b\x6e\xdc\x70\xed\x46\xd5\xce\x8e\x5d\x65\xb8\x46\x53\x57\x61\xb6\xb8\x88\xe8\xe0\xe8\x5c\xc0\x83\xac\xd5\x4e\xf3\xa1\x99\xaf\x3a\xad\x9f\x57\xf2\x1e\xb8\xc8\x64\x03\x42\xa7\xb0\x8d\xc2\xae\x6b\x6c\x2d\x9a\x7a\xd5\x28\xff\xda\x7d\x13\x68\xda\x53\xdf\xff\x7f\x51\xa3\xa9\x45\x0f\x3e\x6f\x83\xfd\xd6\x71\xb8\xf7\xd6\x04\xd5\xd3\xec\x6b\x07\x60\x64\x60\xe4\xae\xac\xf2\xf7\xd0\xde\xaa\xe6\x7b\x58\xc2\x97\x5c\x10\xf5\xe0\x12\x55\xb9\x5b\xa0\x4d\xd5\x78\xf1\x0c\xa7\x6f\x67\x86\xbd\xec\x6a\x2e\xf2\xb4\x29\x31\xdd\x34\x4c\x4b\x66\xef\x49\x6e\xb1\xe0\x02\x21\x91\x15\x9d\x47\xde\x15\x69\xc9\xe6\x90\xe4\x06\x0e\x83\xcb\x80\xa3\x68\x1f\xd8\xe1\xd8\x51\xdd\x1c\xdd\x06\x14\xfd\x54\x08\xff\x8b\x3e\x09\x4d\x20\xbc\x27\x45\xae\x0e\x39\x9a\x74\xf0\xf2\xea\xa6\xfc\xd8\x03\x1b\x24\x25\xd9\x30\xac\xcc\x0a\xfe\x0f\x49\xc9\x45\xfb\xff\x47\x50\xb8\x86\x47\xa0\xb5\x81\x84\x4d\x17\x53\x48\xb2\xa4\x59\xf6\x2a\x23\x61\x7c\xc2\x73\xdd\x24\xe7\x43\x37\x9d\xb9\xa7\x6a\x6d\xe2\x2d\xe2\x29\x21\xcd\xbc\xf1\x53\x32\xba\x7c\xf2\x52\xf6\x67\x5b\xee\x9a\xef\x4f\xfe\x09\x00\x00\xff\xff\xda\xec\xc5\x0e\x84\x19\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 6532, mode: os.FileMode(420), modTime: time.Unix(1496591829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x65\x05\xd4\x29\xe0\x08\xde\x63\x02\x03\x4d\x90\x20\x0d\x90\xc6\x46\x92\x6e\x18\x82\x4e\xa0\x25\x5a\x22\x22\x89\x02\x49\x29\xd9\x9a\xfe\xef\x03\x29\x8b\xd4\x0f\x5a\x6e\xb7\xe8\xc5\xb0\xee\xee\x3b\xde\x7d\xdf\x1d\xf5\xfe\x5d\xb0\xa1\x45\x20\x52\xcf\xab\x93\xd9\x11\x7c\xf7\x00\x00\x22\x2c\x08\x20\x7f\x81\x80\x16\xfa\x85\x7a\x68\x41\xe5\x91\xf9\xa7\x9e\x30\xac\x93\x50\xbd\x06\xe4\x7f\xff\x74\xf2\xdb\x0f\xd4\x33\x9f\x9e\x9a\xbf\x38\x92\xb4\xc6\x92\x38\xe2\x5b\xd3\x41\x8c\x98\x4c\xa0\x58\xe3\x41\x9c\x28\x2e\x71\xf4\x84\x13\x22\x1c\x38\xd6\x78\x10\x27\xc9\xd8\x06\x67\x97\x2f\x24\x72\xe0\x58\xe3\x41\x9c\xaa\x4c\x38\x8e\x5d\x45\xed\x2c\x07\x11\x3e\xf6\x63\x23\x96\xe7\xb8\x88\xa1\x4e\xc0\xff\xa4\x2d\x44\xe0\xc8\xf3\x7e\x78\x9e\x61\xcc\x50\x5d\x27\x86\x9c\xd6\xbb\x4e\x20\xa3\xc5\x93\xf1\xb7\x3d\x31\x51\x74\x0b\x8f\x30\xff\x07\x90\xff\xfb\xf5\xdd\xc3\xd7\xb3\x9b\xab\x15\x82\x6f\xa7\x20\x53\x62\x05\x43\xa2\x94\xc1\x25\xe7\x8c\x9f\xc0\x2d\x83\x9a\x72\x59\xe1\x2c\x61\xf0\xcc\xf8\x93\x28\x71\x44\x80\x8a\x26\x3b\x01\x2c\x55\x30\xe4\x2c\x27\x85\x34\x10\x75\x02\x29\xc9\xca\x0e\x67\xc6\xc4\x89\xac\x78\x01\x0b\xfd\x62\x4b\x1b\xdd\xc6\x60\x0f\x14\xae\xcf\x1e\x3e\x07\x82\x47\x81\xaa\xc4\xeb\x89\x6d\x50\x48\x31\x5d\x48\x9d\x74\xc4\xd7\xe6\x6b\x1a\xfb\x52\x32\x2e\xc1\xc4\x2e\xfd\xc5\x2f\xf4\x67\x14\x3c\xdb\x60\x41\x0a\x9c\x13\xf0\xd7\x7f\x5c\x1c\xf5\x53\xa9\x6e\x9e\x35\x87\xa0\x45\xd2\x29\xd4\x7d\x14\x5d\xfe\xd2\xff\xbc\xfa\x72\x19\x1c\x9b\xde\x07\x7b\xc2\x42\x1b\xb7\xba\xb9\x58\xdf\x2f\x96\xfe\xfa\x7e\xb1\xdf\xe3\x6a\xd5\xc0\x37\xbf\x53\x7e\xe7\xd7\xb7\xca\xed\xfc\xfa\x76\x22\x9f\xc6\xd2\x48\x5d\xa7\x36\x49\xbf\xa6\x13\x47\xd2\x5d\x9a\x01\xf7\x9b\xdd\xf6\xda\x39\x69\x30\xd4\x9c\xe5\x44\x67\x43\xfb\xc8\x0a\x2f\xae\xef\xcf\xce\x6f\x2e\xc3\xf5\xdd\xea\xcb\xfa\x61\x2f\x77\xaa\x51\x68\x66\xe3\x8e\x40\xb5\x0d\xf5\x88\xcb\x9f\x62\xca\x61\x5e\xba\xa5\xd9\xf7\x68\xfa\xd4\x0e\x9e\x15\xdd\xff\x1a\xbc\xff\x34\x71\x03\xc1\xbb\x26\xce\xca\xf2\xa2\x75\x9e\x10\xa6\xd6\xd4\x48\x66\x0e\x12\x1d\x02\x72\x89\xc2\xa5\xc7\x11\xdb\xc3\x84\x46\x61\x55\x21\x48\x67\x58\xc6\xfa\x77\x28\xd4\x25\x6d\xe7\x58\x0c\x86\xd0\xf0\x89\x2b\xc9\xc6\x2b\xa8\x6d\x1d\x2b\x42\xce\x98\x5c\xaa\xd1\xd7\x86\xe7\x94\x66\x04\x1e\x01\xf9\x03\x17\x04\xef\x96\x80\x34\xef\x31\xb3\xf7\xb3\x96\xc6\x76\xec\xde\x19\xff\xb1\x56\xd4\x53\x90\xe7\xd0\xb8\x84\x6a\xff\x2c\xfd\x59\x84\xe5\x34\x54\xff\xd2\xd1\xd9\x11\x82\x65\x5f\x9a\x73\x06\xc8\x1f\xe3\x37\x15\x4c\x69\xb8\xa3\x47\x7b\x3f\x8d\x81\x7a\xfe\xbb\x5b\xa0\xaf\x57\xcf\x61\x7d\x0f\x32\xa5\x02\x84\xe4\xb4\x14\x7a\x0a\x32\x2c\x24\x94\x58\xa6\xea\xf6\x2c\x59\x41\x0a\x09\x5b\xce\x72\x6d\x54\xef\x8f\x87\xdf\x32\x96\xaf\x99\x9e\x81\x61\xab\xe0\x15\x04\x89\xe1\x83\x78\x0d\x1e\xff\x0a\xbe\x7d\xf4\x5f\x5f\x3f\x34\x2d\x8b\x59\x41\x8c\x26\x76\x77\xbc\x51\x03\xcb\x62\x5b\x62\x67\xa3\xfd\xfc\x6d\x35\x58\x1d\xe3\x69\xfd\x5a\xc6\xcd\xa4\x9a\x3c\xda\x96\x30\x48\x88\x84\x79\x05\x09\x95\x69\xb5\x39\x8e\x58\x1e\x5c\x11\x79\x2f\x39\xc1\x79\x50\x27\x1d\x88\x3b\x92\x31\x1c\x2b\x0c\xd5\x1f\x91\x92\x2c\x83\x12\x73\x09\x6c\xfb\xcb\xa8\xe6\xcc\x5c\x83\x7a\x83\x4a\x7b\x0d\x41\x30\xc7\xfd\xea\xb5\x8e\x06\x3e\xce\x7d\x78\xd7\xdb\x51\xbd\x08\xcf\x29\xb6\xb1\xcb\x96\x1a\xda\xec\xf7\x9d\x63\x35\x2f\xa6\x57\xf2\x9f\xac\x02\x91\xb2\x2a\x8b\x41\x94\x24\xa2\xdb\xbf\x01\x9b\x8f\x36\x99\x62\xd9\x5a\x37\x04\xc8\x0b\x89\x2a\x49\xe2\xd1\x7e\xb6\x07\x98\xde\xcf\x7b\xf5\xf4\x46\x82\xaa\x71\xa6\xbe\x1b\xdf\x9e\xb4\x9f\xe2\xc2\xb5\x58\xbd\x7f\x03\x00\x00\xff\xff\x8c\xa1\x44\x57\xd4\x0c\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3284, mode: os.FileMode(420), modTime: time.Unix(1496592047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x85\x1e\x7a\x2d\x14\x4a\x09\x63\x69\x6c\x8b\x28\x92\xd0\x8c\x9c\xcd\x2e\xfb\xee\xc5\x4a\x9c\x44\x6e\xa0\xb7\xf0\x69\xf4\xcf\x8c\xfe\x3f\x7e\xf8\xf0\xd4\x5a\xff\xf4\xca\x43\xd3\x6c\xb7\x63\xbf\x4d\xe4\x02\x9a\xd5\x1a\xde\x1a\x00\x00\x1a\xd1\x81\x7a\x5c\x8d\xfd\xe9\xe7\x66\xc3\x03\x39\x07\xaf\x3c\xac\x55\xf3\xde\x34\x7a\x88\x07\xb3\xed\xb2\xd7\x62\x83\xe7\x4f\xab\xc7\xb7\x05\xfa\xfd\xf9\xcf\x3b\xa8\x22\x8e\x59\xc2\x16\xb5\xd8\x11\x85\xd4\xfa\xdc\x52\x87\x7d\x74\x54\x6a\x2f\x7d\x27\x86\xc6\xc0\x5c\x5c\x41\x6d\x22\xea\x1d\xf6\xc4\x15\x36\x74\xb7\xda\x10\x4b\x0a\xc7\x8a\x91\xe7\x9c\xea\xb2\x69\xbd\x0a\xf4\x2e\xb4\xe8\x9e\x5f\x48\x57\x78\x20\x17\x2b\x60\xbd\x95\x0a\x38\xeb\x77\x0b\xc0\x75\x05\x93\xe4\x5a\x84\x05\x25\xd7\xeb\x64\x6f\x3d\x0b\x3a\xb7\xa0\xff\xc8\xe7\xd8\x27\x34\xa7\x6d\x1e\x2e\x74\xf3\x0b\xd4\x97\xf3\x7b\x00\x02\x47\xd2\xb6\xb3\x1a\x46\x9b\x24\xa3\xeb\x03\x1c\x42\xda\x71\x44\x4d\xaa\x7e\xe6\x5a\xe3\xdb\xe5\x55\x41\x06\x02\x9d\x53\x22\x2f\xf7\x65\x16\x0e\x2c\x86\x81\x43\xc2\x18\x29\x41\x17\x12\x18\x8a\x20\x03\x0a\x9c\x97\xe4\xa2\x6e\x28\x92\x37\xe4\xb5\x25\x06\xeb\x0b\xbb\xd3\xa9\x5c\x22\x34\x10\x3a\x18\xc9\x9b\x90\xd4\xad\xa5\x75\xdf\xe7\x97\x18\xf8\x34\x3c\xeb\x64\xa3\x9c\xfa\xf2\x10\xb2\x33\xd0\x52\x71\x7e\x43\x66\xee\x37\x6f\x58\x82\xae\xae\xb9\xa8\x55\xbf\x93\x8b\x80\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xd7\x78\xd4\xe5\x5f\x13\x15\x1f\xfc\x94\x3d\x6c\xdd\x64\xc9\x75\x9d\x09\x4f\xb6\x82\x15\x90\x50\x4d\x61\x6c\x22\x2d\x21\x1d\xd5\x35\x68\xb5\xf4\x8f\xe9\xe2\x7f\xac\x99\x55\x65\xb0\x7c\x2b\x79\xc9\x52\x2d\xf9\xb3\x84\x8c\xef\x0f\x02\x5d\x0a\xfb\x72\x74\xe3\x87\x7c\xe4\x22\x46\x06\x24\xa8\x39\xa5\xe5\x03\x11\xf6\xd1\x50\x07\xcb\xbf\x3a\x8c\x7d\xf3\x37\x00\x00\xff\xff\x27\x7d\x68\x13\x7e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1496592103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

