// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6e\xab\x30\x10\x45\xf7\xf3\x15\x13\x87\x45\xb2\x40\xf9\x80\x27\x16\xd1\xa3\xaa\x2a\x95\x82\x50\x1a\x16\x55\x65\x39\xc1\x04\x4b\xc6\x46\xc6\x78\x53\xf5\xdf\x2b\x9b\xb4\x15\x29\x6a\x59\xb1\x98\xb9\xe7\xce\xf1\x7a\xb5\x3b\x09\xb5\x3b\xb1\xa1\x05\xa0\xd4\x5d\xa8\xe1\x52\xb3\x7a\xb3\xc5\x37\x40\x44\xe4\x8e\x49\x24\xd1\xc6\x5d\xa6\xdf\x38\x1e\x5a\x2e\x25\xfa\x8d\x2d\x81\x77\x00\x5a\x94\x77\x47\x7a\x7c\x28\x0f\xcf\xfb\xc7\xfb\x9c\x16\x55\x9a\x10\x02\x20\x1a\x7c\x41\x12\x15\x65\x9e\x15\x07\xfa\x3f\xcf\xb2\xfd\x53\x4a\x70\x95\x60\xe0\xf4\x46\x77\xbd\xa5\x67\xdd\x75\x4c\xd5\xf8\xfa\x0f\x6d\xcb\x55\x60\xfe\x48\x9c\x45\x24\x37\x91\xd0\x88\x6b\xf5\x79\xe4\xd7\x09\x6b\x6c\x84\xaa\x91\x29\x64\xa3\xd5\x31\x3b\x5b\xe1\x98\x15\x5a\x61\x23\x24\x0f\x23\x53\xd7\x50\x8e\x44\xbf\xe3\xc9\xac\xaa\xff\xfe\x58\x08\x73\xbe\xe3\x37\x28\x2a\xaa\x94\xe0\x22\xab\x5a\x00\x18\x6e\x47\xa3\x3e\x73\x16\x0d\x79\xe7\x21\x75\xc2\x04\x1d\xfe\x5a\x7a\xbd\x96\xfb\x97\x1a\x5a\xdd\x5b\x8c\x47\x9c\x44\x39\x66\x06\x80\x1b\xb9\x0b\x22\x01\x3e\x02\x00\x00\xff\xff\xf3\x65\xa2\x5c\x26\x02\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 550, mode: os.FileMode(420), modTime: time.Unix(1496584906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x4f\xdc\xb8\x16\x7f\x9f\xbf\xe2\x74\x8a\xc4\x4c\xa5\x30\x17\xee\x5b\x2b\xae\x44\x0b\x6a\x91\x68\x41\xb4\xbd\x7d\x40\x6c\xe4\xb1\x4f\x12\x8b\xc4\xce\xda\xce\x00\x2b\xfe\xf8\x95\xed\x7c\x39\x63\xe8\xae\x76\xba\x23\x55\x34\xf6\xf9\x3e\xbf\xf3\x91\xbc\x7e\xb5\x5a\x73\xb1\xca\xb8\x2e\x56\xb3\x59\xd6\x08\x6a\xb8\x14\xb0\xc9\x67\x00\x00\x3c\x03\x21\x0d\x50\xd9\x08\x03\x7b\x44\xe5\x1b\xf8\x1f\xac\x18\x6e\x56\xa2\x29\x4b\x47\x62\x7f\x54\x56\x15\x11\xac\xe3\xb2\x3f\x85\xa6\x51\xc2\x3d\xa2\x60\xee\xef\x6b\x40\x5a\x48\x2f\xe6\xe6\xf0\xd6\x9d\xe9\x7b\x6e\x68\x11\x9e\x39\x89\x44\x23\x70\xc1\x4d\x7f\x62\x7f\xe9\x26\x4f\xed\x61\x47\x7f\x70\x90\x4c\x79\x08\x35\x7c\x43\x0c\x6e\xf1\x75\x17\x2f\xf0\x32\x7c\x96\x3b\x72\xe5\x58\x28\xab\x09\xbd\x23\x39\xea\x2d\x96\xc8\x95\x63\x69\xea\x5c\x11\xb6\xad\x62\x7a\xee\x88\xf7\xdf\xec\x07\x84\x43\xa4\xbd\x1f\x7d\x80\xed\xbf\x51\xfe\xba\x48\xcd\xe2\xee\xbb\xe3\x4d\x0e\x25\x17\x77\x9e\x35\xe0\x9c\x98\xce\x33\xb8\x81\xe4\x0f\x98\xef\xfd\xff\xfc\xfa\xdb\xf7\x93\x8b\x8f\x97\x73\x18\x62\xe7\xb2\x7a\xa6\x94\x54\x6f\xe1\x8b\x84\x0d\x57\xa6\x21\x65\x2e\xe1\x5e\xaa\x3b\x5d\x13\x8a\xc0\xb5\x4f\x0c\x02\x31\x60\x0a\x84\x4a\x56\x28\x86\xe4\x6e\x72\x28\xb0\xac\x63\xe1\xf4\x40\x82\xc3\x00\x4a\x94\xc1\x60\x4b\x7a\x75\xf2\xed\xd3\x4a\x2b\xba\x8a\xb8\x12\xa4\xcd\x3b\x22\x9e\x73\x24\x92\x68\x27\xb0\x67\x5d\x8c\x0a\x61\x09\x49\x69\xe0\x68\xc4\xae\xd1\x80\xc3\xd6\xd1\x2d\x2c\xd6\x44\xa3\x20\x15\xc2\xde\xd5\x8f\xd3\x65\x28\xcb\x12\x26\xf9\x03\xf4\x46\xb4\x98\x3c\xf2\xb2\x5c\x3c\x4f\xbc\x15\x5c\xe4\x23\x4f\xe3\xdc\xce\x7f\xd8\xfb\x74\xf9\xf9\x6c\x75\xd0\x47\x7f\x35\x62\x0b\xf8\xd2\x81\xf1\xf2\xe2\xf4\xe3\xa5\xe7\xf6\x7f\x5f\x24\x7c\x7f\xfe\xc5\xd2\xbd\x3f\xff\xf2\x02\x99\x97\xe6\x64\x05\x54\x9d\x9e\xd0\xea\xb7\x31\xbd\xad\xa6\x49\x7e\xd7\x5c\x78\x89\xd5\x1d\xe3\x0a\x92\x3a\x8e\x80\x90\xc2\x5b\x1b\x48\xef\xdc\x75\x3a\x06\x3b\x23\x18\x4f\x4f\xcf\xbf\x9e\xbc\xbf\x38\x4b\xaf\xae\x2f\x3f\x5f\x7d\x1b\x23\xa5\x83\x98\x86\x84\x82\xed\x9d\x69\xad\x64\x55\x1b\x48\x65\xc9\xd2\xd1\xc1\x16\x07\xc4\x2e\xfb\xac\x5b\x6c\x2e\x06\x0b\x96\x30\x0f\xdb\xc4\x73\xd2\xbb\xba\xe8\x3b\x41\x50\x03\x13\x4c\xff\x7b\xe5\x1c\xe9\x9a\x5b\xe5\x3c\x40\xfe\xb4\xa3\x9e\x80\x7e\x48\x5f\x8f\x8d\x08\x34\x43\x2a\x9f\xe5\x18\xd4\xc7\x74\x31\xaa\x1d\x40\x02\xa3\x49\x0e\x30\x33\xcd\xe4\xcf\x38\x30\x9e\xfb\xb0\xa5\x20\x44\x3a\x05\x4e\x1a\xc5\xf8\x26\xe2\xf9\xb3\xb7\x93\x20\x6f\x5f\x3b\xf6\x6d\xf0\x8d\xc7\x9a\xe3\x2c\xc1\x7a\x32\xc0\x6a\xd2\xde\xfe\x41\x8f\x76\x28\xfa\x5e\x33\x8f\xa0\x5e\x83\xbb\xcb\x25\xe4\x56\x7b\x03\x39\x37\x45\xb3\x3e\xa0\xb2\x5a\x7d\x44\xf3\xd5\x28\x24\xd5\x6a\x93\x8f\x44\x5c\x63\x29\x09\xb3\x32\x2c\xb6\x75\x81\x65\x09\x35\x51\x06\x64\xf6\xb7\xa5\xb6\xe5\x80\x1b\x52\x42\x92\x78\x59\x36\x8b\xf0\x04\x5a\x36\x8a\xe2\x6c\xe2\x75\x10\x9c\x39\x24\x24\x8c\xc4\xab\xe3\x6d\x9a\x49\xed\x5e\x07\x75\x14\xd0\x8e\x2b\x74\xd8\x08\xb6\x49\x22\x7d\xc4\x0d\xd3\xc6\xc8\x61\x93\x48\x12\x29\x92\x0d\x51\x9c\xac\x4b\x84\xab\x1f\xa7\x9d\x27\xda\x10\xd3\x68\x48\x12\xae\x93\x76\x61\x49\x74\xb3\xd6\x86\x9b\xc6\x0a\x7b\x6e\x49\x6c\xb7\xc4\x8c\x0b\x06\x44\x80\xd5\x96\x74\xae\xb8\xce\x59\x06\x30\x1a\xae\x52\x25\xa5\x71\x93\xd6\xdd\xdf\x17\xbc\x44\x30\xa8\xed\xa8\x9e\x10\xd9\xf8\x0d\x4d\x95\x67\x9e\x2c\xc9\x60\x3e\x25\x1d\xcd\xd2\xb0\x0b\x5b\xf5\x02\xef\x87\x90\xa5\x6e\xd0\x2f\x28\x31\x2f\x4b\x59\x06\x62\x78\x06\x6b\xcc\xb9\x70\x1b\xb6\x73\xe9\xf7\xa1\x54\xdf\x81\x54\xad\x07\x11\x55\xaf\x8e\x47\x55\xf3\xae\xef\xfe\xe3\x5f\x90\xe0\x6d\x11\xe1\xe8\x99\xf0\x8f\xd2\x32\xbd\x7e\x0d\xa6\xe0\x1a\xb4\x51\xbc\xd6\xae\x3c\x4a\xa2\x0d\xd4\xc4\x14\x76\x37\xad\xa5\x40\x61\x20\x53\xb2\x72\x97\xf6\xfc\x20\x5c\x90\x26\xf9\x58\xb4\xef\x04\x93\xe3\x27\xd0\xc8\x60\x5f\x3f\xad\x6e\x7e\x5b\xdd\xbe\xd9\x7b\x7a\xda\x5f\x86\xc8\xdc\x06\xe4\x6c\x66\x2d\x28\xd1\x42\x93\xda\x00\x24\x09\x3e\xd0\xb2\xd1\x7c\x13\xb9\x13\x30\x77\xf1\x5d\xa4\xbe\xab\x8a\xa6\x5a\xa3\x4a\x65\x96\xd2\x8a\xa5\x44\xe5\x3a\xbd\x97\xa9\xac\x8d\x5e\xc2\x31\x1c\xce\x21\x79\x20\x43\x48\x01\x20\x61\x30\x3f\xe9\x9e\x09\xe8\x1a\x29\xcf\x38\x8d\x0d\xcc\xf9\x6e\xb4\x0f\xdb\xb1\xd7\xfe\xa1\x20\x22\x47\x17\x68\xab\xca\x96\x3b\xe3\x0a\xa9\x91\xea\x11\x8c\xf4\xdd\x4b\xd1\xd1\xa1\xcc\xdc\x61\x3b\xbc\x77\x6d\xdf\xd0\x97\xbd\x7d\xa7\xc3\xb3\xd5\x4a\x1b\xa5\x2c\x3a\x7e\x5d\x80\x18\x6a\xa3\xe4\x23\x74\xe9\xb9\xc6\x4a\x6e\x50\x83\x14\x68\xeb\xa9\x6a\x4a\xc3\xeb\x72\xe4\x38\xd8\x77\x29\x52\x96\xd6\x3e\xae\x80\x4a\x61\x50\x18\xbd\x23\x73\x50\xe8\x46\x21\xf4\xe6\x9c\xc0\xbd\x22\x75\x8d\x0a\x32\xa9\x80\x61\x0d\xa6\x20\x06\xb8\xd0\x86\x94\xa5\x2f\x27\x86\x35\x0a\x86\x82\x72\xd4\xc0\x85\x3b\x8b\xae\x60\x42\x1b\x24\xcc\x8d\x24\x14\x4c\xaa\x5d\xd9\x6c\x07\x15\x0c\x36\x9f\x3d\xd4\x52\xfb\xfc\x69\xaa\x78\x6d\xbc\xcd\xba\x90\x4d\xc9\x60\x8d\x8e\x21\x41\xd6\xd9\xda\x25\xd9\x4d\xba\x1d\xd9\xe4\x76\xc9\x91\x4d\x9f\xec\x33\x59\xcb\xc6\x00\x11\x8f\xdd\x3b\xf1\x8e\x94\xb9\xef\x0b\x23\x65\x1f\x14\xba\x02\x17\x0c\x50\xb8\x49\x47\x26\xf8\xb1\x2f\xd1\xc0\x4d\x57\x71\x5d\x04\xfa\xaa\xdb\x91\x61\x4e\xcd\xc8\xb0\x0b\xfb\xfc\x93\xba\xea\x6c\x72\x4d\x7b\xf7\x06\x69\x13\x1a\xa4\x8d\x2b\x26\x7c\xe0\xda\x2d\x1f\xbd\x1d\xbb\xaa\x28\x8d\xa6\xa9\xc7\xe8\x74\x19\xd1\x23\xd7\xb9\x80\x47\xd9\xa8\x9d\xe2\xaf\xdd\x67\x7a\xad\x5f\x0b\x79\x0f\x5c\x64\xb2\x05\xa1\x53\xd8\x65\x61\xd7\x3d\xad\x11\x6d\x7f\x68\x95\x7f\xef\x9f\x09\xb4\xe3\x60\x98\xb7\xbf\xa8\xb1\x37\x62\x00\x9f\xb7\xc1\x3e\xeb\x38\xdc\x07\x6b\x46\xdd\xca\xec\x6b\x07\x60\x64\x60\xe4\xae\xac\xf2\x6f\x16\x83\x55\xed\x73\xd8\x32\xd7\x5c\x10\xf5\xe8\x0a\x55\xb9\xbd\xde\x96\x6a\xbc\x59\x8d\xb7\x5d\x67\x86\x7d\x7d\xd1\x5c\xe4\x69\xdb\x62\xfa\xed\x93\x56\x0c\x16\xed\x61\xc9\x05\x42\x22\x6b\xba\x8c\x7c\x29\xa2\x15\x5b\x42\x92\x1b\x38\x1c\x6d\xe9\x8e\xa2\xfb\xe4\x09\xc7\x8e\xea\xe6\xe8\x76\x44\x31\x6c\x61\xf0\x9f\xe8\x4b\xfe\x0c\xc6\xef\xd2\x91\x55\x3d\x47\x93\x06\xdf\xd2\xdc\x56\x1d\xfb\x64\x02\x49\x45\x1e\x18\xd6\xa6\x80\xff\x42\x52\x71\xd1\xfd\xff\x09\x14\x6e\xe0\x09\x68\x63\x20\x61\xf3\xd5\x1c\x92\x2c\x69\x8f\xbd\xca\x48\x1a\x9f\x89\x5c\xbf\x39\xf9\xd4\xcd\x17\xee\xe3\xa3\x36\xcb\x28\x16\x9e\x13\xd2\xce\xf7\x6d\x19\xe0\x3f\x8d\xfe\x55\x39\x7d\x4d\x79\x49\xfb\x8b\xad\x90\x2d\xf7\x67\x7f\x06\x00\x00\xff\xff\x98\x28\x04\xb6\x1a\x17\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 5914, mode: os.FileMode(420), modTime: time.Unix(1496584146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xe2\x38\x10\x7e\xcf\x5f\x31\xeb\x8d\xb4\x74\x25\x1a\x71\x8f\x54\x48\x4b\x45\xd5\x45\xea\x16\x04\xdd\xbb\x87\x6a\x2f\x32\x89\x49\x2c\x12\x3b\xb2\x4d\x7a\xba\x65\xff\xf7\x93\x1d\x70\x7e\x19\xb8\xde\xe5\x05\x91\x99\xf9\xc6\xf3\xcd\x37\x9e\x7c\xfc\x10\x6c\x28\x0b\x64\xea\x79\x65\x32\xb8\x81\x9f\x1e\x00\x40\x84\x25\x01\xe4\x8f\x10\x50\x66\x5e\xe8\x87\x32\xaa\x6e\xec\x3f\xfd\x84\x61\x99\x84\xfa\x35\x20\xff\xe7\x97\xf1\x6f\xbf\x50\xcb\x7c\x77\x67\xff\xe2\x48\xd1\x12\x2b\xe2\x88\x3f\x99\xae\x62\xc4\xe4\x02\x4a\x6d\xbc\x8a\x13\xc5\x05\x8e\x76\x38\x21\xd2\x81\x53\x1b\xaf\xe2\xec\x8b\x44\xe0\xd8\x75\x98\xa3\xe5\x2a\xc2\xe7\x76\x6c\xc4\xf3\x1c\xb3\x18\xca\x04\xfc\x2f\xc6\x42\x24\x8e\x3c\xef\x97\xe7\x59\xa6\x6d\x8b\xca\xc4\x92\x7a\xf2\x2e\x13\xc8\x28\xdb\x59\xff\xba\x16\x1b\x45\xb7\xf0\x0a\xc3\xbf\x01\xf9\xbf\xcf\x57\x2f\xdf\xa7\x4f\x8f\x0b\x04\x3f\xee\x40\xa5\xa4\x6e\x34\x89\x52\x0e\x0f\x42\x70\x31\x86\x67\x0e\x25\x15\x6a\x8f\xb3\x84\xc3\x1b\x17\x3b\x59\xe0\x88\x00\x95\x55\x76\x02\x58\xe9\x60\xc8\x79\x4e\x98\xb2\x10\x65\x02\x29\xc9\x8a\x06\xd7\xd6\x24\x88\xda\x0b\x06\x23\xf3\x62\x4b\x2b\xbd\xc5\x50\x1f\x28\x5c\x4e\x5f\xbe\x06\x52\x44\x81\xae\xc4\x6b\x89\xa4\x53\x08\xbb\x5c\x48\x99\x34\x44\x73\xca\x57\x11\xfb\x57\xc1\x85\x02\x1b\x3b\xf1\x47\xef\xe0\xa7\x17\x3c\xd8\x60\x49\x18\xce\x09\xf8\xcb\x3f\x66\x37\xed\x54\x9a\xcd\x69\x75\x08\xca\x92\x46\xa1\xee\xa3\x98\xf2\x27\xfe\xd7\xc5\xb7\x87\xe0\xd6\x72\x1f\x9c\x09\x0b\xeb\xb8\xc5\xd3\x6c\xb9\x1e\x4d\xfc\xe5\x7a\x74\xde\xe3\x71\x51\xc1\x57\xbf\x97\xfc\xee\xe7\xcf\xda\xed\x7e\xfe\x7c\x21\x9f\xc1\x32\x48\x4d\xa7\x53\x92\x76\x4d\x63\x47\xd2\x63\x9a\x4e\xef\x37\xc7\x5b\xe7\xe8\x64\xc0\x50\x75\x96\xb1\xc9\x86\xce\x35\x2b\x9c\xcd\xd7\xd3\xfb\xa7\x87\x70\xb9\x5a\x7c\x5b\xbe\x9c\xed\x9d\x26\x0a\x0d\xea\xb8\x1b\xd0\xb4\xa1\x56\xe3\xf2\x5d\x4c\x05\x0c\x0b\xb7\x34\xdb\x1e\x15\x4f\xa7\xc1\xab\x45\xf7\xbf\x06\xef\x3f\x4d\x5c\x47\xf0\xae\x89\xab\x65\x39\x3b\x39\x5f\x10\xa6\xd1\x54\x4f\x66\x8e\x26\x3a\x04\xe4\x12\x85\x4b\x8f\xbd\x6e\x77\x13\x5a\x85\xed\x99\x24\x8d\x61\xe9\xeb\xdf\xa1\x50\x97\xb4\x9d\x63\xd1\x19\x42\xdb\x4f\xbc\x57\xbc\x7f\x05\x9d\xa8\xe3\x2c\x14\x9c\xab\x89\x1e\x7d\x63\x78\x4b\x69\x46\xe0\x15\x90\xdf\x71\x41\xf0\x61\x02\xc8\xf4\x3d\xe6\xf5\x5e\x35\xd2\xd8\xf6\xdd\x1b\xe3\xdf\xd7\x8a\x7e\x18\x79\x0b\xad\x4b\xa8\xef\x9f\x89\x3f\x88\xb0\xba\x0c\xd5\x5e\x3a\x26\x3b\x42\x30\x69\x4b\x73\xc8\x01\xf9\x7d\xfc\xaa\x82\x4b\x1a\x6e\xe8\xb1\xde\x4f\x7d\xa0\x96\xff\x71\x0b\xb4\xf5\xea\x39\xac\x1f\x41\xa5\x54\x82\x54\x82\x16\xd2\x4c\x41\x86\xa5\x82\x02\xab\x54\x6f\xcf\x82\x33\xc2\x14\x6c\x05\xcf\x8d\x51\xbf\xbf\xed\x7e\x83\xd4\xfd\x1a\x98\x19\xe8\x52\x05\x07\x90\x24\x86\x4f\xf2\x10\xbc\xfe\x19\xfc\xf8\xec\x1f\x0e\x9f\x2a\xca\x62\xce\x88\xd5\xc4\x71\xc7\x5b\x35\xf0\x2c\xae\x4b\x6c\xdc\x68\xff\x7e\x5b\x75\xae\x8e\xfe\xb4\x7e\x2f\xe2\x6a\x52\x6d\x1e\x63\x4b\x38\x24\x44\xc1\x70\x0f\x09\x55\xe9\x7e\x73\x1b\xf1\x3c\x78\x24\x6a\xad\x04\xc1\x79\x50\x26\x0d\x88\x15\xc9\x38\x8e\x35\x86\xe6\x47\xa6\x24\xcb\xa0\xc0\x42\x01\xdf\xbe\x1b\xd5\x9e\x59\x18\x50\xaf\x53\x69\x8b\x10\x04\x43\xdc\xae\xde\xe8\xa8\xe3\xe3\xbc\x0f\x57\xad\x3b\xaa\x15\xe1\x39\xc5\xd6\x77\xd9\xd2\xc6\x97\x44\x73\x96\xbd\x7f\x02\x00\x00\xff\xff\x4e\x6d\xa0\x82\xff\x0a\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 2815, mode: os.FileMode(420), modTime: time.Unix(1496584081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x42\x0f\xbd\x16\x0a\xa5\x98\x89\x34\xb6\x45\x14\x49\x68\x46\x4e\xb3\x4b\xde\xbd\x58\x89\x93\xc8\x0d\xf4\x16\x3e\x8d\xfe\x99\xd1\xff\xc7\x4f\xef\x5e\xb6\xd6\xbf\xbc\xf2\xd0\x34\x6d\x3b\xf6\x6d\x22\x17\xd0\xac\xd6\xf0\xd6\x00\x00\xd0\x88\x0e\xd4\xf3\x6a\xec\xcf\x3f\x37\x1b\x1e\xc8\x39\x78\xe5\x61\xad\x9a\x53\xd3\xe8\x21\x1e\x4c\xdb\x65\xaf\xc5\x06\xcf\x1f\x56\xcf\x6f\x0b\xf4\xeb\xe3\xef\x13\xa8\x22\x8e\x59\x42\x8b\x5a\xec\x88\x42\x6a\x7d\x69\xa9\xc3\x3e\x3a\x2a\xb5\xd7\xbe\x13\x43\x63\x60\x2e\xae\xa0\x36\x11\xf5\x0e\x7b\xe2\x0a\x1b\x7a\x58\x6d\x88\x25\x85\x63\xc5\xc8\x73\x4e\x75\xd9\xb4\x5e\x05\x06\x72\xb1\x02\xd6\x5b\xa9\x80\xb3\x7e\xb7\x00\x5c\x57\x30\x49\xae\x45\x58\x50\x72\x3d\x77\xf6\xd6\xb3\xa0\x73\x0b\xfa\x8f\x7c\x8e\x7d\x42\x73\x1e\xfb\xe9\x4a\x37\x3f\x41\x7d\xba\x2c\x0e\x08\x1c\x49\xdb\xce\x6a\x18\x6d\x92\x8c\xae\x0f\x70\x08\x69\xc7\x11\x35\xa9\xfa\x3d\x6b\x8d\x2f\xd7\xe7\x03\x19\x08\x74\x4e\x89\xbc\x3c\x96\x59\x3c\xf5\x62\x18\x38\x24\x8c\x91\x12\x74\x21\x81\xa1\x08\x32\xa0\xc0\x65\x49\x2e\xea\x86\x22\x79\x43\x5e\x5b\x62\xb0\xbe\xb0\x07\x9d\xca\x25\x42\x03\xa1\x83\x91\xbc\x09\x49\xdd\x7b\x57\xf7\xfd\xfa\x27\x06\x3e\x0f\xcf\x3a\xd9\x28\xe7\xbe\x3c\x84\xec\x0c\x6c\xa9\x58\xbc\x21\x33\xf7\x9b\x37\x2c\x89\x56\xb7\x00\xd4\xaa\xdf\xc8\x45\xc0\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xb7\x78\xd4\xe5\x9f\x13\x15\x1f\xfc\x14\x32\xdc\xba\xc9\x92\xdb\x3a\x13\x9e\x6c\x05\x2b\x20\xa1\x9a\xc2\xd8\x44\x5a\x42\x3a\xaa\x5b\xd0\x6a\xe9\xef\xd3\xc5\xff\x58\x33\xab\xca\x60\xf9\x5e\xf2\x9a\xa5\x5a\xf2\x47\x09\x19\x3f\x1e\x04\xba\x14\xf6\xe5\xe8\xce\x0f\x79\xcf\x45\x8c\x0c\x48\x50\x73\x4a\xcb\x97\x20\xec\xa3\xa1\x0e\x96\xff\x69\x18\xfb\xe6\x6f\x00\x00\x00\xff\xff\x44\x56\x6e\x3a\x67\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1127, mode: os.FileMode(420), modTime: time.Unix(1496583888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

