// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\xdf\x9f\x62\xea\x06\xb0\xbd\x80\xe2\x6b\xee\xbf\x5d\xe4\x80\x74\x13\xb4\x05\xba\x4d\x90\xb6\xb7\x38\x14\x59\x81\x26\xc7\x32\x11\x8a\xd4\x92\x94\x13\x1f\xf2\xe1\x0f\x24\xf5\xa0\x24\xa6\xdb\x62\xdd\x13\x50\xa4\x22\xe7\xc5\x99\xdf\x3c\x28\xbf\x7c\xb1\xde\x70\xb9\xde\x72\xb3\x5b\xcf\x66\xdb\x5a\x52\xcb\x95\x84\x7d\x31\x03\x00\xe0\x5b\x90\xca\x02\x55\xb5\xb4\x70\x42\x74\xb1\x87\x7f\xc1\x9a\xe1\x7e\x2d\x6b\x21\x3c\x89\x7b\xa8\x2a\x4b\x22\x59\xcb\xe5\x1e\x8d\xb6\xd6\xd2\xbf\xa2\x64\xfe\xef\x4b\x40\xba\x53\x41\xcc\x97\x57\x77\x7e\xcd\x3c\x70\x4b\x77\xc3\x35\x2f\x91\x18\x04\x2e\xb9\xed\x56\xdc\x93\xef\x8b\xdc\x2d\xb6\xf4\xa7\xa7\xd9\x98\x87\x50\xcb\xf7\xc4\xe2\x84\xaf\xdd\xf8\x0a\x2f\xc3\x67\xb9\x13\x5b\x9e\x85\xb2\x8a\xd0\x7b\x52\xa0\x99\xb0\x24\xb6\x3c\x4b\x21\xd4\x86\x88\xab\x47\xa4\x13\x96\x7e\xeb\x2b\x56\xd6\x55\xa1\x09\x9b\x9a\x38\x5e\xf7\xc4\x8b\x9f\x16\x03\xc2\x3e\x52\x41\x43\x17\x20\xf7\x2f\x8a\x7f\xeb\xe9\x59\xda\x7d\x7e\x79\x5f\x80\xe0\xf2\x3e\xb0\x0e\x38\x47\x47\xe7\x5b\xf8\x02\xd9\x7f\x61\x7e\xf2\xef\x77\xb7\x9f\x3e\x5f\xbc\x7f\x73\x3d\x87\xfe\x54\x1e\x15\x57\x5a\x2b\xfd\x33\x7c\x50\xb0\xe7\xda\xd6\x44\x14\x0a\x1e\x94\xbe\x37\x15\xa1\x08\xdc\x84\xc0\x22\x10\x0b\x76\x87\x50\xaa\x12\x65\x0f\x8e\x7d\x01\x3b\x14\x55\x2a\x1c\x01\x88\xf0\x6a\x00\x45\xca\xa0\xb7\x25\xbf\xb9\xf8\xf4\x76\x6d\x34\x5d\x27\x8e\x32\x08\x7b\x38\x88\x7c\xee\x20\x09\xa0\x78\x81\x1d\xeb\x32\x4a\xa4\x15\x64\xc2\xc2\x59\xc4\x6e\xd0\x82\x8f\xfa\xd9\x1d\x2c\x37\xc4\xa0\x24\x25\xc2\xc9\xcd\xef\x97\xab\xa1\x2c\x47\xd8\xfb\x66\xb9\x2f\x7c\xa6\x7c\x44\x6b\xb9\x2c\x4c\x03\x9d\x33\x0f\x9d\x55\xcf\x91\x15\x8f\xd0\x99\xdd\x12\x05\xed\x3e\x02\x17\xc1\x6e\x2e\x8b\xc8\x37\x69\x6e\xef\x31\x38\x79\x7b\xfd\xdb\xd5\xfa\xb4\x8b\xd7\x3a\x62\x1b\xf0\xe5\x3d\xe3\xf5\xfb\xcb\x37\xd7\x81\x3b\xfc\x1d\xf9\xf5\xcd\xf5\xeb\x77\x1f\xe6\x23\xa7\xa4\x64\xbc\x7e\xf7\x01\x02\x75\x38\x81\x30\xf8\x6d\x3c\x29\x63\x5c\x09\x9c\xba\x78\x2a\x22\x18\xee\xcd\xee\xa8\x42\xce\xe6\x5b\x22\xc4\x86\xd0\x7b\x1f\x8e\x3f\x6b\xd4\x87\x36\x1e\xab\x08\x00\x27\x63\xea\x73\xb0\xba\xc6\xc4\x79\x5b\x2f\x0d\x7d\xfe\x73\xec\xb5\xe4\x99\xd3\x7c\xe9\xc3\x35\x1e\x19\x25\x82\xf3\x85\x27\x2b\xef\x19\xd7\x90\x55\xe9\x54\x19\x52\x84\x48\x0c\xa4\xb7\x51\xf6\x3a\x7a\x9f\x25\x8a\x41\x7e\xf9\xee\xe3\xc5\xeb\xf7\x57\xf9\xcd\xed\xf5\x6f\x37\x9f\xe2\xf0\xb7\xb9\x68\x20\xa3\xe0\x9a\x54\x5e\x69\x55\x56\x16\x72\x25\x58\x1e\x2d\x4c\x38\x20\xb5\xd9\x81\xdd\x81\x6d\xd9\x5b\xb0\x82\xf9\xb0\x9e\x3e\x27\xbd\x2d\x20\x5d\xc9\x1c\x14\x8b\x51\xf2\xff\xff\xea\x5e\xa2\x3d\x4d\xea\x5e\x9f\xe9\x97\x2d\xf5\x28\xd7\xfb\xf0\x75\xd8\x48\xa4\xd0\x90\x2a\x44\x39\x95\x54\x31\x5d\x8a\xea\x08\x90\xc0\x64\x90\x07\x98\x19\x47\xf2\xaf\x38\x30\x1d\xfb\x61\xee\x20\x24\x0a\x24\x42\x22\xe7\x9a\x9d\xc4\xc9\x9f\xdd\x1d\x39\x79\xba\xed\xd9\xa7\xe0\x8b\xfb\xbf\xe7\x14\xe0\x4e\xd2\xc3\x6a\x54\xd5\xff\x46\x33\xf3\x28\xfa\x5c\xb1\x80\xa0\x4e\x83\xdf\x2b\x14\x14\x4e\x7b\x0d\x05\xb7\xbb\x7a\x73\x4a\x55\xb9\x7e\x83\xf6\xa3\xd5\x48\xca\xf5\xbe\x88\x44\xdc\xa2\x50\x84\x39\x19\x0e\xdb\x66\x87\x42\x40\x45\xb4\x05\xb5\xfd\x6e\xa9\x4d\x3a\xe0\x9e\x08\xc8\xb2\x20\xcb\x45\x11\x9e\xc0\xa8\x5a\x53\x9c\x8d\x4e\x3d\x70\xce\x1c\x32\x32\xf4\xc4\x8b\xf3\x29\xcd\x28\x77\x6f\x07\x79\x34\xa0\x8d\x33\xb4\x1f\x9d\xa6\x24\xe9\x3a\x32\x1a\x11\xbf\x61\x76\x88\x6b\xc9\x7f\x54\x0d\x66\xa7\x6a\xc1\xc0\x54\x48\xf9\xf6\x00\xa4\x1b\xfc\xec\x8e\xd8\x76\x77\x83\x80\x8f\x48\x6b\x8b\x6c\x52\x51\x12\x53\x6a\xba\xa2\xfc\x68\xa8\xb9\x78\xc6\x13\xcd\x51\xc3\xf8\xfd\xd1\xf1\x33\x61\x6d\x55\x3f\x10\x67\x99\x92\xd9\x9e\x68\x4e\x36\x02\xe1\xe6\xf7\xcb\xd6\x40\x63\x89\xad\x0d\x64\x19\x37\x59\xe3\xfe\xcc\xd4\x1b\x63\xb9\xad\x9d\xb0\xe7\xee\x4a\xcd\x65\x69\xcb\x25\x03\x22\xc1\x69\xcb\x5a\xa0\xf9\xbe\x26\x06\x49\xde\x6f\xe5\x5a\x29\xeb\x07\x46\xbf\xff\xb0\xe3\x02\xc1\xa2\x71\xa8\x19\x11\x39\xb7\xf4\x2d\x8f\x6f\x03\x59\xb6\x85\xf9\x98\x34\x1a\xf0\x86\x3d\xd2\xa9\x97\xf8\xd0\xbb\x2c\xf7\xf3\xea\x92\x12\xfb\x75\x29\xab\x81\x18\xbe\x85\x0d\x16\x5c\xfa\x8b\xa6\x3f\xd2\x9f\x7d\x21\xfd\x05\x94\x6e\x4e\x90\x50\xf5\xe2\x3c\x02\xda\x2f\x5d\x6f\x8e\x9f\x41\x80\xa7\x22\x86\x83\xc1\x88\x3f\x0a\xcb\x78\xfb\x25\xd8\x1d\x37\x60\xac\xe6\x95\xf1\xc5\x4b\x10\x63\xa1\x22\x76\xe7\x32\xad\x52\x12\xa5\x85\xad\x56\xa5\xdf\x74\xeb\xa7\xc3\x39\x7f\x14\x8f\x65\x73\x35\x1e\x2d\x3f\x81\x41\x06\x0b\xf3\xb4\xfe\xf2\xc7\xfa\xee\xa7\x93\xa7\xa7\xc5\x6a\x88\xcc\x29\x20\x67\x33\x67\x81\x40\x07\x4d\xea\x1c\x90\x65\xf8\x48\x45\x6d\xf8\x3e\xb1\x27\x61\xee\xfd\xbb\xcc\x43\xcf\x93\x75\xb9\x41\x9d\xab\x6d\x4e\x4b\x96\x13\x5d\x98\xfc\x41\xe5\xaa\xb2\x66\x05\xe7\xf0\x6a\x0e\xd9\x23\xe9\x5d\x0a\x00\x19\x83\xf9\x45\xfb\x4e\x9a\x8a\xc3\x69\x6a\x9c\x99\x1f\x47\x7b\x7f\xc9\x0b\xda\x7f\xdd\x11\x59\xa0\x77\xb4\x53\xe5\x8a\x31\xe3\x1a\xa9\x55\xfa\x00\x56\x85\xde\xa2\x69\xb4\xa8\xb6\x7e\xb1\x19\xad\x8e\x6d\x5f\x5f\xca\x82\x7d\x97\xfd\xbb\xd3\x4a\x6b\xad\x1d\x3a\x7e\x9c\x83\x18\x1a\xab\xd5\x01\xda\xf0\xdc\x62\xa9\xf6\x68\x40\x49\x74\xf9\x54\xd6\xc2\xf2\x4a\x44\x07\x07\xd7\x19\x88\x10\xce\x3e\xae\x81\x2a\x69\x51\x5a\x73\x24\x73\x50\x9a\x5a\x23\x74\xe6\x5c\xc0\x83\x26\x55\x85\x1a\xb6\x4a\x03\xc3\x2a\x34\x25\x2e\x8d\x25\x42\x84\x74\x62\x58\xa1\x64\x28\x29\x47\x03\x5c\xfa\xb5\xe4\x80\x2c\x8d\x45\xc2\xfc\xc0\x80\x92\x29\x7d\x2c\x9b\x5d\xdb\x81\xde\xe6\xab\xc7\x4a\x99\x10\x3f\x43\x35\xaf\xec\xa4\x91\xee\x89\xc8\x90\xb5\xb6\xb6\x41\xf6\x73\xc8\x91\x6c\x8a\xbe\x0e\x35\x36\xf9\xde\x1d\x35\xf7\x40\x21\x0e\xb0\x54\xb5\x35\x9c\x61\x12\xe6\xab\x23\xd9\xe3\xe7\x84\xc8\x47\x6f\xdd\x3b\xd9\xa8\xda\x02\x91\x87\xd6\xa8\x23\x29\xf3\x9f\xfd\x22\x65\xbf\x6a\xf4\x05\x47\x32\x40\xe9\x3b\x2f\x19\xe1\x59\x70\x79\x0f\xdc\xb6\x15\xa0\x8d\x48\x57\x05\x8e\x64\x98\x57\x13\x19\xf6\xde\xbd\xff\x45\x9e\xb7\x36\xf9\x26\x72\x7c\x83\x8c\x1d\x1a\x64\xac\x4f\x6e\x7c\xe4\xc6\x8f\xaa\x9d\x1d\xc7\xca\x70\x83\xb6\xae\xe2\x6c\xf1\x11\x31\xd1\xd1\xb9\x84\x83\xaa\xf5\x51\xf3\xa1\x99\xaf\x3a\xad\x1f\x77\xea\x01\xb8\xdc\xaa\x06\x84\x5e\x61\x1b\x85\x63\xd7\xd8\x5a\x36\xf5\xaa\x51\xfe\xb9\x7b\x27\xd0\xb4\xa7\xbe\xff\xff\xa0\x46\x53\xcb\x1e\x7c\xc1\x06\xf7\x6e\xd2\x70\xef\xad\x89\xaa\xa7\x5d\x18\x0f\x60\x64\x60\xd5\xb1\xac\x0a\xf7\xd0\xde\xaa\xe6\x7d\x58\xc2\x37\x5c\x12\x7d\xf0\x89\xaa\xfd\x2d\xd0\xa5\x6a\xba\x78\xc6\xd3\xb7\x37\xc3\x5d\x76\x0d\x97\x45\xde\x94\x98\x6e\x1a\xa6\x25\x73\xf7\x24\xbf\x28\xb8\x44\xc8\x54\x45\x57\x89\x0f\xb0\xb4\x64\x2b\xc8\x0a\x0b\xaf\xa2\xcb\x40\xf8\x42\xd7\xfc\x12\x01\xe7\x9e\xea\xcb\xd9\x5d\x44\xd1\x4f\x85\xf0\x8f\xe4\x27\xa1\x19\xc4\xf7\xa4\xc4\xd5\xa1\x40\x9b\x0f\x3e\x51\xfb\x29\x3f\xf5\x81\x0d\xb2\x92\x3c\x32\xac\xec\x0e\xfe\x09\x59\xc9\x65\xf7\x7f\x7b\xa8\x10\x58\x33\x1b\x9a\xf3\x14\xf3\xf9\x39\x3c\x41\xa1\xb1\x82\x6c\x0f\x8b\x3f\x0a\xa5\x0a\x81\xa7\x85\x12\x44\x16\xa7\x4a\x17\xeb\xc5\x37\x2b\x3f\x8b\x94\x9f\x7d\xa7\xf2\xb4\x66\xef\x96\x04\xd4\x9e\x89\x6e\x37\x6d\x06\x78\xcd\x97\xfe\x77\x07\x63\xd3\x6d\xec\x39\x21\xcd\x4c\xf4\xb7\x64\x74\x39\x1f\xa4\x2c\x96\x93\x90\xae\x16\xb3\xff\x05\x00\x00\xff\xff\xa8\x82\x53\xd4\x51\x1b\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 6993, mode: os.FileMode(420), modTime: time.Unix(1500231111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\x63\x02\x03\x49\x90\x20\x0d\x90\xc6\x46\x9c\x6e\x18\x8a\x4e\xa0\xa5\xb3\x44\x58\x26\x35\x92\x52\xd2\x35\xfd\xdf\x07\x51\x16\xf5\x8b\xb6\xb3\x35\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xee\x23\xdf\xbf\xf3\x57\x94\xf9\x32\x71\x9c\x22\x1e\x8d\xe1\x87\x03\x00\x10\x12\x89\xe0\x7a\x53\x17\x28\xd3\x0b\xe5\x47\x19\x55\x63\xf3\xaf\xfc\x82\xa0\x88\x83\x72\x19\x5c\xef\xc7\xf9\xe9\x6f\x3f\xdd\x8e\xf9\xec\xcc\xfc\x25\xa1\xa2\x05\x51\x68\x89\xaf\x4d\x47\x31\x22\x3c\x80\xd2\x18\x8f\xe2\x84\x51\x46\xc2\x0d\x89\x51\x5a\x70\x1a\xe3\x51\x9c\x38\xe5\x2b\x92\x5e\x3f\x63\x68\xc1\x69\x8c\x47\x71\xf2\x2c\x16\x24\xb2\x25\xb5\xb3\x1c\x45\xf8\xd8\x8d\x0d\xf9\x76\x4b\x58\x04\x45\x0c\xde\xb9\xb6\xa0\x24\xa1\xe3\xfc\x74\x1c\xd3\x31\xd3\xea\x22\x36\xcd\xa9\xbd\x8b\x18\x52\xca\x36\xc6\xbf\xa9\x89\x89\xa2\x6b\xf8\x0a\x93\x7f\xc0\xf5\x7e\xbf\x7d\x78\xfc\x72\x71\x77\x33\x77\xe1\xdb\x19\xa8\x04\x1b\xc2\x60\x98\x70\xb8\x16\x82\x8b\x53\xb8\xe7\x50\x50\xa1\x72\x92\xc6\x1c\x9e\xb8\xd8\xc8\x8c\x84\x08\x54\x56\xbb\x23\x10\x55\x06\xc3\x96\x6f\x91\x29\x03\x51\xc4\x90\x60\x9a\xb5\x7a\x66\x4c\x02\x55\x2e\x18\x4c\xf5\xc2\x9a\x56\xbc\x8d\xa0\x39\x50\xb0\xb8\x78\xfc\xe4\x4b\x11\xfa\x65\x26\x4e\x87\x6c\xbd\x44\xd8\xe1\x44\x8a\xb8\x45\xbe\x7a\xbf\xaa\xb0\xcf\x19\x17\x0a\x4c\xec\xcc\x1b\x15\xb1\x9e\x94\x25\x2a\x45\x59\x2c\xc1\x3b\x1f\xef\x7c\xcb\x72\x5c\x54\x28\x94\xc5\xad\x93\xda\xb1\xf4\xf9\x67\xde\xa7\xf9\xe7\x6b\xff\xc4\x14\xcf\xdf\x13\x16\x34\x71\xf3\xbb\xab\xc5\x72\x3a\xf3\x16\xcb\xe9\x7e\x8f\x9b\x79\x05\x5f\xfd\x1e\x40\xd2\x5e\xda\xa7\x57\xb0\x9b\xf9\xe5\xed\xbd\xa5\xeb\xf6\xdd\x2e\x6f\xef\x67\x55\x48\xb5\x57\x2a\xf1\x55\x21\xb6\x53\x97\x92\xd5\x69\x43\x35\x6d\xc1\x9a\xa4\xe9\x8a\x84\x9b\xaa\x0b\x7f\xe7\x28\xbe\xd7\x6d\x18\xb7\x4e\xef\x7a\x3d\x7f\x17\x66\xe0\x2a\x91\xe3\xde\x6c\xea\x6a\x75\x9b\x73\xda\xa9\x9e\x25\x23\x7b\x98\x8d\x41\xbb\x6c\x7b\xe4\xad\xf3\xdc\x39\x69\xb0\x5d\xe1\x4f\x75\x4f\xdc\x7d\xd3\x18\x5c\xdd\x2e\x2f\x2e\xef\xae\x83\xc5\xc3\xfc\xf3\xe2\x71\x6f\x62\x25\x51\xdc\x51\x13\x37\x86\x92\x36\x6e\xe7\x88\xdb\x4d\x44\x05\x4c\x32\xfb\x6c\x75\x3d\xaa\x0e\xd7\xca\xd1\x4c\xcd\x2f\x29\xc7\xff\x92\x8c\xde\xc4\xda\x24\xa3\x19\xcb\xab\xda\xf9\xc0\x60\xea\x99\x1a\x8c\x99\xa5\x89\x16\x1e\x3b\x16\x52\xd8\x98\x3d\xe8\x76\x7f\x43\x33\x87\x39\x93\xd8\x12\x8b\xe1\xfc\x5b\xe6\xd8\x36\x61\x56\x59\xe8\x89\x90\xe9\x27\xc9\x15\x1f\x6a\x68\x5d\x3a\xce\x02\xc1\xb9\x9a\x79\x8b\x3f\xae\xb4\xe1\x29\xa1\x29\xea\x81\xeb\xb9\xb8\xf0\x6e\x06\xae\xee\x7b\xc4\x9b\x07\x86\xa6\xc6\x7a\xe8\xde\x92\xbf\x21\x57\xca\x8f\xe1\x53\x60\x5c\x02\x46\xb6\x38\xf3\x46\x21\x51\x87\xa1\xba\xb7\x66\x25\x0d\x5a\x0a\xda\xd4\x9c\x70\x70\xbd\x21\x7e\x95\xc1\x21\x0e\xb7\xf8\xd8\x5c\xb0\x43\xa0\x8e\xff\xee\x1a\xeb\xf2\xd5\xb1\x58\xdf\x83\x4a\xa8\x04\xa9\x04\xcd\xa4\x9e\x82\x94\x48\x05\x19\x51\x49\x79\xfd\x67\x9c\x21\x53\xb0\x16\x7c\xab\x8d\xe5\xfa\x49\xff\x31\xd6\xf4\x6b\xa4\x67\xa0\x5f\x2a\x78\x01\x89\x11\x7c\x90\x2f\xfe\xd7\xbf\xfc\x6f\x1f\xbd\x97\x97\x0f\x55\xc9\x22\xce\xd0\x70\x62\xf7\x48\x31\x6c\xe0\x69\xd4\xa4\xd8\x52\xb4\xd7\x5f\xb7\x3d\xe9\x18\x4e\xeb\x97\x2c\xaa\x26\xd5\xec\x53\xdd\x02\x1c\x62\x54\x30\xc9\x21\xa6\x2a\xc9\x57\x27\x21\xdf\xfa\x37\xa8\x96\x4a\x20\xd9\xfa\x45\xdc\x82\x78\xc0\x94\x93\xa8\xc4\x28\xeb\x23\x13\x4c\x53\xc8\x88\x50\xc0\xd7\xff\x19\xd5\x9c\x59\x68\xd0\xfe\x3d\xd9\x29\x88\x0b\x13\xd2\xcd\x5e\xf3\xa8\xe7\x63\xd5\xc3\x87\x8e\x46\x75\x22\x1c\x2b\xd9\x86\x2e\x6b\x6a\xda\xd6\x3c\x50\x2d\xd2\x3c\x3d\x2c\xc9\x7f\xf2\x1c\x64\xc2\xf3\x34\x02\x99\x61\x48\xd7\xdf\x81\x98\x57\xa7\x4a\x88\xaa\xad\x2b\x04\x7c\xc6\x30\x57\x18\x0d\xf4\xb9\x39\xc0\x61\x7d\xde\xcb\xa7\x37\x22\x54\x41\xd2\xf2\xe1\xfb\xf6\x4d\x7b\x55\x2f\x6c\xc2\xea\xfc\x1b\x00\x00\xff\xff\x58\xdd\xce\x90\x95\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3477, mode: os.FileMode(420), modTime: time.Unix(1500231182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x85\x1e\x7a\x2d\x14\x4a\x09\x63\x69\x6c\x8b\x28\x92\xd0\x8c\x9c\xcd\x2e\xfb\xee\xc5\x4a\x9c\x44\x6e\xa0\xb7\xf0\x69\xf4\xcf\x8c\xfe\x3f\x7e\xf8\xf0\xd4\x5a\xff\xf4\xca\x43\xd3\x6c\xb7\x63\xbf\x4d\xe4\x02\x9a\xd5\x1a\xde\x1a\x00\x00\x1a\xd1\x81\x7a\x5c\x8d\xfd\xe9\xe7\x66\xc3\x03\x39\x07\xaf\x3c\xac\x55\xf3\xde\x34\x7a\x88\x07\xb3\xed\xb2\xd7\x62\x83\xe7\x4f\xab\xc7\xb7\x05\xfa\xfd\xf9\xcf\x3b\xa8\x22\x8e\x59\xc2\x16\xb5\xd8\x11\x85\xd4\xfa\xdc\x52\x87\x7d\x74\x54\x6a\x2f\x7d\x27\x86\xc6\xc0\x5c\x5c\x41\x6d\x22\xea\x1d\xf6\xc4\x15\x36\x74\xb7\xda\x10\x4b\x0a\xc7\x8a\x91\xe7\x9c\xea\xb2\x69\xbd\x0a\xf4\x2e\xb4\xe8\x9e\x5f\x48\x57\x78\x20\x17\x2b\x60\xbd\x95\x0a\x38\xeb\x77\x0b\xc0\x75\x05\x93\xe4\x5a\x84\x05\x25\xd7\xeb\x64\x6f\x3d\x0b\x3a\xb7\xa0\xff\xc8\xe7\xd8\x27\x34\xa7\x6d\x1e\x2e\x74\xf3\x0b\xd4\x97\xf3\x7b\x00\x02\x47\xd2\xb6\xb3\x1a\x46\x9b\x24\xa3\xeb\x03\x1c\x42\xda\x71\x44\x4d\xaa\x7e\xe6\x5a\xe3\xdb\xe5\x55\x41\x06\x02\x9d\x53\x22\x2f\xf7\x65\x16\x0e\x2c\x86\x81\x43\xc2\x18\x29\x41\x17\x12\x18\x8a\x20\x03\x0a\x9c\x97\xe4\xa2\x6e\x28\x92\x37\xe4\xb5\x25\x06\xeb\x0b\xbb\xd3\xa9\x5c\x22\x34\x10\x3a\x18\xc9\x9b\x90\xd4\xad\xa5\x75\xdf\xe7\x97\x18\xf8\x34\x3c\xeb\x64\xa3\x9c\xfa\xf2\x10\xb2\x33\xd0\x52\x71\x7e\x43\x66\xee\x37\x6f\x58\x82\xae\xae\xb9\xa8\x55\xbf\x93\x8b\x80\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xd7\x78\xd4\xe5\x5f\x13\x15\x1f\xfc\x94\x3d\x6c\xdd\x64\xc9\x75\x9d\x09\x4f\xb6\x82\x15\x90\x50\x4d\x61\x6c\x22\x2d\x21\x1d\xd5\x35\x68\xb5\xf4\x8f\xe9\xe2\x7f\xac\x99\x55\x65\xb0\x7c\x2b\x79\xc9\x52\x2d\xf9\xb3\x84\x8c\xef\x0f\x02\x5d\x0a\xfb\x72\x74\xe3\x87\x7c\xe4\x22\x46\x06\x24\xa8\x39\xa5\xe5\x03\x11\xf6\xd1\x50\x07\xcb\xbf\x3a\x8c\x7d\xf3\x37\x00\x00\xff\xff\x27\x7d\x68\x13\x7e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1496592103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

