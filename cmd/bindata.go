// Code generated by go-bindata.
// sources:
// data/fish
// data/sh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x4f\xe3\x3c\x10\xbe\xf7\x57\x0c\xa5\x52\x5b\x24\x37\x82\x23\x88\x57\x02\x15\x41\x25\xa0\x15\x2f\xbb\x1c\x50\x37\x72\x13\x27\xb1\x48\xec\xac\xed\xa4\xab\x55\x7f\xfc\xca\x4e\xf3\xe1\xd4\xed\x5e\xd6\x12\xaa\x98\x79\xe6\xcb\x33\xf3\x38\xe7\x67\xde\x86\x32\x2f\xa2\x32\xf1\x06\x83\xa8\x60\x81\xa2\x9c\x41\x19\x0f\x00\x00\x68\x04\x8c\x2b\x08\x78\xc1\x14\x8c\xb0\x88\x4b\xf8\x0f\xbc\x90\x94\x1e\x2b\xd2\xd4\x40\xf4\x09\x78\x96\x61\x16\xd6\x56\xfa\x08\xa2\x0a\xc1\xcc\xbf\x84\x85\xe6\xf7\x1c\x48\x90\xf0\xca\xcd\xe7\xe5\xda\xc8\xe4\x96\xaa\x20\xb1\x65\xc6\x23\x96\x04\x28\xa3\xaa\x91\xe8\xe3\x97\xb1\xaf\x85\x35\x7e\x36\x43\x7d\x1b\x1c\x28\x5a\x62\x45\x0e\xec\x6a\xc5\x09\xdb\x90\x1c\xb5\x76\xa8\x8c\xc9\xf8\x62\x6c\x61\xdb\x9b\xa8\xe2\x34\x17\xa0\xff\x3a\xf7\x5b\x57\x32\x70\xa7\x67\xc4\x65\x0c\x29\x65\x5f\x2e\x53\x2b\x19\x1a\xc1\x27\x20\x06\xc3\xd1\xf7\xc5\xdb\xfb\xb7\xbb\xe7\xc7\xe5\x10\xda\xd2\x1c\xe9\x1b\x8f\x8d\xe9\xa4\xd3\xde\x29\xa0\x54\xc1\x55\xc7\x5c\x12\x05\xe6\xc6\xae\xd6\x30\xd9\x60\x49\x18\xce\x08\x8c\x56\x1f\xf3\xa9\xed\x4b\x03\x51\xfc\x0b\x9a\x24\xf6\x37\x7d\xb5\x76\xab\xfd\xd5\xdd\xfb\x13\x8c\x9e\x96\x2f\x0f\xde\xac\xa4\x42\x15\x38\x8d\xb9\xd7\x16\x61\xbb\xf5\x5b\xc3\xe5\xf3\xfc\x71\x59\x59\x57\xbf\x27\x81\xf7\x8b\x57\x8d\xbb\x5f\xbc\x9e\x80\x55\xde\x8c\x2f\x0b\x55\xc7\xb1\xb3\xbe\x76\xc5\xdd\x47\xb2\x91\x7a\xb9\x2a\x8f\xd9\x57\x48\x05\xa0\xfc\x00\x21\x45\xe0\xf5\x10\x55\xb6\x96\xf7\xba\x5c\x13\xa3\xcd\xb3\xea\xfd\xef\x6e\xef\xfd\xf9\xe2\xff\xbb\xfb\xe7\x07\x7f\xf5\xb6\x7c\x59\xbd\x77\x47\xa1\x9e\x21\x09\x28\x00\xbd\xf2\x7e\x2e\x78\x96\x2b\xf0\x79\x1a\xfa\x1d\xc1\x81\x05\xb8\x94\xa6\xfd\x7a\xa5\xf5\xf0\x4d\xda\x0c\xa6\x30\xb4\x17\xe8\x98\xf7\x9a\x19\x9a\x05\xb1\x86\xbc\x37\xb4\x8e\x52\xbb\xb5\x99\x44\x1e\x84\xe0\xe2\x1a\x5e\x39\xc4\x1c\xb6\x5c\x7c\xc9\x1c\x07\x04\xa8\xac\x78\x81\x00\x56\xa0\x12\x02\x19\xcf\x08\x6b\xf3\x28\x63\x48\x48\x9a\xf7\xc8\x0b\x2e\x2d\xfa\x32\x9d\x68\xda\xec\x98\x32\x1b\x55\x35\xcc\x35\xb5\x5d\x9c\x0b\xf5\x0f\xba\x4b\x9c\xfd\xb2\xda\xdf\x6f\xca\xdf\x2c\x88\xbb\x8d\xf6\xfa\x93\x76\xbd\x9d\x42\xdf\xae\x9f\x38\xb6\xf0\xb8\xb6\x77\xc9\x87\x6a\x63\xde\x9b\x23\xc3\x96\x85\xe2\x2d\xc1\x22\xc4\x19\x2a\xb1\xa0\x78\x93\x12\x58\x7d\xcc\xeb\xab\x96\x0a\xab\x42\x02\x42\x54\xa2\x3d\x8f\x23\x59\x6c\xa4\xa2\xaa\xd0\xce\x8e\xbd\x6d\xfb\xc7\x2d\xa2\x2c\x04\xcc\x40\x47\x43\xfb\x68\xd5\xe6\xa4\xa4\xcd\x3a\x85\x56\xe5\x0b\xce\x95\xa1\x52\xa3\xdf\x26\x34\x25\xa0\x88\xd4\x5c\xdc\x03\x9d\xdd\xc2\xb0\x5d\x2a\x1a\x55\x30\x14\xc1\xb0\x0f\xed\x70\xa9\xbd\x85\x3a\x3c\x23\x5b\xbf\x51\xfb\x86\xc9\x27\x01\x56\xa7\xbd\x4c\x2d\x37\x34\x82\x0d\x89\x29\x33\x1f\x06\xa6\xa4\x9f\x6d\x7f\x6f\x80\x8b\x7d\x05\x8e\x50\x67\xb7\x1d\xf2\xbb\x69\x16\xab\x7b\xca\x18\xda\x97\xf0\xd0\x85\x4d\x3d\x3d\xfb\x4e\x5b\xfa\xea\x73\x50\x09\x95\x20\x95\xa0\xb9\x34\x0c\x90\x62\xa9\x20\xc7\x2a\xd1\x4f\x76\xce\x19\x61\x0a\x22\xc1\x33\xa3\xd4\xf2\x99\xfd\x02\xf6\xfa\x31\xd9\x7f\xca\xf4\xc4\x3b\x90\x24\x84\xb1\xdc\x79\x9f\x3f\xbc\xf5\xc5\x68\xb7\x1b\x4f\x6d\x86\x3b\x1c\xc8\xc1\x9f\x00\x00\x00\xff\xff\x17\xc9\xc5\xa7\x83\x09\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 2435, mode: os.FileMode(420), modTime: time.Unix(1496341460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4f\x6f\xfa\x38\x10\xbd\xe7\x53\x4c\xdd\x48\x85\x4a\x14\xb1\x47\xaa\x48\xa5\x0b\x6a\x91\x0a\x44\x6d\xb7\x3d\x54\xdd\xc8\x4d\x4c\x62\x95\xd8\x91\x6d\xc2\x6a\x4b\xbf\xfb\x4f\x76\xc8\xff\x00\xb9\x20\x7b\x66\xde\x78\xde\x3c\x8f\xb9\xbc\x18\x7e\x51\x36\x94\x91\x65\x59\x69\xd8\xeb\xc3\x8f\x05\x00\xe0\x63\x49\x00\xd9\x23\x04\x94\x99\x0d\xfd\x51\x46\x55\xbf\x58\xe9\xcf\x4b\x43\x4f\xef\x02\xb2\x7f\xee\xc6\x7f\xfd\xa2\x9a\xf5\xf6\xb6\x58\x62\x5f\xd1\x14\x2b\xd2\x0e\xcf\x2d\x67\x21\x02\x72\x1c\xa4\xb4\x9d\x85\xb9\xae\x47\xfb\x3c\x8e\x31\x0b\x20\x0d\xc1\xbe\x33\x16\x22\xb1\x6f\x59\xbf\x96\x95\x17\x57\x90\x92\x86\x45\x1d\xb9\x73\x1a\xc2\x86\xb2\xef\xdc\x3d\x37\x17\x21\x74\x0d\x1f\x30\x60\x80\xec\xb7\xf9\xf3\xeb\x3f\x93\xa7\x87\x15\x82\xcf\x5b\x50\x11\x29\x79\x4d\xc3\x4a\x71\x66\x77\x4d\xad\xec\x2c\xff\x25\x5c\x28\x28\x62\x1d\x7b\x54\x81\xfd\xff\x34\x6c\x3b\xb8\xf7\x85\x25\x61\x38\x26\x60\xbb\xef\xd3\xfe\xc9\x54\x9e\x3b\x79\x7d\x74\xec\xc7\xd5\x62\x36\xbc\x49\xa9\x50\x5b\xbc\x09\xf9\xb0\x4c\x58\x0b\xf3\xca\xb8\xd5\xd3\xd4\x7d\x19\x39\xb6\xfb\x32\x3a\xee\xf1\xb0\xca\xe0\xb3\xdf\x53\x7e\xf7\xf3\xa5\x76\xbb\x9f\x2f\x4f\xe4\x33\x58\x06\xa9\xea\x94\x27\xa9\xd7\x34\xee\x48\x7a\x48\x53\x77\xd4\x17\xa3\xea\x64\xc0\x50\x76\x96\xb1\xc9\x86\x8e\x35\xc3\x9b\xce\x5f\x26\xf7\x4f\x33\xcf\x7d\x5e\x2d\xdc\xd7\xa3\xbd\xd1\x44\xa1\x5e\x19\xd7\x07\x4d\x1b\xaa\x35\x26\xfe\x0e\xa8\x80\x41\x02\xcd\xe3\x49\xe1\x0f\x1b\x1e\x19\x4f\x07\x31\x96\x9a\x6a\xc8\xf1\x9c\x6e\xfc\x88\xc3\x4c\x08\x2e\xc6\xb0\xe4\x10\x72\xd8\x71\xf1\x2d\x13\xec\x13\xa0\x32\xbb\x02\x04\xb0\xd2\x51\x10\xf3\x98\x30\x55\x95\x72\x44\x36\x49\xb1\x16\x44\x6d\x05\x83\x51\x5e\x51\xa3\x76\xbb\xa5\x9b\x8e\xae\x74\x28\xa2\xab\xcb\x5d\x02\x6b\xb5\xaf\x99\xb0\x90\xcc\x96\x49\x52\x51\x7f\x5b\xd0\x1d\x92\xeb\xd2\x6a\xa7\xce\x1b\xb7\xca\x34\xc8\x7d\x9e\xbd\x55\x7c\xdd\xf7\xa9\x83\x50\x7b\xdb\xe8\xc7\xfb\x7b\xb5\x58\x4c\x96\x53\xc7\xae\xaf\x2d\x4f\xf7\x39\x11\x3c\x4e\x94\x77\x98\x64\x45\xaf\x2f\x61\x4d\x59\x00\x98\x01\xde\x2a\x3e\x38\x68\x81\x72\x06\x6b\xba\x21\xa5\x1c\x10\x82\x0b\x07\x90\x7d\x3a\x75\x5b\x26\x67\x02\x6a\x1a\xce\x12\xe9\xa1\x83\xa0\x33\xd7\x7b\x47\x82\x4c\x3b\x55\xe5\x74\x92\x66\x50\xb3\x34\x86\x0e\x5d\x6d\x31\x88\x35\xd5\x32\xe2\x89\x82\xc1\x16\x32\xa2\x52\x2c\xa4\x65\x35\x88\xed\x20\xd2\xb2\xda\x70\x05\xb9\x25\x9b\x9e\xe0\x5c\x39\xfa\x10\xc6\xb0\x8b\xe8\x86\x98\x62\x1b\x2e\x19\xcb\xa6\xca\x80\x97\x4f\xaa\xb9\x90\xeb\xb6\x7b\x65\xe6\xb6\x99\xd1\x1f\x23\x3b\xaf\x70\xf1\xf4\x50\x77\xec\x9e\x8f\xd5\x69\xa8\xfa\xe3\x97\xf7\xdf\xa9\x0f\x84\x01\x07\x64\xb7\xf1\x0f\x3a\x39\x31\x39\x2a\x53\xa0\x7c\x28\xdb\x40\x35\xff\x43\x6b\x3b\x9a\xde\xb0\x5e\x82\x8a\xa8\x04\xa9\x04\x4d\xa4\x99\x3d\x1b\x2c\x15\x24\x58\x45\xfa\x15\x4f\x38\x23\x4c\xc1\x5a\xf0\xd8\x18\xf5\xfe\x4d\xf3\xff\x47\xd9\xaf\x9e\x99\x72\x4d\xaa\x60\x0f\x92\x04\x70\x25\xf7\xc3\x8f\x7f\x87\x9f\xd7\xf6\x7e\x7f\x95\x51\x16\x70\x66\xc4\xe4\x47\xc9\x2e\xf0\xd6\x5b\xe6\xeb\x20\xe9\xf4\xec\x9f\xc6\xd6\xc7\xdd\xe7\x2f\xa0\xb6\x76\x50\xbf\x4b\x51\xd6\x9f\x00\x00\x00\xff\xff\xfd\xf6\xc9\x40\x81\x09\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 2433, mode: os.FileMode(420), modTime: time.Unix(1496337578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/fish": dataFish,
	"data/sh": dataSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

