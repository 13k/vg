// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x3a\x01\x62\x17\x60\x84\xe6\xb1\x45\x07\x24\x73\xd0\x04\x48\x63\xa3\x4b\xd7\x87\x20\x13\x68\xe9\x24\x11\x91\x49\x8d\xa4\xe4\x66\xc8\x87\x1f\x48\x59\x26\x29\x33\xee\x1e\x26\xc0\x30\x78\xff\xef\x7e\x77\x47\x9e\xbc\x4b\xd6\x8c\x27\x05\x53\x55\x32\x99\x14\x2d\xcf\x34\x13\x1c\xba\x72\x02\x00\xc0\x0a\xe0\x42\x43\x26\x5a\xae\xe1\x94\xca\xb2\x83\xdf\x20\xc9\xb1\x4b\x78\x5b\xd7\x56\xc4\x7c\x99\xd8\x6c\x28\xcf\x07\x2d\xf3\x49\xd4\xad\xe4\xf6\x88\x3c\xb7\xff\x27\x80\x59\x25\x7a\x33\x8f\x1f\x9e\x2c\x4d\x6d\x99\xce\xaa\x90\x66\x2d\x52\x85\xc0\x38\xd3\x7b\x8a\xf9\xd2\xae\x4c\x0d\x71\x90\x3f\x3f\x27\x63\x1d\x9a\x69\xd6\x51\x8d\x07\x7a\x03\xe3\x88\x6e\x8e\x6f\x6a\x47\x58\x56\xe5\xec\xfd\x59\x20\xeb\x2a\xd1\xfb\xd9\x17\xc0\xfc\xbc\xfa\x0e\x99\x4c\xe2\xe1\x59\x72\x57\x42\xcd\xf8\x73\x4c\x35\x08\x86\x15\xf0\x08\x84\xc3\xf4\xf4\xcf\xdb\x6f\x0f\xdf\x2f\xef\xbe\x2c\xa7\xe0\x52\x8b\x84\x6f\x2d\xee\x55\x67\x1e\xbc\x73\x20\xb5\x86\x0b\x4f\x5d\xa1\x06\x5b\xb1\x8b\x27\x98\xad\xa9\x42\x4e\x37\x08\xa7\xab\x1f\x8b\x79\x68\xcb\x08\x92\xf2\x27\xec\x83\xd8\x55\xfa\xe2\x29\xce\x4e\x57\x97\x0f\x37\x70\x7a\xb3\xfc\x7a\x9d\x9c\x77\x4c\xea\x96\xd6\xa5\x48\x5c\x12\xa1\xd9\xd4\x29\x2e\xef\x16\x5f\x96\xbd\x76\xff\x7f\x54\xf0\xea\xf6\xde\xc8\x5d\xdd\xde\x1f\x11\xeb\xad\x59\x5b\x81\xd4\xe0\x27\x8c\xfa\x63\xcc\xef\xce\x53\x28\x69\x86\xab\xb7\xb8\x79\xce\x99\x04\xd2\x1c\x48\x28\x99\x25\x23\x89\x3e\xda\xc0\xfa\x90\xae\xf5\xe1\xe2\xec\xb1\xff\xc7\xc7\x3e\x5d\xdc\xfe\x71\x79\x75\x77\x9d\xae\xbe\x2d\xbf\xae\x1e\xfc\x56\x18\x7a\x48\x01\xc9\xc0\x8c\x7c\xda\x48\xb1\x69\x34\xa4\xa2\xce\x53\x8f\x70\xa0\x01\x31\xa6\x85\xdf\x8c\xb4\x69\xbe\x99\x8b\x60\x0e\xd3\x70\x80\xde\xb2\x3e\x6c\x86\xfd\x80\x04\x4d\x3e\x6a\xda\x48\xaa\x7e\x6e\x36\x90\x6b\x29\x85\xfc\x08\xf7\x02\x4a\x01\x5b\x21\x9f\x55\x43\x33\x04\xa6\xfa\xbd\x80\x40\x35\xe8\x0a\x61\x23\x36\xc8\x5d\x1c\x5d\x09\x15\xd6\xcd\x68\x79\xc1\x87\x60\x7d\x59\x24\xf6\x30\x47\xba\x2c\x94\xea\x01\x8b\x75\xad\x2f\x17\x93\xfa\x1f\xd0\xc5\x28\x5e\x01\xfc\x63\x50\x7e\xa5\x81\x71\x18\xc3\xf1\x47\x37\xde\x51\x62\x1a\xe6\x8f\x91\x29\x7c\x9b\x3b\x2a\xf2\x21\xdb\xaa\x8f\xfa\xc8\x6e\xcb\x56\x0b\xb7\x60\x09\x11\x9c\x74\x54\x32\xba\xae\x11\x56\x3f\x16\x43\xa9\x95\xa6\xba\x55\x40\x08\x53\x64\xb7\xc7\x89\x6a\xd7\x4a\x33\xdd\x1a\x63\x6f\xdd\x6d\xbb\xcb\xad\x60\x3c\x07\xca\xc1\x78\x23\x3b\x6f\xfd\xe4\xd4\xe8\xa2\xae\xc1\xb1\x52\x29\x84\xb6\xab\xd4\xf2\xb7\x15\xab\x11\x34\x2a\xb3\x8b\x47\x42\xef\x3e\xc3\xd4\x0d\x15\x2b\x7a\x31\x52\xc0\x74\x2c\xea\xed\xd2\x70\x0a\x8d\x7b\x8e\xdb\x74\xcf\x4e\xed\x26\x9f\x65\x54\x1f\xb7\x32\x0f\xcc\xb0\x02\xd6\x58\x32\x6e\x1f\x06\x36\xa5\xbf\x1d\xbe\x9f\x40\xc8\x5d\x06\x11\x57\xef\x3e\x7b\xcb\xef\xd3\x7e\xb0\xfc\xaf\x2b\xc1\xdd\x84\x87\x26\xc2\xd5\x33\xd2\xf7\x60\x19\xb3\x4f\x40\x57\x4c\x81\xd2\x92\x35\xca\x6e\x80\x9a\x2a\x0d\x0d\xd5\x95\xb9\xb2\x1b\xc1\x91\x6b\x28\xa4\xd8\x58\xa6\xa1\x9f\x87\x37\xe0\x08\x8f\xd9\xee\x29\x33\x22\xbf\x82\xc2\x1c\xce\xd4\x6b\xf2\xf8\x57\xf2\xf4\xfe\xf4\xf5\xf5\x6c\x1e\x6e\xb8\xc3\x86\x9c\x4c\x4c\x04\x35\x9a\xd6\xcc\x4c\x01\x08\xe1\x82\x98\xae\x51\x87\x2c\xea\xca\x03\x00\x24\x87\xe9\xe5\x70\xa6\xa0\x1a\xcc\x58\xc1\x32\xd8\x17\xcd\xed\xc0\x69\xc4\x94\x5b\xb0\xbd\xa9\x85\x3b\x9b\x2a\x64\xad\x94\xa6\x2c\xff\xd1\x1a\x72\xd5\x4a\xec\x4b\x66\x03\x83\xad\xa4\x4d\x83\x12\x0a\x21\x21\xc7\x06\x74\x45\x35\x30\xae\x34\xad\xeb\x1e\x85\x1c\x1b\xe4\x39\xf2\x8c\xa1\x02\xc6\x2d\x2d\xe2\xce\x2a\x21\xcd\x41\x14\xd0\x21\xcf\x85\x8c\x06\xd0\xd1\x7a\xc0\xcc\x04\x70\xfd\xb3\x11\xaa\x4f\x45\x65\x92\x35\xba\x0f\x40\x55\xa2\xad\x73\x58\xa3\x55\x20\x98\x0f\x8e\x87\x7c\x55\x85\x75\x1d\x73\x60\xee\x08\xdf\xc1\x8d\x39\xd3\xb5\x68\x35\x50\xfe\x32\xbc\xfd\x62\x9a\xf6\xd1\xea\x69\xfe\x2e\xd1\x42\xc6\x73\x40\x6e\xf7\x10\xf5\xb2\x35\x64\xf3\xf2\x03\xa6\x41\x8b\x20\xb6\x9c\x49\xcc\xb4\x90\x2f\x31\x2f\x56\xc7\xf3\x72\x67\xce\xbf\x40\x72\x70\x60\xe7\xe3\xa8\xf5\x96\x3b\xfb\xc6\xfa\x77\x7b\x56\xf1\xf0\xdc\x2c\x79\x20\xea\x33\x65\x63\xc4\x1c\xb4\x88\xb9\x50\xa8\xdb\xc6\x47\xd0\xd6\x46\x79\x71\x33\x0e\x2f\xa2\x95\x03\x46\xff\x06\x00\x00\xff\xff\xf2\xee\x29\xc2\xbe\x0c\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 3262, mode: os.FileMode(420), modTime: time.Unix(1496351315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\x32\x2b\xb8\x7b\x58\xf6\x09\x04\x45\x05\x0f\x5e\x05\x41\xa4\xc9\x24\xd5\xd3\x61\x33\x95\x90\xaa\xf4\xb8\x2e\xfb\xee\x92\x8c\x3d\x33\x69\x5a\xf6\xfa\x75\xd5\x5f\x55\xf9\xff\xbe\x79\xf3\xb0\xf3\xf4\xf0\x87\x27\xa5\xec\x94\x8e\x6e\x18\x0b\x59\xf1\x91\xf8\xfd\xed\xdb\xe7\x15\xfa\xf9\xe1\xd7\x0b\xe8\x61\x98\xf7\x83\x29\x12\x07\x63\xc5\xcf\x46\x50\xdf\x29\xd5\xa8\x8d\x87\x14\xb0\xd5\xde\xde\xc1\xb3\x02\x00\xa8\xcc\x38\x07\x4b\x71\x07\x1d\x6e\x62\x24\x2e\x79\x85\x66\x13\x3a\x30\x61\x48\x1d\xf0\xe4\xa5\x03\xc1\xd3\x63\x07\x18\xa5\xf4\x3d\x85\xce\x45\x37\x67\x78\xff\x03\xf4\xc7\x7f\x6b\x81\x01\x4e\x68\xfd\xe8\x2d\xcc\x3e\x4b\x31\x61\x1f\xe1\x18\xf3\x23\x27\x63\x51\xf7\x67\xf5\x1a\x9f\xcf\xc7\x81\x4c\x08\xb6\xe4\x8c\x24\xdb\x32\xab\x87\x58\x2d\x03\xc7\x6c\x52\xc2\x0c\x63\xcc\xe0\x30\x81\x4c\x46\xc0\x13\x8b\x09\x81\x9b\xba\xc3\x84\xe4\x90\xac\x47\x06\x4f\x8d\x6d\x4c\x6a\x4d\x68\x1c\xc4\x11\x66\x24\x17\xb3\xbe\x7e\xed\x7e\xee\x97\xdf\x29\xf2\x69\x79\xb6\xd9\x27\x39\xcd\xe5\x29\x96\xe0\x60\x87\xcd\x94\x7b\x74\xcb\xbc\xe5\x42\x9e\x30\x04\x7d\xb1\xac\x57\xfd\x8a\x21\x81\xd9\xc5\x22\x60\xe8\xa9\x7e\x3a\x18\x72\xfa\x62\x68\x5f\xfe\x29\x63\xf3\x81\x6a\x2c\xcc\x2e\x54\x4b\x2e\xe7\x54\x5c\x2d\x04\x2f\x20\xb1\xdb\xc2\xf9\x8c\x56\x62\x7e\xd2\x97\x68\xf4\xd2\xdf\x6a\xe3\x2b\xd6\x2c\xaa\x32\x79\xbe\x96\xfc\x4f\x6e\xbe\xb7\x40\xf1\xf6\x22\x30\xe6\x78\x68\x9f\xae\xfc\x90\x77\xdc\xc4\xd0\x81\x44\xbd\x24\x52\xbd\x28\x55\x75\x1d\x8e\xb0\xfe\xb5\x60\xde\xab\xbf\x01\x00\x00\xff\xff\x1c\x3c\xf2\x0a\xb9\x03\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 953, mode: os.FileMode(420), modTime: time.Unix(1496351323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

