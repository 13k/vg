// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x4f\xdc\x38\x10\x7f\xdf\x4f\x31\x5d\x90\x80\x4a\x66\x55\x1e\x5b\xf5\x24\x38\x50\x41\xa2\x80\x7a\xf4\xfa\x80\xb8\xc8\x9b\x4c\x12\x0b\xaf\x9d\xb3\x27\x01\x4e\x7c\xf8\x93\x9d\xcd\x3a\xce\x1a\xb8\x87\x8b\xb4\x5a\x79\x66\x7e\xf3\x7f\xc6\xde\xf9\xb0\x58\x0a\xb5\x28\x85\xad\x17\xb3\x59\xd9\xaa\x9c\x84\x56\xd0\x55\x33\x00\x00\x51\x82\xd2\x04\xb9\x6e\x15\xc1\x2e\x37\x55\x07\xbf\xc1\xa2\xc0\x6e\xa1\x5a\x29\xbd\x88\xfb\x72\xbd\x5a\x71\x55\x0c\x28\xf7\x19\xa4\xd6\x28\x7f\x44\x55\xf8\xff\x1d\xc0\xbc\xd6\xbd\x9a\xbb\x4f\xf7\x9e\x66\x1f\x05\xe5\x75\x4c\xf3\x1a\xb9\x45\x10\x4a\xd0\x86\xe2\xbe\xac\xab\x32\x47\x1c\xe4\x0f\x0f\xd9\x14\xc3\x73\x12\x1d\x27\xdc\xc2\x0d\x8c\x37\xb0\x05\xbe\x8a\x4e\xb0\x3c\x64\xef\xe3\x5e\x24\x1b\x32\xd1\xdb\xd9\x24\xc0\xfd\x46\xf9\x1d\x22\x99\xa5\xdd\xf3\xe4\xae\x02\x29\xd4\x43\x0a\x1a\x39\x23\x4a\xb8\x03\xa6\x60\xbe\xfb\xe7\xc5\x8f\xdb\x9f\xc7\x97\xdf\xae\xe7\x10\x42\x4b\xb8\xef\x35\x6e\xa0\xfb\xa3\xf2\x1e\x00\x93\x04\x47\x23\xb8\x45\x02\x9f\xb1\xa3\x7b\xd8\x5f\x72\x8b\x8a\xaf\x10\x76\x6f\x7e\x9d\x1e\xc4\xba\x9c\x20\xab\x9e\x60\xe3\xc4\x3a\xd3\x47\xf7\x69\x76\x76\x73\x7c\x7b\x0e\xbb\xe7\xd7\xdf\xcf\x16\x87\x9d\x30\xd4\x72\x59\xe9\x45\x08\x22\x56\x9b\x05\xe0\xf5\xe5\xe9\xb7\xeb\x1e\xdd\xff\xbf\x29\x78\x72\x71\xe5\xe4\x4e\x2e\xae\xde\x10\xeb\xb5\x79\x5d\x91\xd4\x60\x27\xf6\xfa\x73\xca\xee\xda\x52\x2c\xe9\x86\xab\xd7\xb8\x7a\x28\x84\x01\xd6\x6c\x49\x58\x93\x2f\x26\x12\xbd\xb7\x91\xf6\x21\x5c\x6f\x23\xf8\xd9\xd7\xfe\x9f\x71\xed\xb3\xd3\x8b\x3f\x8e\x4f\x2e\xcf\xb2\x9b\x1f\xd7\xdf\x6f\x6e\xc7\xad\x30\xf4\x90\x05\x96\x83\x1b\xf9\xac\x31\x7a\xd5\x10\x64\x5a\x16\xd9\x88\xb0\x85\x80\x14\xd3\x97\xdf\x8d\xb4\x6b\xbe\xfd\xe0\xc1\x01\xcc\xe3\x01\x7a\x4d\xfb\xb0\x19\x36\x03\x12\x35\xf9\xa4\x69\x13\xa1\x8e\x63\xf3\x8e\x9c\x19\xa3\xcd\x67\xb8\xd2\x50\x69\x78\xd4\xe6\xc1\x36\x3c\x47\x10\xb6\xdf\x0b\x08\x9c\x80\x6a\x84\x95\x5e\xa1\x0a\x7e\x74\x15\xd4\x28\x9b\xc9\xf2\x82\x4f\xd1\xfa\xf2\x95\xd8\x94\x39\xd1\x65\xb1\x54\x5f\xb0\x54\xd7\x8e\xe5\x52\x52\xff\x43\x75\x31\x59\xaf\xa8\xfc\xd3\xa2\xbc\x87\xc0\x74\x19\xe3\xf1\xc7\x30\xde\x49\x62\x16\xc7\x8f\x89\x29\x7c\x9d\x3b\x49\xf2\x36\xdb\xc3\x27\x7d\xe4\xb7\x65\x4b\x3a\x2c\x58\xc6\xb4\x62\x1d\x37\x82\x2f\x25\xc2\xcd\xaf\xd3\x21\xd5\x96\x38\xb5\x16\x18\x13\x96\xad\xf7\x38\xb3\xed\xd2\x92\xa0\xd6\x29\x7b\xed\x6e\x5b\x5f\x6e\xa5\x50\x05\x70\x05\xce\x1a\x5b\x5b\xeb\x27\x47\x62\xf0\x5a\x42\x60\x65\x46\x6b\xf2\xab\xd4\xf3\x1f\x6b\x21\x11\x08\xad\xdb\xc5\x13\xa1\x0f\x5f\x61\x1e\x86\x4a\x94\xbd\x18\x2b\x61\x3e\x15\x1d\xed\xd2\x78\x0a\x9d\x79\x85\x8f\xd9\x86\x9d\xf9\x4d\xbe\x9f\x73\x7a\x5b\xcb\x41\xa4\x46\x94\xb0\xc4\x4a\x28\xff\x30\xf0\x21\xfd\x1d\xea\xfb\x05\xb4\x59\x47\x90\x30\xf5\xe1\xeb\x68\xf9\x7d\xd9\x0c\xd6\xf8\xeb\x2a\x08\x37\xe1\xb6\x8a\x78\xf5\x4c\xf0\xa3\xb2\x4c\xd9\x3b\x40\xb5\xb0\x60\xc9\x88\xc6\xfa\x0d\x20\xb9\x25\x68\x38\xd5\xee\xca\x6e\xb4\x42\x45\x50\x1a\xbd\xf2\x4c\x47\x3f\x8c\x6f\xc0\x49\x3d\xf6\xd7\x4f\x99\x09\xf9\x05\x2c\x16\xb0\x67\x5f\x16\x77\x7f\x2d\xee\x3f\xee\xbe\xbc\xec\x1d\xc4\x1b\x6e\xbb\x21\x67\x33\xe7\x81\x44\xd7\x9a\xb9\x4b\x00\x63\x4a\x33\xd7\x35\x76\x9b\xc5\x43\x7a\x00\x80\x15\x30\x3f\x1e\xce\x1c\x6c\x83\xb9\x28\x45\x0e\x9b\xa4\x85\x1d\x38\x4f\xa8\x0a\x0b\xb6\x57\x75\x1a\xce\x2e\x0b\x79\x6b\x8c\x4b\xcb\x7f\xd4\x86\xca\xb6\x06\xfb\x94\x79\xc7\xe0\xd1\xf0\xa6\x41\x03\xa5\x36\x50\x60\x03\x54\x73\x02\xa1\x2c\x71\x29\xfb\x2a\x14\xd8\xa0\x2a\x50\xe5\x02\x2d\x08\xe5\x69\x09\x73\x1e\x84\xbc\x00\x5d\x42\x87\xaa\xd0\x26\xe9\x40\xc7\xe5\x50\x33\xe7\xc0\xd9\x53\xa3\x6d\x1f\x8a\xcd\x8d\x68\xa8\x77\xc0\xd6\xba\x95\x05\x2c\xd1\x03\x18\x16\x83\xe1\x21\x5e\x5b\xa3\x94\x29\x03\xee\x8e\x18\x1b\x38\x77\x67\xbe\xd4\x2d\x01\x57\xcf\xc3\xdb\x2f\x85\xf4\x8f\xd6\x11\xf2\x77\x83\xbe\x64\xaa\x00\x54\x7e\x0f\xf1\x51\xb4\x8e\xec\x5e\x7e\x20\x08\x48\x47\xbe\x15\xc2\x60\x4e\xda\x3c\xa7\xac\x78\xcc\xc8\xca\xa5\x3b\xbf\x53\xc9\xc1\x80\x9f\x8f\x77\xb4\x5b\x8a\xb5\x5b\x02\x2e\x25\xe0\x93\xb0\x24\x54\x15\x94\xda\x14\xbe\x55\xc1\x3f\x87\xff\xe9\xcf\x36\x1d\x5e\x98\xc5\x51\x13\xd0\x9e\xf5\x31\x62\x01\xa4\x53\x26\x2c\x52\xdb\x8c\x3b\xc0\xe7\xd6\x8e\xe2\x16\x0a\x9e\x75\x6b\x86\x1a\xff\x1b\x00\x00\xff\xff\xc8\xd6\x4c\x3f\xfe\x0c\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 3326, mode: os.FileMode(420), modTime: time.Unix(1496352875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\x32\x2b\xb8\x7b\x58\xf6\x09\x04\x45\x05\x0f\x5e\x05\x41\xa4\xc9\x24\xd5\xd3\x61\x33\x95\x90\xaa\xf4\xb8\x2e\xfb\xee\x92\x8c\x3d\x33\x69\x5a\xf6\xfa\x75\xd5\x5f\x55\xf9\xff\xbe\x79\xf3\xb0\xf3\xf4\xf0\x87\x27\xa5\xec\x94\x8e\x6e\x18\x0b\x59\xf1\x91\xf8\xfd\xed\xdb\xe7\x15\xfa\xf9\xe1\xd7\x0b\xe8\x61\x98\xf7\x83\x29\x12\x07\x63\xc5\xcf\x46\x50\xdf\x29\xd5\xa8\x8d\x87\x14\xb0\xd5\xde\xde\xc1\xb3\x02\x00\xa8\xcc\x38\x07\x4b\x71\x07\x1d\x6e\x62\x24\x2e\x79\x85\x66\x13\x3a\x30\x61\x48\x1d\xf0\xe4\xa5\x03\xc1\xd3\xe3\x0a\x70\x5f\xc1\x28\xa5\x17\x29\x74\xee\xba\x39\xc3\xfb\x1f\xa0\x3f\xfe\xdb\x13\x0c\x70\x42\xeb\x47\x6f\x61\xf6\x59\x8a\x09\xfb\x08\xc7\x98\x1f\x39\x19\x8b\xba\xbf\xb3\xd7\xf8\x7c\xbe\x16\x64\x42\xb0\x25\x67\x24\xd9\x96\x59\xbd\xcc\x6a\x19\x38\x66\x93\x12\x66\x18\x63\x06\x87\x09\x64\x32\x02\x9e\x58\x4c\x08\xdc\xd4\x1d\x26\x24\x87\x64\x3d\x32\x78\x6a\x6c\x63\x52\x6b\x42\xe3\x20\x8e\x30\x23\xb9\x98\xf5\xf5\xf3\xf7\x73\xbf\xfc\x4e\x91\x4f\xcb\xb3\xcd\x3e\xc9\x69\x2e\x4f\xb1\x04\x07\x3b\x6c\x2e\xdd\xa3\x5b\xe6\x2d\x17\xf2\x84\x21\xe8\x8b\x87\xbd\xea\x57\x0c\x09\xcc\x2e\x16\x01\x43\x4f\xf5\xd3\xc1\x90\xd3\x17\x87\xfb\xf2\x4f\x19\x9b\x0f\x54\x73\x62\x76\xa1\x5a\x72\x39\xa7\xe2\x6a\x21\x78\x01\x89\xdd\x16\xce\x67\xb4\x12\xf3\x93\xbe\x64\xa5\x97\xfe\x56\x1b\x5f\xb1\x66\x51\x95\xc9\xf3\xb5\xe4\x7f\x72\xf3\xbd\x05\x8a\xb7\x17\x81\x31\xc7\x43\xfb\x74\xe5\x87\xbc\xe3\x26\x86\x0e\x24\xea\x25\x91\xea\x45\xa9\xaa\xeb\x70\x84\xf5\xbf\x06\xf3\x5e\xfd\x0d\x00\x00\xff\xff\x49\x40\x5a\x7a\xca\x03\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 970, mode: os.FileMode(420), modTime: time.Unix(1496352884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

