// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\xb6\x16\xff\xdf\x9f\xe2\xd4\x0d\x60\x7b\x80\xe2\xdb\xdc\xff\x36\xe4\x02\xe9\x52\xb4\x01\xda\x26\x48\xdb\x0d\x17\x45\x27\xd0\xd2\xb1\x4c\x84\x26\x35\x92\x52\xe2\x21\x1f\xfe\x82\xa4\x1e\xa4\x44\x37\xed\x9d\x3a\x03\x43\x56\xf2\xbc\x78\x1e\xbf\x73\x48\x3d\x7f\xb6\xde\x50\xbe\xde\x52\xb5\x5b\xcf\x66\xdb\x8a\x67\x9a\x0a\x0e\x75\x31\x03\x00\xa0\x5b\xe0\x42\x43\x26\x2a\xae\xe1\x84\xc8\xa2\x86\xff\xc0\x3a\xc7\x7a\xcd\x2b\xc6\x2c\x89\xf9\x65\x62\xbf\x27\x3c\x6f\xb9\xcc\x4f\xa2\xae\x24\xb7\xff\x44\x9e\xdb\xbf\xcf\x01\xb3\x9d\x70\x62\x3e\xbf\xf8\x62\xd7\xd4\x3d\xd5\xd9\x2e\x5c\xb3\x12\x89\x42\xa0\x9c\xea\x6e\xc5\xfc\xd2\xba\x48\xcd\x62\x4b\x7f\x7a\x9a\x0c\x79\x48\xa6\x69\x4d\x34\x8e\xf8\xda\x8d\xaf\xf0\xe6\x78\x94\x3b\xb2\x65\x59\xb2\xbc\x24\xd9\x1d\x29\x50\x8d\x58\x22\x5b\x96\xa5\x60\x62\x43\xd8\xab\x07\xcc\x46\x2c\xfd\xd6\x57\xac\xac\xca\x42\x92\x7c\x6c\xe2\x70\xdd\x12\x2f\x7e\x5a\x04\x84\x7d\xa4\x9c\x86\x2e\x40\xe6\x3f\x2f\xfe\xad\xa7\x67\x71\xf7\xd9\xe5\xba\x00\x46\xf9\x9d\x63\x0d\x38\x07\x47\xa7\x5b\xf8\x0c\xc9\x5f\x30\x3f\xf9\xed\xea\xf6\xe3\xa7\x8b\xb7\xaf\xaf\xe7\xd0\x9f\xca\x66\xc5\x2b\x29\x85\xfc\x19\xde\x0b\xa8\xa9\xd4\x15\x61\x85\x80\x7b\x21\xef\x54\x49\x32\x04\xaa\x5c\x60\x11\x88\x06\xbd\x43\xd8\x8b\x3d\xf2\x3e\x39\xea\x02\x76\xc8\xca\x58\x38\x5c\x22\xc2\x8b\x20\x15\xb3\x1c\x7a\x5b\xd2\x9b\x8b\x8f\x6f\xd6\x4a\x66\xeb\xc8\x51\x82\xb0\xbb\x83\xf0\x63\x07\x89\x24\x8a\x15\xd8\xb1\x2e\xbd\x42\x5a\x41\xc2\x34\x9c\x79\xec\x0a\x35\xd8\xa8\x9f\x7d\x81\xe5\x86\x28\xe4\x64\x8f\x70\x72\xf3\xfb\xe5\x2a\x94\x65\x08\x7b\xdf\x2c\xeb\xc2\x56\xca\x07\xd4\x9a\xf2\x42\x35\xa9\x73\x66\x53\x67\xd5\x73\x24\xc5\x03\x74\x66\xb7\x44\x4e\xbb\x8d\xc0\x85\xb3\x9b\xf2\xc2\xf3\x4d\x9c\xdb\x7a\x0c\x4e\xde\x5c\xbf\x7b\xb5\x3e\xed\xe2\xb5\xf6\xd8\x02\xbe\xb4\x67\xbc\x7e\x7b\xf9\xfa\xda\x71\xbb\xbf\x03\xbf\xbe\xbe\x7e\x79\xf5\x7e\x3e\x70\x4a\x4c\xc6\xcb\xab\xf7\xe0\xa8\xdd\x09\x98\xc2\x6f\xe3\x89\x19\x63\x20\x70\xec\xe2\xb1\x08\x67\xb8\x35\xbb\xa3\x72\x35\x9b\x6e\x09\x63\x1b\x92\xdd\xd9\x70\xfc\x59\xa1\x3c\xb4\xf1\x58\x79\x09\x70\x32\xa4\x3e\x07\x2d\x2b\x8c\x9c\xb7\xf5\x52\xe8\xf3\x9f\x7d\xaf\x45\xcf\x1c\xe7\x8b\x1f\xae\xf1\xc8\xa0\x10\x8c\x2f\x2c\xd9\xfe\x2e\xa7\x12\x92\x32\x5e\x2a\x21\x85\x8b\x44\x20\xbd\x8d\xb2\xd5\xd1\xfb\x2c\x02\x06\xe9\xe5\xd5\x87\x8b\x97\x6f\x5f\xa5\x37\xb7\xd7\xef\x6e\x3e\xfa\xe1\x6f\x6b\x51\x41\x92\x81\x69\x52\x69\x29\xc5\xbe\xd4\x90\x0a\x96\xa7\xde\xc2\x88\x03\x62\x9b\x5d\xb2\x9b\x64\x5b\xf6\x16\xac\x60\x1e\xe2\xe9\x31\xe9\x2d\x80\xb4\x7f\xeb\xa2\xeb\x38\xb7\x48\x58\x04\x40\x06\x80\xf0\xcf\x61\x61\xa4\x65\x8d\xb0\xb0\xaf\xfe\xcb\x96\x7a\x50\xff\x7d\x48\xbb\x7c\x89\x94\x55\x48\xe5\x22\x1f\x2b\x34\x9f\x2e\x46\x35\x41\x9a\x60\x34\xf0\x41\x1e\x0d\xa3\xfb\x14\x07\xc6\xf3\x21\xac\x27\x84\x08\x68\x22\x44\xea\xb0\xd9\x89\x9c\xfc\xe8\xee\xc0\xc9\xe3\x6d\xcb\x3e\x4e\x3e\x7f\x26\xb0\x9c\x0c\xcc\x49\xfa\xb4\x1a\x20\xfd\xdf\x68\x70\x36\x8b\x3e\x95\xb9\xcb\xa0\x4e\x83\xdd\x2b\x04\x14\x46\x7b\x05\x05\xd5\xbb\x6a\x73\x9a\x89\xfd\xfa\x35\xea\x0f\x5a\x22\xd9\xaf\xeb\xc2\x13\x71\x8b\x4c\x90\xdc\xc8\x30\xb9\xad\x76\xc8\x18\x94\x44\x6a\x10\xdb\xef\x96\xda\x94\x03\xd6\x84\x41\x92\x38\x59\x26\x8a\xf0\x08\x4a\x54\x32\xc3\xd9\xe0\xd4\x81\x73\xe6\x90\x90\xd0\x13\xcf\xce\xc7\x34\x83\xda\xbd\x0d\xea\x28\xa0\xf5\x2b\xb4\x1f\xa7\xc6\x24\xdd\x38\x16\x84\x72\x30\x36\x7e\xc3\x3c\xe1\x63\xc9\x7f\x45\x05\x6a\x27\x2a\x96\x83\x2a\x31\xa3\xdb\x03\x90\x6e\x18\xd4\x3b\xa2\xdb\xdd\x0d\x02\x3e\x60\x56\x69\xcc\x47\x88\x12\x99\x5c\xe3\x88\xf2\xa3\x53\xcd\xc4\xd3\x9f\x72\x26\x0d\xe3\xf7\x47\xc7\xce\x89\x95\x16\xfd\x90\x9c\x24\x82\x27\x35\x91\x94\x6c\x18\xc2\xcd\xef\x97\xad\x81\x4a\x13\x5d\x29\x48\x12\xaa\x92\xc6\xfd\x89\xaa\x36\x4a\x53\x5d\x19\x61\xc7\xee\x4f\xcd\x05\x6a\x4b\x79\x0e\x84\x83\xd1\x96\xb4\x89\x66\x7b\x1d\x0b\x8a\xbc\xdf\x4a\xa5\x10\xda\x0e\x91\x76\xff\x7e\x47\x19\x82\x46\x65\xb2\x66\x40\x64\xdc\xd2\xb7\x41\xba\x75\x64\xc9\x16\xe6\x43\x52\x6f\xe8\x0b\xfb\xa6\x51\xcf\xf1\xbe\x77\x59\x6a\x67\xd8\x65\x46\xf4\xd7\xa5\xac\x02\x31\x74\x0b\x1b\x2c\x28\xb7\x97\x4f\x7b\xa4\x3f\x7b\x20\xfd\x05\x84\x6c\x4e\x10\x51\xf5\xec\xdc\x4b\xb4\x5f\xba\x3e\xed\xff\x82\x00\x8f\x45\x84\xc3\xc2\x80\xdf\x0b\xcb\x70\xfb\x39\xe8\x1d\x55\xa0\xb4\xa4\xa5\xb2\xe0\xc5\x88\xd2\x50\x12\xbd\x33\x95\x56\x0a\x8e\x5c\xc3\x56\x8a\xbd\xdd\x34\xeb\xa7\xe1\xec\x3f\x88\xc7\xb2\xb9\x2e\x0f\x96\x1f\x41\x61\x0e\x0b\xf5\xb8\xfe\xfc\xc7\xfa\xcb\x4f\x27\x8f\x8f\x8b\x55\x98\x99\xe3\x84\x9c\xcd\x8c\x05\x0c\x4d\x6a\x66\xc6\x01\x49\x82\x0f\x19\xab\x14\xad\x23\x7b\x1c\xe6\xd6\xbf\xcb\xd4\xf5\x3c\x5e\xed\x37\x28\x53\xb1\x4d\xb3\x7d\x9e\x12\x59\xa8\xf4\x5e\xa4\xa2\xd4\x6a\x05\xe7\xf0\x62\x0e\xc9\x03\xe9\x5d\x6a\x7f\x49\x0e\xf3\x8b\x76\x85\x34\x98\x43\xb3\xd8\x40\x33\x9f\x46\x7f\x7f\xf5\x6b\xf5\xff\xba\x23\xbc\x40\xeb\x6c\xa3\xcc\x00\x72\x4e\x25\x66\x5a\xc8\x03\x68\xe1\xfa\x8b\xcc\xbc\x45\xb1\xb5\x8b\xcd\x78\x35\xb5\x85\x3d\x9c\xb5\x16\x5e\xf6\x2b\x46\x6f\x56\x49\x69\x72\xe4\xc7\x39\x29\x47\xa5\xa5\x38\x40\x1f\xa4\x5b\xdc\x8b\x1a\x15\x08\x8e\xa6\xae\xf6\x15\xd3\xb4\x64\xde\xe1\xc1\x74\x08\xc2\x98\xb1\x90\x4a\xc8\x04\xd7\xc8\xb5\x9a\xc8\x20\xe4\xaa\x92\x08\x9e\x41\x17\x70\x2f\x49\x59\xa2\x84\xad\x90\x90\x63\xe9\xda\x13\xe5\x4a\x13\xc6\x5c\x61\xe5\x58\x22\xcf\x91\x67\x14\x15\x50\x6e\xd7\xa2\xa3\x32\x57\x1a\x49\x6e\x47\x07\xe4\xb9\x90\x53\x59\x6d\x1a\x10\xf8\x56\xbf\x7a\x28\x85\x72\x51\x54\x99\xa4\xa5\x1e\x35\xd5\x9a\xb0\x04\xf3\xd6\xda\x36\xd4\x76\x26\x99\xc8\x2a\xef\xf5\xa8\xb3\xca\x76\x72\xaf\xd5\x3b\x1a\x76\x80\xa5\xa8\xb4\xa2\x39\x46\x13\x7e\x35\x91\x45\x76\x6a\x08\xfc\xf4\xc6\xac\x90\x8d\xa8\x34\x10\x7e\x68\xcd\x9a\x48\x9d\x7d\x1a\x0c\xd4\xfd\x2a\xd1\x02\x10\xcf\x01\xb9\xed\xc5\x64\x90\xd9\x8c\xf2\x3b\xa0\xba\xc5\x83\x36\x2e\x1d\x26\xcc\x67\xcf\x61\x32\xe3\xba\x27\x1a\x6b\xdc\x47\xd3\x2e\xda\xc0\x98\x6d\x4a\x18\xfd\x0b\x5d\x8a\xab\x96\xd4\xb4\x76\x5b\x0a\x04\x32\x94\x9a\x50\x3e\x39\x2a\x58\x1f\x04\x7e\x7b\x6b\x56\x9e\x80\xa4\xd6\x65\xb6\xeb\x79\xfe\x9a\xc8\x24\xa5\x87\x26\x29\x6d\x71\x08\x1f\xa8\xb2\xd3\x75\x67\xc9\x54\x60\xc4\x44\x46\xd8\x95\x03\x1a\xa7\xf4\xaa\x45\x1d\x02\x4d\x77\x71\x0d\xfc\x20\x2a\x69\x23\xa3\x0e\x4a\xe3\xde\x00\x4d\x5b\x4b\x53\x07\xc7\xc0\xf3\x6f\x16\xbc\x5a\x4f\xbc\xb3\x80\x6d\x31\xcf\xad\x8f\xba\x9a\x67\xc3\x44\xd9\x1b\xbc\x68\x79\xd9\x4b\xb8\x01\xb7\xca\x4c\x24\x5a\x38\xaa\x2e\x4d\xfb\x14\xb6\xd9\x3b\xb5\x63\x14\xea\xaa\x0c\x41\xd8\x96\xb8\xf2\x92\x95\x72\x17\xaa\x29\x61\xb6\x19\xe1\x3d\xbd\x1f\x76\xe2\x1e\x28\xdf\x8a\x06\xd9\xac\xca\xb6\x72\xa6\x3e\x76\xc5\x69\x9b\xa1\x8d\xfa\x4f\xdd\xca\x20\x4b\x7f\xe0\x2c\x53\x71\x1f\x34\x9c\x15\x66\x45\xc5\x51\xb4\xb7\xc7\x6b\xce\x7a\xa1\x2c\xf4\xd8\xdc\x99\xca\x2e\xf7\xe0\xe1\xdb\xd5\xac\x84\x33\xc2\x86\x72\x22\x0f\xb6\x03\x48\xfb\xe0\x60\x7a\xc0\x0f\xec\xcd\x35\x4a\x65\x2e\x6a\xbd\x5d\x37\x92\x72\xdd\x96\xb1\xdb\xf4\x5f\x38\xdc\xfc\x70\x10\x15\x10\x69\x0a\x8c\xf2\x62\x1e\xdc\x39\xad\xee\xba\x48\xed\x56\xda\xb4\x91\xee\x0e\x98\xed\x73\x58\x36\x8b\x8c\x72\x84\x44\x94\xd9\x2a\xf2\x29\x22\xdb\xe7\x2b\x48\x0a\x0d\x2f\xbc\x2b\xb0\x7b\xab\x6e\xbe\xc9\xc1\xb9\xa5\xfa\x7c\xf6\xc5\xa3\xe8\xef\x42\xf0\xaf\xe8\xe3\xe8\x0c\xfc\xd7\x81\xc8\x85\xb9\x40\x9d\x06\x1f\x6b\xec\xdd\xb6\x55\x6a\xdf\x98\x21\xd9\x93\x87\x1c\x4b\xbd\x83\x7f\x43\xb2\xa7\xbc\xfb\x7f\x7d\x28\x11\xf2\xe6\x2a\xa4\xce\x03\xae\xf3\x73\x78\x84\x42\x62\x09\x49\x0d\x8b\x3f\x0a\x21\x0a\x86\xa7\x85\x60\x84\x17\xa7\x42\x16\xeb\xc5\xd3\xea\xce\x3c\x75\x67\xdf\xaa\xee\xff\xd4\x15\x3b\x1a\xfb\x67\x8f\xf6\xa4\xba\xb8\xae\x23\x51\xed\x4a\x3c\x8c\xef\x28\xea\xa3\x8f\x14\x47\xe4\x35\xdf\x4c\x9e\x12\x76\xfc\x49\x34\x52\xc1\x47\xea\xa7\xbb\xc5\xba\xaa\x9d\x2f\xed\x37\x4e\xa5\xe3\x03\xf1\x31\x21\xcd\x2d\xeb\x6f\xc9\xe8\x60\xde\x49\x59\x2c\xbf\xe2\xde\xd5\xe2\x7b\x24\xfb\x53\xce\x48\xf8\xc0\xd7\xab\xc5\xec\x7f\x01\x00\x00\xff\xff\x3b\x02\x1d\x1a\x21\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8225, mode: os.FileMode(420), modTime: time.Unix(1501572814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\x63\x02\x03\x49\x90\x20\x0d\x90\xc6\x86\x9d\x6e\x18\x8a\x4e\xa0\xa5\xb3\x44\x58\x12\x35\x92\x52\xd2\xd5\xfd\xdf\x07\x51\x16\xf5\x8b\xb6\xb3\x35\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xee\x23\xdf\xbf\x73\xd7\x34\x75\x45\x64\x59\x45\x38\x1a\xc3\x0f\x0b\x00\xc0\x27\x02\xc1\x76\xa6\x36\xd0\x54\x2d\x94\x1f\x4d\xa9\x1c\xeb\x7f\xe5\xe7\x79\x45\xe8\x95\xcb\x60\x3b\x3f\x2e\xcf\x7f\xfb\x69\x77\xcc\x17\x17\xfa\x2f\xf1\x25\x2d\x88\x44\x43\x7c\x6d\x3a\x89\x11\xe0\x11\x94\xc6\x78\x12\xc7\x0f\x32\xe2\x6f\x49\x88\xc2\x80\xd3\x18\x4f\xe2\x84\x31\x5b\x93\xf8\xf6\x05\x7d\x03\x4e\x63\x3c\x89\x93\x67\x21\x27\x81\x29\xa9\xbd\xe5\x24\xc2\xc7\x6e\xac\xcf\x92\x84\xa4\x01\x14\x21\x38\x97\xca\x82\x82\xf8\x96\xf5\xd3\xb2\x74\xc7\x74\xab\x8b\x50\x37\xa7\xf6\x2e\x42\x88\x69\xba\xd5\xfe\x4d\x4d\x74\x14\xdd\xc0\x57\x98\xfc\x03\xb6\xf3\xfb\xfd\xf2\xe9\xcb\xd5\xc3\xdd\xdc\x86\x6f\x17\x20\x23\x6c\x08\x83\x7e\xc4\xe0\x96\x73\xc6\xcf\xe1\x91\x41\x41\xb9\xcc\x49\x1c\x32\x78\x66\x7c\x2b\x32\xe2\x23\x50\x51\xed\x8e\x40\x64\x19\x0c\x09\x4b\x30\x95\x1a\xa2\x08\x21\xc2\x38\x6b\xf5\x4c\x9b\x38\xca\x9c\xa7\x30\x55\x0b\x1b\x5a\xf1\x36\x80\xe6\x40\xde\xe2\xea\xe9\x93\x2b\xb8\xef\x96\x99\x58\x1d\xb2\xf5\x12\x49\x8f\x27\x52\x84\x2d\xf2\xd5\xfb\x55\x85\x7d\xc9\x18\x97\xa0\x63\x67\xce\xa8\x08\xd5\xa4\xac\x50\x4a\x9a\x86\x02\x9c\xcb\xf1\xde\xb7\x2c\xc7\x55\x85\x42\xd3\xb0\x75\x52\x33\x96\x3a\xff\xcc\xf9\x34\xff\x7c\xeb\x9e\xe9\xe2\xb9\x07\xc2\xbc\x26\x6e\xfe\x70\xb3\x58\x4d\x67\xce\x62\x35\x3d\xec\x71\x37\xaf\xe0\xab\xdf\x23\x48\xca\x4b\xf9\xf4\x0a\x76\x37\xbf\xbe\x7f\x34\x74\xdd\xbc\xdb\xf5\xfd\xe3\xac\x0a\xa9\xf6\x8a\x05\xbe\x2a\xc4\x74\xea\x52\xb2\x3a\x6d\xa8\xa6\xcd\xdb\x90\x38\x5e\x13\x7f\x5b\x75\xe1\xef\x1c\xf9\xf7\xba\x0d\xe3\xd6\xe9\x6d\xa7\xe7\x6f\xc3\x0c\x6c\xc9\x73\x3c\x98\x4d\x5d\xad\x6e\x73\xce\x3b\xd5\x33\x64\x64\x0e\x33\x31\x68\x9f\x6d\x8f\xbc\x75\x9e\x7b\x27\x05\xb6\x2f\xfc\xb9\xea\x89\x7d\x68\x1a\xbd\x9b\xfb\xd5\xd5\xf5\xc3\xad\xb7\x58\xce\x3f\x2f\x9e\x0e\x26\x56\x12\xc5\x1e\x35\x71\x63\x28\x69\x63\x77\x8e\x98\x6c\x03\xca\x61\x92\x99\x67\xab\xeb\x51\x75\xb8\xaf\x2c\x4b\x24\xb1\x96\x93\x66\x94\x7e\x49\x4e\xfe\x97\x8e\xf4\xc6\xd8\xa4\x23\xcd\xac\xde\xd4\xce\x47\xa6\x55\x0d\xda\x60\xf6\x0c\x9d\x35\x90\xdb\x32\x30\xc5\x44\xf7\x01\x05\xfa\x1b\xea\xe1\xcc\x53\x81\x2d\x05\x19\x8a\x82\x61\xb8\x4d\x63\x67\xd4\x8a\x9e\x32\xe9\x7e\x92\x5c\xb2\xa1\xb0\xd6\xa5\x63\xa9\xc7\x19\x93\x33\x67\xf1\xc7\x8d\x32\x3c\x47\x34\x46\x35\x85\x3d\x17\x1b\xde\xcd\xc0\x56\x7d\x0f\x58\xf3\xea\x50\xd4\xd8\x0c\xdd\x5b\x9a\x38\xe4\x4a\xf9\xa5\xf8\xec\x69\x17\x2f\x25\x09\xce\x9c\x91\x4f\xe4\x71\xa8\xee\x55\x5a\xe9\x85\xd2\x87\x36\x35\x27\x0c\x6c\x67\x88\x5f\x65\x70\x8c\xc3\x2d\x3e\x36\xb7\xee\x10\xa8\xe3\xbf\xbf\xdb\xba\x7c\xb5\x0c\xd6\xf7\x20\x23\x2a\x40\x48\x4e\x33\xa1\xa6\x20\x26\x42\x42\x46\x64\x54\xbe\x09\x32\x96\x62\x2a\x61\xc3\x59\xa2\x8c\xe5\xfa\x59\xff\x85\xd6\xf4\x6b\xa4\x66\xa0\x5f\x2a\xd8\x81\xc0\x00\x3e\x88\x9d\xfb\xf5\x2f\xf7\xdb\x47\x67\xb7\xfb\x50\x95\x2c\x60\x29\x6a\x4e\xec\x5f\x2e\x9a\x0d\x2c\x0e\x9a\x14\x5b\x32\xf7\xfa\x3b\xb8\x27\x1d\xc3\x69\xfd\x92\x05\xd5\xa4\xea\x7d\xaa\xab\x81\x41\x88\x12\x26\x39\x84\x54\x46\xf9\xfa\xcc\x67\x89\x7b\x87\x72\x25\x39\x92\xc4\x2d\xc2\x16\xc4\x12\x63\x46\x82\x12\xa3\xac\x8f\x88\x30\x8e\x21\x23\x5c\x02\xdb\xfc\x67\x54\x7d\x66\xae\x40\xfb\x97\x67\xa7\x20\x36\x4c\x48\x37\x7b\xc5\xa3\x9e\x8f\x51\x0f\x97\x1d\x8d\xea\x44\x58\x46\xb2\x0d\x5d\x36\x54\xb7\xad\x79\xb5\x1a\xa4\x79\x7a\x5c\x92\xff\x64\x39\x88\x88\xe5\x71\x00\x22\x43\x9f\x6e\xbe\x03\xd1\x4f\x51\x19\x11\x59\x5b\xd7\x08\xf8\x82\x7e\x2e\x31\x18\xe8\x73\x73\x80\xe3\xfa\x7c\x90\x4f\x6f\x44\xa8\x82\xc4\xe5\x6b\xf8\xed\x9b\xf6\xaa\x5e\x98\x84\xd5\xfa\x37\x00\x00\xff\xff\xfe\xcd\xc2\x4c\xaa\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3498, mode: os.FileMode(420), modTime: time.Unix(1501572857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xcc\x2a\xbd\xe5\x5b\xca\x4b\xbf\x6a\xca\xef\xa5\x78\x3c\x6f\x04\xda\x14\x76\xe5\xe8\x26\x0f\x79\xcb\x85\x8c\x0c\x48\x50\xe7\xe6\x96\xb7\x29\xec\xa2\xa1\x16\xa6\xaf\x0c\x0c\x5d\xf3\x37\x00\x00\xff\xff\x80\x34\x98\x76\xf9\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1273, mode: os.FileMode(420), modTime: time.Unix(1501332229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

