// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x4f\xe3\x38\x14\x7e\xef\xaf\x38\x14\x24\xda\x91\x42\x17\x1e\x67\xc4\x4a\xb0\xa0\x01\x89\x01\x34\xcb\xec\x3c\x20\x36\x72\x93\x93\xd4\xc2\xb1\xb3\xf6\x49\x0a\x2b\x7e\xfc\xca\x4e\x73\x71\x6a\x98\x97\x6e\xa4\xaa\xca\xb9\x7e\xe7\x6a\x67\x7f\x6f\xb1\xe4\x72\x91\x71\xb3\x5a\x4c\x26\x59\x25\x13\xe2\x4a\x42\x9d\x4f\x00\x00\x78\x06\x52\x11\x24\xaa\x92\x04\x07\x4c\xe7\x35\xfc\x0e\x8b\x14\xeb\x85\xac\x84\x70\x22\xf6\x49\x54\x51\x30\x99\xb6\x5a\xf6\xd1\x48\x95\x96\xee\x15\x65\xea\xfe\xf7\x01\x93\x95\x6a\xcc\x3c\x1e\x3f\x39\x9a\x59\x73\x4a\x56\x3e\xcd\x59\x64\x06\x81\x4b\x4e\x1d\xc5\x3e\x71\x9d\xc7\x96\xd8\xca\x1f\x1d\x45\x63\x1d\x96\x10\xaf\x19\xe1\x96\x5e\xcb\xf8\x40\x37\xc5\x77\xb5\x03\x2c\xa7\x72\xf8\xe9\xd0\x93\xed\x33\xd1\xf8\xe9\x12\x60\x7f\x83\xfc\xb6\x91\x4c\xc2\xf0\x1c\xb9\xce\x41\x70\xf9\x1c\x52\xf5\xc0\xf0\x0c\x1e\x21\x92\x30\x3d\xf8\xeb\xfa\xfb\xc3\x8f\xb3\x9b\xaf\x77\x53\xe8\x43\x0b\xc0\x77\x16\x3b\xd5\xd9\xa0\xbc\x73\x88\x04\xc1\xc9\x40\xdd\x20\x81\xcb\xd8\xc9\x13\xcc\x96\xcc\xa0\x64\x05\xc2\xc1\xfd\xcf\x8b\xb9\x6f\xcb\x0a\x46\xf9\x0b\x74\x20\x36\x99\x3e\x79\x0a\xb3\xe3\xfb\xb3\x87\x2b\x38\xb8\xba\xfb\x76\xb9\x38\xaa\xb9\xa6\x8a\x89\x5c\x2d\xfa\x20\x7c\xb3\x71\xaf\x78\x77\x73\xf1\xf5\xae\xd1\x6e\xfe\x3f\x14\x3c\xbf\xbe\xb5\x72\xe7\xd7\xb7\x1f\x88\x35\xd6\x9c\x2d\x4f\xaa\xf5\xe3\xa3\xfe\x1c\xf2\xbb\xf1\xe4\x4b\xda\xe1\x6a\x2c\x16\xcf\x29\xd7\x10\x95\x5b\x12\x46\x27\x8b\x91\x44\x83\xd6\xb3\xde\x86\xeb\x7c\xf4\x38\x9b\xda\xff\x3b\xac\x7d\x7c\x71\xfd\xe7\xd9\xf9\xcd\x65\x7c\xff\xfd\xee\xdb\xfd\xc3\xb0\x15\xda\x1e\x32\x10\x25\x60\x47\x3e\x2e\xb5\x2a\x4a\x82\x58\x89\x34\x1e\x10\xb6\x34\x20\xc4\x74\xe5\xb7\x23\x6d\x9b\x6f\xd6\x23\x98\xc3\xd4\x1f\xa0\xf7\xac\xb7\x9b\xa1\x1b\x10\xaf\xc9\x47\x4d\x1b\x08\x75\x18\x9b\x03\x72\xa9\xb5\xd2\x9f\xe1\x56\x41\xae\x60\xad\xf4\xb3\x29\x59\x82\xc0\x4d\xb3\x17\x10\x18\x01\xad\x10\x0a\x55\xa0\xec\x71\xd4\x39\xac\x50\x94\xa3\xe5\x05\xc7\xde\xfa\x72\x95\xe8\xca\x1c\xe8\x32\x5f\xaa\x29\x58\xa8\x6b\x87\x72\x21\xa9\x1d\x54\x17\x83\xf5\xf2\xca\x3f\x2e\xca\xaf\x34\x30\x5c\x46\x7f\xfc\xb1\x1f\xef\x20\x31\xf6\xe3\xc7\xc0\x14\xbe\xcf\x1d\x25\x79\x9b\xed\xd4\x47\x7d\xe4\xb6\x65\x45\xaa\x5f\xb0\x51\xa4\x64\x54\x33\xcd\xd9\x52\x20\xdc\xff\xbc\x68\x53\x6d\x88\x51\x65\x20\x8a\xb8\x89\x36\x7b\x3c\x32\xd5\xd2\x10\xa7\xca\x1a\x7b\xef\x6c\xdb\x1c\x6e\x19\x97\x29\x30\x09\xd6\x5b\xb4\xf1\xd6\x4c\x8e\xc0\x1e\xb5\x80\x9e\x15\x6b\xa5\xc8\xad\x52\xc7\x5f\xaf\xb8\x40\x20\x34\x76\x17\x8f\x84\xf6\x4e\x61\xda\x0f\x15\xcf\x1a\xb1\x28\x83\xe9\x58\x74\xb0\x4b\xfd\x29\xb4\xee\x25\xae\xe3\x8e\x1d\xbb\x4d\x3e\x4b\x18\x7d\x6c\x65\xee\x99\xe1\x19\x2c\x31\xe7\xd2\x5d\x0c\x5c\x48\xff\xf4\xf5\xfd\x02\x4a\x6f\x22\x08\xb8\xda\x3b\x1d\x2c\xbf\x2f\xdd\x60\x0d\x9f\x3a\x87\xfe\x24\xdc\x36\xe1\xaf\x9e\x91\xfe\xa0\x2c\x63\xf6\x3e\xd0\x8a\x1b\x30\xa4\x79\x69\xdc\x06\x10\xcc\x10\x94\x8c\x56\xf6\xc8\x2e\x95\x44\x49\x90\x69\x55\x38\xa6\xa5\x1f\xf9\x27\xe0\xa8\x1e\xb3\xcd\x55\x66\x44\x7e\x03\x83\x29\x1c\x9a\xb7\xc5\xe3\xdf\x8b\xa7\x4f\x07\x6f\x6f\x87\x73\x7f\xc3\x6d\x37\xe4\x64\x62\x11\x08\xb4\xad\x99\xd8\x04\x44\x11\xbe\x24\xa2\x32\xbc\x0e\xf0\x24\x4c\x5d\x7e\x67\x71\x33\x8a\xb2\x2a\x96\xa8\x63\x95\xc5\x49\x91\xc6\x4c\xe7\x26\x5e\xab\x58\x95\x64\xe6\x70\x0a\xc7\x53\x88\x5e\x58\x9f\x52\x00\x88\x52\x98\x9e\xb5\xef\x0c\x4c\x89\x09\xcf\x78\x02\x5d\xa2\xfb\xbd\x39\xdd\x8d\xf7\x7e\x8f\x37\xde\x2f\xfa\x77\x9b\xec\xa4\xd2\xda\x66\xff\xff\x03\x80\xd2\x54\x1a\x9b\x62\xba\xf0\x61\xad\x59\x59\xa2\x86\x4c\x69\x48\xb1\x04\x5a\x31\x02\x2e\x0d\x31\x21\x9a\xfe\x48\xb1\x44\x99\xa2\x4c\x38\x1a\xe0\xd2\xd1\x02\x08\x9d\x12\xb2\x14\x54\x06\x35\xca\x54\xe9\x5d\x61\xae\x99\x68\x1b\xd0\x62\xbe\x7c\x29\x95\x69\x12\x66\x12\xcd\x4b\x6a\x30\x9b\x95\xaa\x44\x0a\x4b\x74\x0a\x11\xa6\x2d\xd6\x36\xab\x66\x85\x42\xec\x08\x93\x3d\x23\x87\x98\xae\xec\x3b\x5b\xaa\x8a\x80\xc9\xd7\xf6\xee\xbb\x23\x67\xee\x9e\x3f\x70\xf6\x87\x46\xd7\xb1\x32\x05\x94\x6e\x75\xb3\x41\x19\x2c\xd9\x5e\x96\x81\x13\x90\xf2\x32\x90\x72\x8d\x09\x29\xfd\xba\x23\x60\xce\xcd\x00\xd8\x8d\x7d\xff\x45\x23\xb7\x98\xdc\x16\xda\x3d\x20\x43\x3e\x20\x43\xc0\x84\x00\x7c\xe1\x86\xb8\xcc\x7b\x1c\x66\x47\x2e\x2b\xd9\x67\xc1\xba\xfc\xe1\xde\x4d\x38\xef\xfd\x5e\x1d\x8c\x0d\x1d\x1a\x97\x49\x4c\x81\xd4\x8e\x50\x19\xa4\xaa\x1c\xce\x8c\xeb\x13\x33\x28\x08\x97\xf0\xaa\x2a\xdd\x4e\xc5\xf0\x9e\xe0\xdc\xd4\x79\x5c\x19\x2e\xf3\x78\xd3\xcb\xdd\xb9\x9d\x14\xa9\xfd\x4e\x72\x44\xc1\x25\x42\xa4\xca\x64\x1e\xf8\x88\x4a\x8a\x74\x0e\x51\x4e\x70\x3c\xb8\x99\x39\x89\xf6\x1b\x17\x4e\x9d\x94\xfd\x9e\x7a\x0a\x9c\x5f\xf0\x5b\xf0\x7a\x3c\x81\xe1\xbd\xd4\x51\x02\x39\x7b\x27\x8c\xee\x00\x68\xf2\x34\x9d\xb9\x4f\x4b\x43\xf3\xe9\xe4\xbf\x00\x00\x00\xff\xff\xe9\x9f\xf3\x1f\x00\x10\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 4096, mode: os.FileMode(420), modTime: time.Unix(1496385688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\x32\x2b\xb8\x7b\x58\xf6\x09\x04\x45\x05\x0f\x5e\x05\x41\xa4\xc9\x24\xd5\xd3\x61\x33\x95\x90\xaa\xf4\xb8\x2e\xfb\xee\x92\x8c\x3d\x33\x69\x5a\xf6\xfa\x75\xd5\x5f\x55\xf9\xff\xbe\x79\xf3\xb0\xf3\xf4\xf0\x87\x27\xa5\xec\x94\x8e\x6e\x18\x0b\x59\xf1\x91\xf8\xfd\xed\xdb\xe7\x15\xfa\xf9\xe1\xd7\x0b\xe8\x61\x98\xf7\x83\x29\x12\x07\x63\xc5\xcf\x46\x50\xdf\x29\xd5\xa8\x8d\x87\x14\xb0\xd5\xde\xde\xc1\xb3\x02\x00\xa8\xcc\x38\x07\x4b\x71\x07\x1d\x6e\x62\x24\x2e\x79\x85\x66\x13\x3a\x30\x61\x48\x1d\xf0\xe4\xa5\x03\xc1\xd3\xe3\x0a\x70\x5f\xc1\x28\xa5\x17\x29\x74\xee\xba\x39\xc3\xfb\x1f\xa0\x3f\xfe\xdb\x13\x0c\x70\x42\xeb\x47\x6f\x61\xf6\x59\x8a\x09\xfb\x08\xc7\x98\x1f\x39\x19\x8b\xba\xbf\xb3\xd7\xf8\x7c\xbe\x16\x64\x42\xb0\x25\x67\x24\xd9\x96\x59\xbd\xcc\x6a\x19\x38\x66\x93\x12\x66\x18\x63\x06\x87\x09\x64\x32\x02\x9e\x58\x4c\x08\xdc\xd4\x1d\x26\x24\x87\x64\x3d\x32\x78\x6a\x6c\x63\x52\x6b\x42\xe3\x20\x8e\x30\x23\xb9\x98\xf5\xf5\xf3\xf7\x73\xbf\xfc\x4e\x91\x4f\xcb\xb3\xcd\x3e\xc9\x69\x2e\x4f\xb1\x04\x07\x3b\x6c\x2e\xdd\xa3\x5b\xe6\x2d\x17\xf2\x84\x21\xe8\x8b\x87\xbd\xea\x57\x0c\x09\xcc\x2e\x16\x01\x43\x4f\xf5\xd3\xc1\x90\xd3\x17\x87\xfb\xf2\x4f\x19\x9b\x0f\x54\x73\x62\x76\xa1\x5a\x72\x39\xa7\xe2\x6a\x21\x78\x01\x89\xdd\x16\xce\x67\xb4\x12\xf3\x93\xbe\x64\xa5\x97\xfe\x56\x1b\x5f\xb1\x66\x51\x95\xc9\xf3\xb5\xe4\x7f\x72\xf3\xbd\x05\x8a\xb7\x17\x81\x31\xc7\x43\xfb\x74\xe5\x87\xbc\xe3\x26\x86\x0e\x24\xea\x25\x91\xea\x45\xa9\xaa\xeb\x70\x84\xf5\xbf\x06\xf3\x5e\xfd\x0d\x00\x00\xff\xff\x49\x40\x5a\x7a\xca\x03\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 970, mode: os.FileMode(420), modTime: time.Unix(1496352884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

