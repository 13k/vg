// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\x38\x01\x62\x17\x60\x84\xe6\xb1\x45\x07\x24\x73\xd0\x04\x48\x63\xa3\x4b\xd7\x87\x20\x13\x68\xe9\x24\x11\xa1\x49\x8d\xa4\xe4\x76\xc8\x87\x1f\x48\x59\xa6\x28\x33\xee\x1e\x26\xc0\x30\x78\xff\xef\x7e\x77\x47\x9e\x9e\x24\x6b\x26\x92\x82\xe9\x2a\x99\x4c\x8a\x46\x64\x86\x49\x01\x6d\x39\x01\x00\x60\x05\x08\x69\x20\x93\x8d\x30\x70\x46\x55\xd9\xc2\x6f\x90\xe4\xd8\x26\xa2\xe1\xdc\x89\xd8\x2f\x93\x9b\x0d\x15\x79\xaf\x65\x3f\x85\xa6\x51\xc2\x1d\x51\xe4\xee\xff\x14\x30\xab\x64\x67\xe6\xe9\xfd\xb3\xa3\xe9\x2d\x33\x59\x15\xd2\x9c\x45\xaa\x11\x98\x60\x66\x4f\xb1\x5f\xda\x96\xa9\x25\xf6\xf2\x17\x17\x64\xac\x43\x33\xc3\x5a\x6a\xf0\x40\xaf\x67\x1c\xd1\xcd\xf1\x4d\xed\x08\xcb\xa9\x9c\xbf\x3b\x0f\x64\x7d\x25\x3a\x3f\xfb\x02\xd8\xdf\xa0\xbe\x7d\x26\x93\x78\x78\x8e\xdc\x96\xc0\x99\x78\x89\xa9\x06\xc1\xb0\x02\x9e\x80\x08\x98\x9e\xfd\x79\xf7\xf5\xf1\xdb\xd5\xfd\xe7\xe5\x14\x7c\x6a\x91\xf0\x9d\xc5\xbd\xea\x6c\x00\xef\x1c\x08\x37\x70\x39\x50\xd7\x68\xc0\x55\xec\xf2\x19\x66\x6b\xaa\x51\xd0\x0d\xc2\xd9\xea\xfb\x62\x1e\xda\xb2\x82\xa4\xfc\x01\xfb\x20\x76\x95\xbe\x7c\x8e\xb3\xd3\xd5\xd5\xe3\x2d\x9c\xdd\x2e\xbf\xdc\x24\x17\x2d\x53\xa6\xa1\xbc\x94\x89\x4f\x22\x34\x9b\x7a\xc5\xe5\xfd\xe2\xf3\xb2\xd3\xee\xfe\x8f\x0a\x5e\xdf\x3d\x58\xb9\xeb\xbb\x87\x23\x62\x9d\x35\x67\x2b\x90\xea\xfd\x84\x51\x7f\x88\xf9\xdd\x79\x0a\x25\xed\x70\x75\x16\x37\x2f\x39\x53\x40\xea\x03\x09\xad\xb2\x64\x24\xd1\x45\x1b\x58\xef\xd3\x75\x3e\x7c\x9c\x1d\xf6\xff\x0c\xb1\x4f\x17\x77\x7f\x5c\x5d\xdf\xdf\xa4\xab\xaf\xcb\x2f\xab\xc7\x61\x2b\xf4\x3d\xa4\x81\x64\x60\x47\x3e\xad\x95\xdc\xd4\x06\x52\xc9\xf3\x74\x40\x38\xd0\x80\x18\xd3\xc1\x6f\x47\xda\x36\xdf\xcc\x47\x30\x87\x69\x38\x40\x6f\x59\xef\x37\xc3\x7e\x40\x82\x26\x1f\x35\x6d\x24\xd5\x61\x6e\x2e\x90\x1b\xa5\xa4\xfa\x00\x0f\x12\x4a\x09\x5b\xa9\x5e\x74\x4d\x33\x04\xa6\xbb\xbd\x80\x40\x0d\x98\x0a\x61\x23\x37\x28\x7c\x1c\x6d\x09\x15\xf2\x7a\xb4\xbc\xe0\x7d\xb0\xbe\x1c\x12\x7b\x98\x23\x5d\x16\x4a\x75\x80\xc5\xba\x76\x28\x17\x93\xfa\x1f\xd0\xc5\x28\x5e\x01\xfc\x63\x50\x7e\xa5\x81\x71\x18\xc3\xf1\x47\x3f\xde\x51\x62\x1a\xe6\x8f\x91\x29\x7c\x9b\x3b\x2a\xf2\x21\xdb\xa9\x8f\xfa\xc8\x6d\xcb\xc6\x48\xbf\x60\x09\x91\x82\xb4\x54\x31\xba\xe6\x08\xab\xef\x8b\xbe\xd4\xda\x50\xd3\x68\x20\x84\x69\xb2\xdb\xe3\x44\x37\x6b\x6d\x98\x69\xac\xb1\xb7\xee\xb6\xdd\xe5\x56\x30\x91\x03\x15\x60\xbd\x91\x9d\xb7\x6e\x72\x38\xfa\xa8\x39\x78\x56\xaa\xa4\x34\x6e\x95\x3a\xfe\xb6\x62\x1c\xc1\xa0\xb6\xbb\x78\x24\x74\xf2\x09\xa6\x7e\xa8\x58\xd1\x89\x91\x02\xa6\x63\xd1\xc1\x2e\x0d\xa7\xd0\xba\x17\xb8\x4d\xf7\xec\xd4\x6d\xf2\x59\x46\xcd\x71\x2b\xf3\xc0\x0c\x2b\x60\x8d\x25\x13\xee\x61\xe0\x52\xfa\xdb\xe3\xfb\x11\xa4\xda\x65\x10\x71\x75\xf2\x69\xb0\xfc\x3e\xee\x07\x6b\xf8\xb5\x25\xf8\x9b\xf0\xd0\x44\xb8\x7a\x46\xfa\x03\x58\xc6\xec\x53\x30\x15\xd3\xa0\x8d\x62\xb5\x76\x1b\x80\x53\x6d\xa0\xa6\xa6\xb2\x57\x76\x2d\x05\x0a\x03\x85\x92\x1b\xc7\xb4\xf4\x8b\xf0\x06\x1c\xe1\x31\xdb\x3d\x65\x46\xe4\x57\xd0\x98\xc3\xb9\x7e\x4d\x9e\xfe\x4a\x9e\xdf\x9d\xbd\xbe\x9e\xcf\xc3\x0d\x77\xd8\x90\x93\x89\x8d\x80\xa3\x6d\xcd\xcc\x16\x80\x10\x21\x89\xed\x1a\x7d\xc8\xa2\xbe\x3c\x00\x40\x72\x98\x5e\xf5\x67\x0a\xba\xc6\x8c\x15\x2c\x83\x7d\xd1\xfc\x0e\x9c\x46\x4c\xf9\x05\xdb\x99\x5a\xf8\xb3\xad\x42\xd6\x28\x65\xcb\xf2\x1f\xad\xa1\xd0\x8d\xc2\xae\x64\x2e\x30\xd8\x2a\x5a\xd7\xa8\xa0\x90\x0a\x72\xac\xc1\x54\xd4\x00\x13\xda\x50\xce\x3b\x14\x72\xac\x51\xe4\x28\x32\x86\x1a\x98\x70\xb4\x88\x3b\xa7\x84\x34\x07\x59\x40\x8b\x22\x97\x2a\x1a\x40\x4b\x79\x8f\x99\x0d\xe0\xe6\x47\x2d\x75\x97\x8a\xce\x14\xab\x4d\x17\x80\xae\x64\xc3\x73\x58\xa3\x53\x20\x98\xf7\x8e\xfb\x7c\x75\x85\x9c\xc7\x1c\xd8\x3b\x62\xe8\xe0\xd6\x9e\xe9\x5a\x36\x06\xa8\xf8\xd9\xbf\xfd\x62\x9a\xee\xd1\x3a\xd0\xfc\x5d\xa1\x83\x4c\xe4\x80\xc2\xed\x21\x3a\xc8\xd6\x92\xed\xcb\x0f\x98\x01\x23\x83\xd8\x72\xa6\x30\x33\x52\xfd\x8c\x79\x71\x3a\x03\x2f\xf7\xf6\xfc\x0b\x24\x7b\x07\x6e\x3e\x8e\x5a\x6f\x84\xb7\x6f\xad\x7f\x73\x67\x1d\x0f\xcf\xcf\xd2\x00\x44\x73\xae\x5d\x8c\x98\x83\x91\xd3\xc9\xe4\xdf\x00\x00\x00\xff\xff\x86\x09\xd4\x10\x7c\x0c\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 3196, mode: os.FileMode(420), modTime: time.Unix(1496345765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x4f\xe3\x30\x10\xbd\xe7\x57\x0c\xc6\x12\x2d\x12\x44\xdd\x63\x51\x24\x40\x20\xa8\x04\x34\x02\x76\xf7\x80\xd8\xc8\x24\x6e\x62\xd1\xd8\x91\xed\x86\xd5\x52\xfe\xfb\xca\x0e\xf9\x4e\xd3\x5c\x2a\x7b\xde\xbc\xf1\xcc\xbc\x99\x1e\x1e\xb8\x6f\x8c\xbb\x2a\x71\x9c\x3c\x9e\x4c\xe1\xd3\x01\x00\x08\x89\xa2\x80\xf0\x0c\x01\xe3\xf6\xc2\x7c\x8c\x33\x3d\xad\x4e\xe6\x0b\x82\x3c\x0e\xcc\x35\x20\xfc\x79\x3e\xff\xf1\x85\x5a\xe6\xb3\xb3\xea\x48\x42\xcd\x72\xa2\xe9\x80\x7f\x69\xda\xcb\x11\xd1\x11\x96\xda\xb8\x97\xe7\xb8\xed\x1e\x8a\x34\x25\x3c\x82\x3c\x06\x7c\x6e\x2d\x54\x91\xd0\x71\xbe\x1c\xa7\xca\xaf\x2a\x4c\x1e\x57\xa9\x94\xe8\x3c\x86\x35\xe3\xef\x15\xbe\xb4\x57\x3e\x6c\x05\x2f\x70\xc2\x01\xe1\x5f\x8b\xc7\xe7\x9f\x17\x77\x37\x4b\x04\xaf\x67\xa0\x13\x5a\x17\x37\x8f\x1b\xf9\xd9\xdb\x15\x73\x8a\xd7\xfc\xcd\x84\xd4\x50\xf9\x7a\x78\xd6\xa0\xfd\x37\x4e\xdb\x77\x9e\xbc\x11\x45\x39\x49\x29\x60\xff\xf7\xd5\x74\x34\x54\xe0\x5f\x3c\xdf\x7a\xf8\x76\x79\x7f\xed\x9e\xe6\x4c\xea\x0d\x59\xc7\xc2\xad\x03\xb6\xdc\x82\xda\x6f\x79\x77\xe5\x3f\xcd\x3c\xec\x3f\xcd\x76\x23\x6e\x96\x05\x7d\xf1\x3b\x86\xbb\x5c\x3c\x18\xd8\xe5\xe2\x61\x24\x9e\xe5\xb2\x4c\x4d\x50\x19\xa4\x9d\xd3\x7c\x20\xe8\x77\x98\x36\xd0\x0c\x47\x13\x64\xc9\x50\xf1\x96\xb9\x8d\x86\x76\x35\x23\xb8\x5a\x3c\x5d\x5c\xde\x5d\x07\xfe\xe3\xf2\xde\x7f\xde\xd9\x1b\x53\x28\x34\xa9\xfd\xa6\x60\xca\x86\x5a\x8d\x49\xdf\x23\x26\xe1\x24\x83\xee\xf3\x94\x0c\xdd\x0e\xa2\xa8\x53\xa9\xc6\x5a\x54\x1d\x3d\xee\x13\x4e\x98\x08\xb8\x96\x52\xc8\x39\x3c\x08\x88\x05\x7c\x08\xf9\xae\x32\x12\x52\x60\xaa\x18\x02\x0a\x44\x1b\x2f\x48\x45\x4a\xb9\x6e\x6a\x39\xa1\xeb\xac\x3a\x4b\xaa\x37\x92\xc3\xac\x4c\xa9\x93\x3c\xee\x09\x67\xa0\x2d\x03\x92\x18\x6a\xf3\x90\xc2\x7a\xfd\xeb\x06\xac\x34\xb3\xe1\x8a\x36\xe4\xdf\x57\xf4\x80\xe6\x86\xc4\x3a\x28\xf4\xce\x58\xd5\xfb\x62\xa3\x45\x7f\x69\x7c\x5f\x30\xc1\x03\x29\x84\xf6\xcc\xb0\x5a\xc3\x47\xc2\xd6\x14\x5e\x00\xe1\x0e\x04\xc1\x81\x07\xc8\x76\x32\x12\xf5\xd2\xb6\xcd\x5e\xf5\xe1\x8d\x81\xee\x77\xdf\x7c\x9c\x7e\x04\x15\x24\x30\x1b\xc3\xc3\x93\x90\xe8\x71\xaa\xf6\x6e\xb5\xd1\x11\x02\xaf\x2d\xb6\x13\x01\x08\xf7\xf9\x8b\x0c\xc6\x54\xd9\x50\x58\xbd\x86\xfb\x44\x2d\xfc\xb7\xe0\xda\x62\x74\x06\xac\x87\xa0\x13\xa6\x40\x69\xc9\x32\x65\x75\xbd\x26\x4a\x43\x46\x74\x62\xfe\x24\x32\xc1\x29\xd7\xb0\x92\x22\xb5\x46\x73\x7f\xda\xfd\x83\xab\xfb\x35\xb1\x13\xd4\x2d\x15\x6c\x41\xd1\x08\x8e\xd4\xd6\x7d\xf9\xe3\xbe\x1e\xe3\xed\xf6\xa8\x28\x59\x24\x38\x1d\xd6\x84\xf3\x3f\x00\x00\xff\xff\xa3\x78\x94\xa9\xa4\x07\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1496347559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\x28\x28\x4f\x89\x4f\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x2b\xb6\xd5\x50\xa9\x46\x13\x8a\x76\x88\xad\x55\x50\x8a\x8f\x2f\x4b\x8f\x4f\x2c\x2d\xc9\x8f\x4f\x4c\x2e\xc9\x2c\x4b\x2c\x49\x55\xd2\xe4\x02\x04\x00\x00\xff\xff\x6c\x0c\x55\x45\x3d\x00\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 61, mode: os.FileMode(420), modTime: time.Unix(1496347551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

