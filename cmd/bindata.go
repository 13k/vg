// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\x4f\x6b\xfa\x40\x14\xbc\xef\xa7\x78\xbe\xdf\x1e\xd4\x1f\x21\xd0\x6b\x48\xa9\x54\x11\x41\x4d\x48\x8d\x0a\x45\xd6\x35\xae\x26\xb0\x26\x62\xfe\x60\xa9\x7e\xf7\x92\x4d\xd0\x26\x84\x7a\xe9\xa5\x39\x84\x64\x76\x66\xde\x32\xf3\xfe\xb5\xf4\x4d\x10\xea\x1b\x1e\xfb\x84\x64\xfb\x76\x07\x3e\x09\x00\x94\xef\xfc\x91\x91\xc7\x25\xb8\x6f\x03\xb6\x34\x1a\x40\xf7\x0e\x2a\x8e\xb9\xf6\x78\x2c\x00\xa9\x86\x10\x84\xd0\x3d\x77\x3b\x20\x3c\x3f\x02\xfc\x10\x31\x82\x61\x80\x88\xb9\xb7\xae\x88\xdc\xba\x28\x7d\x20\x8a\x45\x02\xff\xcf\x60\x54\x81\xb4\x04\xae\xf0\xf4\x0c\xfa\x56\x64\x7a\x98\x4a\x49\x14\xc6\x58\xb6\x07\xa4\x2f\x58\xfc\xbe\x03\x52\x35\x19\xa1\x65\x96\x53\x56\x70\xb9\x28\x23\x2d\xad\x70\x96\x8d\x9c\x33\xb9\x12\x92\xbb\xb2\x93\x90\x11\xdf\xde\x92\xb3\x1d\x6b\x62\xcf\xd8\xab\x35\x99\xf4\xa6\x7d\x93\xb2\xf9\xc8\x99\xb9\xbd\xf1\xd0\x62\x96\x33\x1a\x8e\xa6\xbd\x31\xab\x72\x94\x4c\x64\x5c\x02\xd2\x76\xb6\x2f\x3e\x35\x2d\xf6\x85\x94\x90\x37\xd3\x41\x35\xcc\x76\x06\xf3\x6f\x6e\xf6\xa2\x6f\x22\x96\x97\x38\x9e\xa2\xc3\x31\x61\x5e\x74\x38\xf0\x70\xfb\x73\x8d\x4d\x2d\xfe\x89\x12\x83\x9d\x2a\xc5\x5e\xf4\x8b\x4a\x68\x43\x24\x08\x2b\x03\x12\x5f\x84\x37\xdb\xc6\xdc\x94\x09\xb9\x73\xf2\x0c\x79\x9a\x44\x8c\x7b\x49\x90\xf1\x44\xa8\xa3\x5d\xf0\xbb\xeb\xf2\x70\x15\x4c\x5a\x5b\x8d\xda\x31\x36\x94\x0d\x06\xd4\x54\x48\xbe\x02\x00\x00\xff\xff\x24\x62\xee\x6b\xd7\x03\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xea\x1a\x88\xbd\x80\xe2\x4b\xee\xbf\x16\x39\x20\xdd\xf4\xda\x00\x6d\x13\x24\xed\x2e\x0e\xbd\x56\xa0\xa5\xb1\x4c\x84\x26\xb5\x24\xa5\xc4\x8b\x7c\xf8\x03\x49\x3d\x48\x89\x4e\xb2\x57\x77\x0d\x14\x6e\xc8\x79\x71\x1e\xbf\x19\xd2\x2f\x5f\x2c\x96\x94\x2f\x56\x54\xad\x17\x07\x07\xab\x8a\x67\x9a\x0a\x0e\x75\x71\x00\x00\x40\x57\xc0\x85\x86\x4c\x54\x5c\xc3\x94\xc8\xa2\x86\x7f\xc1\x22\xc7\x7a\xc1\x2b\xc6\x2c\x89\xf9\x64\x62\xb3\x21\x3c\x6f\xb9\xcc\x47\xa2\xae\x24\xb7\x7f\x22\xcf\xed\xf7\x4b\xc0\x6c\x2d\x9c\x98\xaf\xc7\xdf\xec\x9a\xba\xa3\x3a\x5b\x87\x6b\x56\x22\x51\x08\x94\x53\xdd\xad\x98\x4f\x5a\x17\xa9\x59\x6c\xe9\x8f\x8e\x92\x21\x0f\xc9\x34\xad\x89\xc6\x11\x5f\xbb\xf1\x08\x6f\x8e\x3b\xb9\x23\x5b\x96\x25\xcb\x4b\x92\xdd\x92\x02\xd5\x88\x25\xb2\xd5\x68\x51\x5a\x8a\x6d\x44\x85\x5d\x7f\xc4\xbe\x82\x89\x25\x61\x6f\xef\x31\x1b\x31\xf7\x5b\x8f\xf0\x57\x65\x21\x49\x3e\x3e\xdc\x70\xdd\x12\x1f\xfe\x72\x18\x10\xf6\x31\x76\x1a\xba\xd0\x9a\x7f\x5e\xe6\xb4\x31\x3a\x88\x3b\xde\x2e\xd7\x05\x30\xca\x6f\x1d\x6b\xc0\x39\x70\x1a\x5d\xc1\x57\x48\xfe\x84\xc9\xf4\xb7\x8b\xeb\xcf\x5f\xce\x3e\xbc\xbb\x9c\x40\x7f\x2a\x9b\x4f\x6f\xa5\x14\xf2\x15\x7c\x12\x50\x53\xa9\x2b\xc2\x0a\x01\x77\x42\xde\xaa\x92\x64\x08\x54\xb9\x94\x40\x20\x1a\xf4\x1a\x61\x23\x36\xc8\xfb\xb4\xaa\x0b\x58\x23\x2b\x63\x81\x74\x29\x0c\xc7\x41\x12\x67\x39\xf4\xb6\xa4\x57\x67\x9f\xdf\x2f\x94\xcc\x16\x91\xa3\x04\x09\xe3\x0e\xc2\x77\x1d\x24\x92\x62\x56\x60\xc7\x3a\xf3\x4a\x70\x0e\x09\xd3\x70\xe2\xb1\x2b\xd4\x60\xa3\x7e\xf2\x0d\x66\x4b\xa2\x90\x93\x0d\xc2\xf4\xea\xf7\xf3\x79\x28\xcb\x10\xf6\xbe\x99\xd5\x85\xad\xb1\x1b\xd4\x9a\xf2\x42\x35\xa9\x73\x62\x53\x67\xde\x73\x24\xc5\x3d\x74\x66\xc3\xb4\x13\x70\xd0\xc5\xe0\xcc\x59\x4e\x79\xe1\x79\xa7\xe3\xaf\x0b\xe9\x3b\xed\xfa\xf2\xf2\x33\x4c\xdf\x5f\x7e\x7c\xbb\x38\xea\x42\x16\x57\x66\x1d\x0c\xd3\xba\x90\x5f\x8f\xbf\x2d\x3c\xd1\x01\x79\xda\xd3\x5f\x7e\x38\x7f\x77\xe9\x98\xdc\xf7\xc0\xfb\xef\x2e\xdf\x5c\x7c\x9a\x0c\x5c\x17\x93\xf1\xe6\xe2\x13\x38\x6a\x77\x4a\xa6\xf0\x79\x3c\x31\x63\x0c\xc4\x8e\x03\x31\x16\x61\x68\xd3\x7f\x5f\xdc\xbc\x87\x69\x67\xfb\x23\x94\x37\xef\x61\x66\xdd\x9f\x28\x78\x65\x39\xe0\x01\xb2\x4a\x43\xb2\x84\x93\xc4\x0b\xa0\x43\x87\x74\x45\x18\x5b\x92\xec\xd6\x06\xfe\x8f\x0a\xe5\xb6\x8d\xfc\xdc\x4b\xb5\xe9\x90\xfa\x14\xb4\xac\x30\xe2\xb3\xd6\xd3\x61\xb8\x5e\xf9\x9e\x8f\xfa\x2d\xce\x17\x77\x50\xe3\xd5\x41\xc9\x19\x7f\x5a\xb2\xcd\x6d\x4e\x25\x24\x65\xbc\x28\x43\x0a\x17\xcd\x40\x7a\x9b\x29\x56\x87\x35\x62\x17\xec\xa4\xe7\x17\x37\x67\x6f\x3e\xbc\x4d\xaf\xae\x2f\x3f\x5e\x7d\xf6\x53\xa8\xad\x7a\x05\x49\x06\xa6\x91\xa6\xa5\x14\x9b\x52\x43\x2a\x58\x9e\x7a\x0b\x23\x0e\x88\x6d\x76\x45\x65\x12\x76\xd6\x5b\x30\x87\x49\x88\xdc\xbb\xa4\xb7\x50\xd5\x7e\xd7\x45\xd7\x15\xaf\x91\xb0\x08\x54\x0d\xa0\xe7\xef\x43\xdd\x48\x5b\x1d\xa1\x6e\x8f\x32\xe7\x2d\xf5\x00\x67\xfa\x90\x76\xf9\x12\x29\xcd\x90\xca\x45\x3e\x56\xac\x3e\x5d\x8c\xaa\x2b\xd2\x1f\xcc\x15\x8c\x46\x3f\x48\xa6\x61\x88\x9f\xe2\xc0\x78\x52\x84\x45\x85\x30\x46\x68\x7f\x31\x0d\x9d\x80\xbb\x30\xea\x09\x92\xc7\x08\x06\xf1\x18\x6f\x5b\x13\x62\x79\xda\x8f\x4e\xcf\x68\x8b\x4f\xe4\xf1\x9e\x72\x39\xcc\xe7\xf1\x6c\x17\x24\xb4\x5f\x97\x30\xe8\xdc\x83\xce\xd9\x45\xcd\x9b\xbc\xc2\x19\xd1\x35\xea\x83\x47\x06\x8c\xd7\xd0\x30\x32\xaa\x34\x3c\xd8\x61\xbe\x90\x58\xc2\xe4\x7b\x4f\xf7\xdf\xe9\x24\x3a\xd5\x5b\x7d\xa3\x99\x64\x1c\x15\x7f\x7c\xb4\xf1\x64\x60\xb2\xb0\xf7\xe5\xe0\x60\x3f\x30\x0b\xd9\x70\x7d\x29\x73\x07\x01\xe1\xf0\x50\x08\x28\x8c\xf6\x0a\x0a\xaa\xd7\xd5\xf2\x28\x13\x9b\xc5\x3b\xd4\x37\x5a\x22\xd9\x2c\xea\xc2\x13\x71\x8d\x4c\x90\xdc\xc8\x30\x01\x55\x6b\x64\x0c\x4a\x22\x35\x88\xd5\x5f\x96\xda\xb8\x0a\x6b\xc2\x20\x49\x9c\x2c\x53\x81\xf0\x00\x4a\x54\x32\xc3\x61\x80\x02\xe7\x4c\x20\x21\xa1\x27\x5e\x9c\x8e\x69\x06\xe0\x7b\x1d\x00\x61\x40\xeb\x47\xaf\x9f\xbc\xc7\x24\xf1\x50\x0e\x6e\x18\xcf\xa8\x31\xbf\x80\xfe\x23\x2a\x50\x6b\x51\xb1\x1c\x54\x89\x19\x5d\x6d\x81\x74\xd9\xab\xd7\x44\xb7\xbb\x4b\x04\xbc\xc7\xac\xd2\x98\x8f\x5a\x42\xe4\x92\x13\x6f\x09\x3f\x3b\xd5\x4c\x3c\x83\x3a\x6b\x95\x2a\x4d\x74\xa5\xd2\x4c\xe4\x08\x53\xf7\xc7\x5e\x43\xfc\x8c\xc8\x79\x5e\x99\x7a\xe6\x0c\x23\x6a\xaf\x21\x95\x16\xfd\x1d\x2c\x49\x04\x4f\x6a\x22\x29\x59\x32\x84\xab\xdf\xcf\x5b\xc3\x9d\x14\x48\x12\xaa\x92\x26\x64\x89\xaa\x96\x4a\x53\x5d\x19\x61\xbb\x2e\xf6\xcd\xcd\x7e\x45\x79\x0e\x84\x83\xd1\x96\xb4\xc9\x69\x07\x1c\x16\x00\x43\xbf\x95\x4a\x21\xb4\xbd\xa3\xd8\xfd\xbb\x35\x65\x08\x1a\x95\xc9\xb4\x01\x91\x71\xd7\xc4\x47\x75\x4b\x96\xac\x60\x32\x24\xf5\x2e\x14\xe1\xb0\x64\xd4\x73\xbc\xeb\x5d\x99\xda\x2b\xd2\x2c\x23\xfa\x71\x29\xf3\x40\x0c\x5d\xc1\x12\x0b\xca\x2d\x90\xda\x23\xfd\xd1\x37\xce\xd7\x20\x64\x73\x82\x88\xaa\x17\xa7\x5e\x72\xbe\x0e\x9a\x40\x34\xf0\x63\x11\x61\xe3\x1a\xf0\x7b\x61\x19\x6e\xbf\x04\xbd\xa6\x0a\x94\x96\xb4\x54\x16\xf0\x18\x51\x1a\x4a\xa2\xd7\xa6\x3a\x4b\xc1\x91\x6b\x58\x49\xb1\xb1\x9b\x66\xfd\x28\x6c\x50\x83\x78\xcc\x9a\x77\x9c\xc1\xf2\x03\x28\xcc\xe1\x50\x3d\x2c\xbe\x7e\x5f\x7c\xfb\x65\xfa\xf0\x70\x38\x0f\xb1\x66\x9c\x90\x07\x07\xc6\x02\x86\x26\x35\x33\xe3\x80\x24\xc1\xfb\x8c\x55\x8a\xd6\x91\x3d\x0e\x13\xeb\xdf\x59\xea\x66\x1c\x5e\x6d\x96\x28\x53\xb1\x4a\xb3\x4d\x9e\x12\x59\xa8\xf4\x4e\xa4\xa2\xd4\x6a\x0e\xa7\x70\x3c\x81\xe4\x9e\xf4\x2e\xb5\x9f\x24\x87\xc9\x59\xbb\x42\x1a\x9c\xa2\x59\xac\xf3\x4f\xf6\xa3\xbf\x7f\x59\x68\xf5\xff\xba\x26\xbc\x40\xeb\x6c\xa3\xcc\x80\x78\x4e\x25\x66\x5a\xc8\x2d\x68\xe1\x7a\x92\xcc\xbc\x45\xb1\xb2\x8b\xcd\x1c\xb2\x6f\x0b\x7b\x08\x6c\x2d\x3c\xef\x57\x8c\xde\xac\x92\xd2\xe4\xc8\xcf\x73\x52\x3b\xd8\xf4\x41\xba\xc6\x8d\xa8\x51\x81\xe0\x68\xea\x6a\x53\x31\x4d\x4b\xe6\x1d\xde\x8e\x36\x84\x31\x63\x21\x95\x90\x09\xae\x91\x6b\xb5\x27\x83\x90\xab\x4a\x22\x78\x06\x9d\xc1\x9d\x24\x65\x89\x12\x56\x42\x42\x8e\xa5\x6b\x69\x94\x2b\x4d\x18\x73\x85\x95\x63\x89\x3c\x47\x9e\x51\x54\x40\xb9\x5d\x8b\xce\x94\x5c\x69\x24\xb9\x1d\x37\x90\xe7\x42\xee\xcb\x6a\xd3\xb4\xc0\xb7\xfa\xed\x7d\x29\x94\x8b\xa2\xca\x24\x2d\xf5\xa8\x11\xd7\x84\x25\x98\xb7\xd6\xb6\xa1\xb6\x73\xcc\x9e\xac\xf2\x1e\x27\x3b\xab\x6c\xf7\xf7\xc6\x03\x47\xc3\xb6\x30\x13\x95\x56\x34\xc7\x68\xc2\xcf\xf7\x64\x91\x9d\x34\x02\x3f\xbd\x37\x2b\x64\x29\x2a\x0d\x84\x6f\x5b\xb3\xf6\xa4\xce\xbe\x59\x07\xea\x7e\x95\x68\x01\x88\xe7\x80\xdc\xf6\x62\x32\xc8\x6c\x46\xf9\x2d\x50\xdd\xe2\x41\x1b\x97\x0e\x13\x26\x07\x2f\x61\x6f\xc6\x75\x2f\x80\xd6\xb8\xcf\xa6\x5d\xb4\x81\x31\xdb\x94\x30\xfa\x27\xba\x14\x57\x2d\xa9\x69\xed\xb6\x14\x08\x64\x28\x35\xa1\x7c\xef\xa8\x60\x7d\x10\xf8\xed\x83\x59\x79\x02\x92\x9c\xcb\xa8\xf2\x7d\xb5\x27\x73\x94\x1e\x9a\xa3\xb4\xc5\x20\xbc\xa7\xca\x4e\xe3\x9d\x15\xfb\x02\x22\x26\x32\xc2\x2e\x1c\xc8\x38\xa5\x17\x2d\xe2\x10\x68\x3a\x8b\x6b\xde\x5b\x51\x49\x1b\x15\xb5\x55\x1a\x37\x06\x64\xda\x3a\xda\x77\x60\x0c\x34\xff\x66\x81\xab\xf5\xc4\x47\x0b\xd6\x16\xef\xdc\xfa\xa8\xa3\x79\x36\xec\x29\x73\x83\x27\x4c\x2f\x73\x09\x37\xc0\x56\x99\x69\x44\x0b\x47\xd5\xa5\x68\x9f\xbe\x36\x73\xf7\xed\x18\x85\xba\x2a\x43\x00\xb6\xe5\xad\xbc\x44\xa5\xdc\x85\x6a\x9f\x10\xdb\x8c\xef\x9e\xde\x9b\xb5\xb8\x03\xca\x57\xa2\x41\x35\xab\xb2\xad\x9a\x7d\x1f\xbb\xe2\xb4\xcd\xd0\x46\xfd\x97\x6e\x65\x90\xa5\x3f\x71\x8e\xa9\xb8\x0f\x18\xce\x0a\xb3\xa2\xe2\x08\xda\xdb\xe3\x35\x66\x7d\xa8\x2c\xec\xd8\xdc\xd9\x97\x5d\xee\x81\xc4\xb7\xab\x59\x09\xe7\x83\x25\xe5\x44\x6e\x2d\xfa\x4b\xfb\x40\x61\xf0\xff\x27\xf6\xe5\x1a\xa5\x32\x97\xb4\xde\xae\x2b\x49\xb9\x6e\xcb\xd8\x6d\xfa\x2f\x22\x6e\x76\xd8\x8a\x0a\x88\x34\x05\x46\x79\x31\x09\xee\x9b\x56\x77\x5d\xa4\x76\x2b\x6d\x5a\x48\x77\xff\xcb\x36\x39\xcc\x9a\x45\x46\x39\x42\x22\xca\x6c\x1e\xf9\x95\x2b\xdb\xe4\x73\x48\x0a\x0d\xc7\xc3\xd7\xbc\xf6\x87\x62\x38\xb5\x54\x5f\x4f\xbe\x0d\x1e\xf4\x9a\x5b\xf1\x3f\xa2\xaf\xe1\xfe\xbd\xf9\x38\x76\x59\x2e\x50\xa7\xc1\xef\x80\xf6\x5e\xdb\x2a\xb5\x3f\x2a\x40\xb2\x21\xf7\x39\x96\x7a\x0d\xff\x84\x64\x43\x79\xf7\x7f\xbd\x2d\x11\xf2\xe6\x1a\xa4\x4e\x03\xae\xd3\x53\x78\x70\x2f\x6f\x49\x0d\x87\xdf\x0b\x21\x0a\x86\x47\x85\x60\x84\x17\x47\x42\x16\x8b\xc3\xa7\xd5\x9d\x78\xea\x4e\x9e\xab\xee\xff\xd4\x15\x3b\x1a\xfb\x7b\x8f\xf6\xa4\xba\xb8\xae\x1d\x51\xed\x4a\x3c\x8c\xef\x28\xea\xa3\x5f\xa5\x76\xc8\x6b\x7e\x24\x7b\x4a\xd8\xee\x87\xed\x48\x05\xef\xa8\x9f\xee\x06\xeb\xaa\x76\x32\x6b\xde\x73\xe3\xc3\xf0\x2e\x21\xcd\x0d\xeb\x87\x64\x74\x30\xef\xa4\x1c\xce\x1e\x71\xef\xfc\xf0\xaf\x48\xf6\xa7\x9c\x91\xf0\x81\xaf\xe7\x87\x07\xff\x0b\x00\x00\xff\xff\x29\x69\x8a\x52\xb6\x22\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x4f\xe3\x46\x10\xfe\xee\x5f\x31\xec\x59\x77\x70\x12\x58\xf4\x63\x90\x5b\x82\x40\x80\xc4\x91\x28\xc9\xb5\xaa\xe8\x9d\xb5\xb1\x37\xb6\x15\xc7\xeb\xee\xae\x0d\x94\xf0\xdf\x2b\xef\xc6\xeb\xb7\xcd\x4b\xdb\x2b\x5f\x90\x77\x5e\x77\xe6\x99\x67\x36\x1f\x8e\x9c\x79\x9c\x3a\x3c\xb2\xac\x22\x3c\x3e\x81\x37\x0b\x00\xc0\xf3\x8a\x10\x90\x7d\x89\xac\x77\xcb\x2a\x3f\xb4\xc4\xc7\x9c\x00\xb2\xcf\x11\xc4\xa9\x3c\x28\xff\xe2\x34\x16\x27\xfa\xab\x72\xe0\x95\xc7\x80\xec\xb7\xcb\xc1\x4f\xef\xa8\x25\xbe\xb8\xd0\x9f\xd8\x17\x71\x81\x05\x31\xd8\x57\xa2\xbd\x3e\x02\xb2\xc3\x4b\x2d\xdc\xeb\xc7\x0f\x32\xec\x2f\x71\x48\xb8\xc1\x4f\x2d\x3c\x20\x1f\x2e\x18\x7d\x35\x26\x23\x25\x7b\x3d\x84\x09\x9d\xe3\xe4\xe6\x85\xf8\x06\x27\xb5\x70\xaf\x9f\x3c\x0b\x19\x0e\x4c\x65\xd9\x48\xf6\x7a\xf8\xdc\xb6\xf5\xe9\x6a\x85\xd3\x00\x2a\x7c\x94\x67\x84\x63\xbf\x02\x8a\x6c\xba\x46\x4b\x11\x42\xa3\xf8\x1b\xf5\x22\x84\x24\x4e\x97\xda\xa2\x2e\xac\xb6\x8b\x17\xf0\x04\xa7\x7f\x01\xb2\x7f\xbd\x9f\xcc\xbe\x0e\x1f\x6e\x47\x08\xbe\x5d\x80\x88\x48\x8d\x3a\xe2\x47\x14\x6e\x18\xa3\x6c\x00\x8f\x14\x8a\x98\x89\x1c\x27\x21\x85\x67\xca\x96\x3c\xc3\x3e\x81\x98\xab\xf8\x04\xb0\x28\x8d\x61\x45\x57\x24\x15\xda\x45\x11\x42\x44\x92\xac\xd1\x78\x2d\x62\x44\xe4\x2c\x85\x73\x79\xb0\x88\x15\xf8\x83\x66\x46\xde\x78\x38\xbb\x73\x38\xf3\x1d\x39\x26\x56\x0b\xb3\x9d\xab\xa4\xbb\xaf\x52\x84\x0d\x0c\x57\x11\x55\x6d\x5f\x32\xca\x04\x68\x5b\x79\xa8\xbf\x5c\xfb\xb8\x08\xe5\xf8\x4d\x89\x10\x71\x1a\x72\x59\xe6\x13\xb3\xa9\xa5\xab\x86\x86\x2a\x56\x9c\x86\xd0\xc8\xcb\x1c\x52\xde\xd3\xb5\xdf\xea\x83\xc9\x68\x34\x1b\x9c\xda\x77\xa3\x2f\x37\xce\x99\xae\xfb\xbb\x63\x77\x63\x29\x4f\x5e\x6d\x39\x7a\xb8\x1e\x4f\xcf\x5d\x7b\x3c\x3d\xdf\xae\x71\x3b\x52\x11\xd5\xff\x1d\x9e\x86\xb3\x3b\x6f\x7a\xe7\xda\x52\xad\x53\xed\xdb\xd1\xd5\xfd\xa3\x01\x34\xe6\x80\x57\xf7\x8f\xae\x32\x51\xe1\x12\x4e\x0e\x32\x31\x25\x5e\x12\x6a\xab\x87\x6a\x5e\xbd\x05\x4e\x92\x39\xf6\x97\xaa\x69\x7f\xe6\x84\xbd\x56\x5d\x3b\x69\x64\x8f\xec\x8e\x3e\x02\x17\x90\x60\x39\xd9\x7a\x9b\xaa\x60\xed\x96\x0d\x5a\x05\x34\xdc\xc8\x6c\x66\x82\xdf\xe6\xb6\x1d\xe8\x57\xf7\xdc\x28\x49\x67\x9b\xc2\x0f\x64\x4f\xd0\xb6\x61\xf6\xae\xef\xa7\xc3\xab\x87\x1b\x6f\x3c\x19\x7d\x19\xcf\xb6\x5e\xac\xc4\x0a\x3a\xae\xed\x4e\xa0\x44\x0e\x6a\xa5\xb8\x5a\x06\x31\x83\xd3\x6c\xdb\x68\x76\x74\x14\x2e\xac\x2e\x3d\x4d\x08\x4e\x34\x23\xd5\xb3\xf8\x9f\x18\xe9\x5f\x51\x51\x87\x07\x4c\x54\xd4\x98\xe3\xeb\x4a\x7b\xd7\x24\xcb\x89\xeb\x0d\xa1\xa1\xbf\x06\x88\x5b\x06\xbc\x98\x40\xdf\x03\x42\x37\xa0\x9a\x55\x95\x57\x9e\x72\xd2\x20\x98\x3e\x41\x98\x07\xdd\x34\x82\x46\xea\xe8\x70\x57\xa3\xaf\x72\xfb\x1a\x9a\x7a\xde\x6f\xe6\x41\x1d\xff\x41\x7b\xa8\x0d\x00\x99\x64\x4b\xd6\x42\x40\x63\x21\x41\x7b\x23\xd7\xaf\x8b\x06\x12\x3a\xd3\x6f\x54\xbf\x6c\x8f\x94\x79\x67\xc1\xc7\x8f\x70\x04\x6f\x6a\x7f\x73\x01\x6b\x08\x19\xc9\x00\x7d\xaf\xb5\xfe\xb0\x11\xfc\x0c\x4e\x40\x0a\x27\xcd\x93\xe4\x02\xde\x0f\x59\x74\xf5\xf2\xcc\x05\xed\x6f\xd0\x0a\xe1\x34\xf5\x18\xa5\xc2\xb5\xc7\xbf\x5d\x4b\xc1\x73\x14\x27\x44\x32\x66\x47\x05\xc1\x91\x0b\x48\x76\x2b\xa0\x9d\x86\x2e\xfa\xea\x8d\x1d\x66\xee\x70\x4a\x9e\x3d\xad\xe2\xa5\x78\x45\x5c\xfb\xd8\xc7\x62\xb7\xab\xf6\xc3\x49\x71\xbb\xe4\xf2\x76\x55\xd7\x6b\x79\x85\x7e\x0c\x75\x8b\x7d\xe8\x83\xde\x33\xcb\xe0\xa9\x65\xd1\xc0\x4e\x8d\x2d\x13\xb2\x3e\x80\x88\x62\x0e\x5c\xb0\x38\xe3\x12\xb6\x09\xe6\x02\x32\x2c\xa2\x12\x46\x19\x4d\x49\x2a\x60\xc1\xe8\x4a\x0a\xcb\xf3\xb3\xee\xbb\xbe\xee\xda\xb1\x62\xac\x7e\xaf\xd6\xc0\x49\x00\x9f\xf8\xda\x79\xfa\xee\x7c\xfb\x6c\xaf\xd7\x9f\x54\xe9\x02\x9a\x12\x3d\xbb\x9b\xf7\xaa\x46\x05\x4d\x82\xfa\x96\x8d\xd5\x74\xf8\xa3\xab\x43\xf5\x7d\x76\xfd\x9a\x05\x8a\x58\x75\x1c\xb5\xce\x29\x84\x44\xc0\x69\x0e\x61\x2c\xa2\x7c\x7e\xe6\xd3\x95\x73\x4b\xc4\x54\x30\x82\x57\x4e\x11\x36\x5c\x4c\x48\x42\x71\x50\xfa\x28\x2b\xc4\x23\x92\x24\x90\x61\x26\x80\x2e\xfe\xb1\x57\x9d\x33\x93\x4e\xbb\xa3\xda\x2a\xc8\x66\x5c\x9f\xda\x15\x90\x78\xea\xea\x99\x76\x18\x9a\xb4\xf6\x4a\xdb\xc4\x32\xc3\xce\xa0\xa4\x66\xbb\xf3\x9b\xe5\x30\xf6\x6d\x92\xea\xef\x34\x07\x1e\xd1\x3c\x09\x80\x67\xc4\x8f\x17\xaf\x80\x35\x8f\x89\x08\x8b\x4a\x3a\x27\x40\x5e\x88\x9f\x0b\x12\xf4\xf6\x6a\x9d\xc0\xee\xbd\xba\x15\x57\x3f\x06\x58\x9a\x6b\x55\x70\xcf\xa7\x01\x71\xed\x5f\xfe\xa7\x66\x1e\xd2\xa1\x46\x25\xec\x46\x52\x92\x95\x0d\xb4\x6c\xfd\x1d\x00\x00\xff\xff\xfa\xbf\x87\xb3\x32\x10\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

