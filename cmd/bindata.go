// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\x4f\x6b\xfa\x40\x14\xbc\xef\xa7\x78\xbe\xdf\x1e\xd4\x1f\x21\xd0\x6b\x48\xa9\x54\x11\x41\x4d\x48\x8d\x0a\x45\xd6\x35\xae\x26\xb0\x26\x62\xfe\x60\xa9\x7e\xf7\x92\x4d\xd0\x26\x84\x7a\xe9\xa5\x39\x84\x64\x76\x66\xde\x32\xf3\xfe\xb5\xf4\x4d\x10\xea\x1b\x1e\xfb\x84\x64\xfb\x76\x07\x3e\x09\x00\x94\xef\xfc\x91\x91\xc7\x25\xb8\x6f\x03\xb6\x34\x1a\x40\xf7\x0e\x2a\x8e\xb9\xf6\x78\x2c\x00\xa9\x86\x10\x84\xd0\x3d\x77\x3b\x20\x3c\x3f\x02\xfc\x10\x31\x82\x61\x80\x88\xb9\xb7\xae\x88\xdc\xba\x28\x7d\x20\x8a\x45\x02\xff\xcf\x60\x54\x81\xb4\x04\xae\xf0\xf4\x0c\xfa\x56\x64\x7a\x98\x4a\x49\x14\xc6\x58\xb6\x07\xa4\x2f\x58\xfc\xbe\x03\x52\x35\x19\xa1\x65\x96\x53\x56\x70\xb9\x28\x23\x2d\xad\x70\x96\x8d\x9c\x33\xb9\x12\x92\xbb\xb2\x93\x90\x11\xdf\xde\x92\xb3\x1d\x6b\x62\xcf\xd8\xab\x35\x99\xf4\xa6\x7d\x93\xb2\xf9\xc8\x99\xb9\xbd\xf1\xd0\x62\x96\x33\x1a\x8e\xa6\xbd\x31\xab\x72\x94\x4c\x64\x5c\x02\xd2\x76\xb6\x2f\x3e\x35\x2d\xf6\x85\x94\x90\x37\xd3\x41\x35\xcc\x76\x06\xf3\x6f\x6e\xf6\xa2\x6f\x22\x96\x97\x38\x9e\xa2\xc3\x31\x61\x5e\x74\x38\xf0\x70\xfb\x73\x8d\x4d\x2d\xfe\x89\x12\x83\x9d\x2a\xc5\x5e\xf4\x8b\x4a\x68\x43\x24\x08\x2b\x03\x12\x5f\x84\x37\xdb\xc6\xdc\x94\x09\xb9\x73\xf2\x0c\x79\x9a\x44\x8c\x7b\x49\x90\xf1\x44\xa8\xa3\x5d\xf0\xbb\xeb\xf2\x70\x15\x4c\x5a\x5b\x8d\xda\x31\x36\x94\x0d\x06\xd4\x54\x48\xbe\x02\x00\x00\xff\xff\x24\x62\xee\x6b\xd7\x03\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xea\x1a\xb0\xbd\x80\xe2\x6b\xee\xbf\x16\x39\x20\xdd\xf4\xda\x00\x6d\x13\x24\xed\x2e\x0e\xbd\x56\xa0\xa5\xb1\x4c\x84\x22\xb5\x24\xe5\xc4\x8b\x7c\xf8\x03\x49\x3d\x48\x89\x4e\xba\x57\x77\x0d\x04\x49\xc8\x79\x71\x1e\xbf\x19\xd2\xcf\x9f\x2d\x57\x94\x2f\xd7\x54\x6d\x96\x47\x47\xeb\x9a\x67\x9a\x0a\x0e\xdb\xe2\x08\x00\x80\xae\x81\x0b\x0d\x99\xa8\xb9\x86\x29\x91\xc5\x16\xfe\x05\xcb\x1c\xb7\x4b\x5e\x33\x66\x49\xcc\x27\x13\x65\x49\x78\xde\x72\x99\x8f\x44\x5d\x4b\x6e\xff\x45\x9e\xdb\xdf\xcf\x01\xb3\x8d\x70\x62\xbe\xbc\xf8\x6a\xd7\xd4\x1d\xd5\xd9\x26\x5c\xb3\x12\x89\x42\xa0\x9c\xea\x6e\xc5\x7c\xd2\x6d\x91\x9a\xc5\x96\xfe\xf8\x38\x19\xf2\x90\x4c\xd3\x2d\xd1\x38\xe2\x6b\x37\x1e\xe1\xcd\x71\x2f\x77\x64\xcb\xb2\x64\x79\x45\xb2\x5b\x52\xa0\x1a\xb1\x44\xb6\x1a\x2d\x4a\x4b\xb1\x8b\xa8\xb0\xeb\x8f\xd8\x57\x30\xb1\x22\xec\xcd\x3d\x66\x23\xe6\x7e\xeb\x11\xfe\xba\x2a\x24\xc9\xc7\x87\x1b\xae\x5b\xe2\xd9\x2f\xb3\x80\xb0\x8f\xb1\xd3\xd0\x85\xd6\xfc\x78\x99\xd3\xc6\xe8\x28\xee\x78\xbb\xbc\x2d\x80\x51\x7e\xeb\x58\x03\xce\x81\xd3\xe8\x1a\xbe\x40\xf2\x27\x4c\xa6\xbf\x5d\x5c\x7f\xfa\x7c\xf6\xfe\xed\xe5\x04\xfa\x53\xd9\x7c\x7a\x23\xa5\x90\x2f\xe1\xa3\x80\x2d\x95\xba\x26\xac\x10\x70\x27\xe4\xad\xaa\x48\x86\x40\x95\x4b\x09\x04\xa2\x41\x6f\x10\x4a\x51\x22\xef\xd3\x6a\x5b\xc0\x06\x59\x15\x0b\xa4\x4b\x61\x78\x11\x24\x71\x96\x43\x6f\x4b\x7a\x75\xf6\xe9\xdd\x52\xc9\x6c\x19\x39\x4a\x90\x30\xee\x20\x7c\xdf\x41\x22\x29\x66\x05\x76\xac\x73\xaf\x04\x17\x90\x30\x0d\x27\x1e\xbb\x42\x0d\x36\xea\x27\x5f\x61\xbe\x22\x0a\x39\x29\x11\xa6\x57\xbf\x9f\x2f\x42\x59\x86\xb0\xf7\xcd\x7c\x5b\xd8\x1a\xbb\x41\xad\x29\x2f\x54\x93\x3a\x27\x36\x75\x16\x3d\x47\x52\xdc\x43\x67\x36\x4c\x3b\x01\x47\x5d\x0c\xce\x9c\xe5\x94\x17\x9e\x77\xe2\xfc\xd6\x67\x30\x7d\x77\xf9\xe1\xcd\xf2\xb8\x8b\xd8\xd2\x63\xeb\xf8\x04\xcb\xd3\x42\x54\x44\x6f\x60\xfa\xf6\xd2\xe3\x2b\x44\x68\x5c\xda\x4b\xbf\x7c\x7f\xde\x92\xf6\xec\x2d\xb2\xf4\x51\x78\x7b\xf9\xfa\xe2\xe3\x64\xe0\xc2\x98\xa8\xd7\x17\x1f\xc1\x51\xbb\xd3\x32\x85\xdf\xc7\x13\xb3\xc9\x40\xed\x38\x20\x63\x11\x86\x36\xfd\xf7\xc5\xcd\x3b\x98\x9a\x3f\x9f\xa2\xbc\x79\x07\x73\x1b\x86\x44\xc1\x4b\xcb\x01\x0f\x90\xd5\x1a\x92\x15\x9c\x24\x5e\x20\x1d\x4a\xa4\x6b\xc2\xd8\x8a\x64\xb7\x36\x01\xfe\xa8\x51\xee\xda\x0c\x58\x78\x29\x37\x1d\x52\x9f\x82\x96\x35\x46\x7c\xd6\x3a\x3c\x8c\xf1\xcb\xa8\x0b\xf6\x7b\x31\x2e\x25\xee\xae\xc6\xc7\x83\x42\x34\xde\xb5\x64\xe5\x6d\x4e\x25\x24\x55\xbc\x54\x43\x0a\x17\xdb\x40\xba\xb3\xa3\xd1\x61\x8d\xd8\x07\x46\xe9\xf9\xc5\xcd\xd9\xeb\xf7\x6f\xd2\xab\xeb\xcb\x0f\x57\x9f\xfc\x84\x6a\xb1\x40\x41\x92\x81\x69\xaf\x69\x25\x45\x59\x69\x48\x4d\x5e\x7a\x0b\x23\x0e\x88\x6d\x76\xa5\x66\xd2\x77\xde\x5b\xb0\x80\x49\x88\xe7\xfb\xa4\xb7\x00\xd6\xfe\xde\x16\x5d\xaf\xbc\x46\xc2\x22\x00\x36\x00\xa4\xbf\x0f\x8b\x23\xcd\x76\x84\xc5\x3d\xf6\x9c\xb7\xd4\x03\xf4\xe9\x43\xda\xe5\x4b\xa4\x50\x43\x2a\x17\xf9\xbd\x79\xdb\xd0\xc5\xa8\xba\x92\xfd\xc1\x5c\xc1\x68\xf4\x83\x64\x1a\x86\xf8\x29\x0e\x8c\x27\x45\x58\x54\x08\x11\xdc\x46\x88\x14\x63\xb3\xb3\xef\xf8\x8f\x93\x3c\x46\x30\x88\xc7\x78\xdb\x9a\x10\xcb\xd3\x7e\xa0\xfa\x8e\x66\xf9\x44\x1e\x1f\x28\x97\xc3\x7c\x1e\x4f\x7c\x41\x42\xfb\x75\x09\x83\x7e\x3e\xe8\xa7\x5d\xd4\xbc\x79\x2c\x9c\x1c\x5d\xfb\x3e\x7a\x64\xec\x78\x05\x0d\x23\xa3\x4a\xc3\x83\x1d\xf1\x0b\x89\x15\x4c\xbe\xf5\x74\xff\x9d\x4e\xa2\xb3\xbe\xd5\x37\x9a\x54\xc6\x51\xf1\x87\x4a\x1b\x4f\x66\xfb\x79\xef\xcb\xc1\xc1\x7e\x60\x42\xb2\xe1\xfa\x5c\xe5\x0e\x02\x3a\x0d\x76\xaf\x10\x50\x18\xed\x35\x14\x54\x6f\xea\xd5\x71\x26\xca\xe5\x5b\xd4\x37\x5a\x22\x29\x97\xdb\xc2\x13\x71\x8d\x4c\x90\xdc\xc8\x30\x01\x55\x1b\x64\x0c\x2a\x22\x35\x88\xf5\x5f\x96\xda\xb8\x0a\xb7\x84\x41\x92\x38\x59\xa6\x02\xe1\x01\x94\xa8\x65\x86\xc3\x00\x05\xce\x99\x40\x42\x42\x4f\x3c\x3b\x1d\xd3\x0c\xc0\xf7\x3a\x00\xc2\x80\xd6\x8f\x5e\x3f\x8f\x8f\x49\xe2\xa1\x1c\xdc\x3b\xbe\xa3\xc6\xfc\x02\xfa\x8f\xa8\x41\x6d\x44\xcd\x72\x50\x15\x66\x74\xbd\x03\xd2\x65\xaf\xde\x10\xdd\xee\xae\x10\xf0\x1e\xb3\x5a\x63\x3e\x6a\x09\x91\xab\x4f\xbc\x25\xfc\xec\x54\x33\xf1\x0c\xea\xac\x55\xaa\x34\xd1\xb5\x4a\x33\x91\x23\x4c\xdd\x3f\x07\x0d\xf1\x77\x44\xce\xf3\xca\xd4\x33\x67\x18\x51\x7b\x39\xa9\xb5\xe8\x6f\x66\x49\x22\x78\xb2\x25\x92\x92\x15\x43\xb8\xfa\xfd\xbc\x35\xdc\x49\x81\x24\xa1\x2a\x69\x42\x96\xa8\x7a\xa5\x34\xd5\xb5\x11\xb6\xef\xba\xdf\xdc\xf7\xd7\x94\xe7\x40\x38\x18\x6d\x49\x9b\x9c\x76\xc0\x61\x01\x30\xf4\x5b\xa9\x14\x42\xdb\x9b\x8b\xdd\xbf\xdb\x50\x86\xa0\x51\x99\x4c\x1b\x10\x19\x77\x4d\x7c\x54\xb7\x64\xc9\x1a\x26\x43\x52\xef\x9e\x11\x0e\x4b\x46\x3d\xc7\xbb\xde\x95\xa9\xbd\x38\xcd\x33\xa2\x1f\x97\xb2\x08\xc4\xd0\x35\xac\xb0\xa0\xdc\x02\xa9\x3d\xd2\x1f\x7d\xe3\x7c\x05\x42\x36\x27\x88\xa8\x7a\x76\xea\x25\xe7\xab\xa0\x09\x44\x03\x3f\x16\x11\x36\xae\x01\xbf\x17\x96\xe1\xf6\x73\xd0\x1b\xaa\x40\x69\x49\x2b\x65\x01\x8f\x11\xa5\xc1\xde\xb6\x32\x51\x56\x82\x23\xd7\xb0\x96\xa2\xb4\x9b\x66\xfd\x38\x6c\x50\x83\x78\xcc\x9b\xd7\x9d\xc1\xf2\x03\x28\xcc\x61\xa6\x1e\x96\x5f\xbe\x2d\xbf\xfe\x32\x7d\x78\x98\x2d\x42\xac\x19\x27\xe4\xd1\x91\xb1\x80\xa1\x49\xcd\xcc\x38\x20\x49\xf0\x3e\x63\xb5\xa2\xdb\xc8\x1e\x87\x89\xf5\xef\x3c\x75\x33\x0e\xaf\xcb\x15\xca\x54\xac\xd3\xac\xcc\x53\x22\x0b\x95\xde\x89\x54\x54\x5a\x2d\xe0\x14\x5e\x4c\x20\xb9\x27\xbd\x4b\xed\x27\xc9\x61\x72\xd6\xae\x90\x06\xa7\x68\x16\xeb\xfc\x93\xc3\xe8\xef\xdf\x1b\x5a\xfd\xbf\x6e\x08\x2f\xd0\x3a\xdb\x28\x33\x20\x9e\x53\x89\x99\x16\x72\x07\x5a\xb8\x9e\x24\x33\x6f\x51\xac\xed\x62\x33\x87\x1c\xda\xc2\x1e\x02\x5b\x0b\xcf\xfb\x15\xa3\x37\xab\xa5\x34\x39\xf2\xf3\x9c\xd4\x0e\x36\x7d\x90\xae\xb1\x14\x5b\x54\x20\x38\x9a\xba\x2a\x6b\xa6\x69\xc5\xbc\xc3\xdb\xd1\x86\x30\x66\x2c\xa4\x12\x32\xc1\x35\x72\xad\x0e\x64\x10\x72\x55\x4b\x04\xcf\xa0\x33\xb8\x93\xa4\xaa\x50\xc2\x5a\x48\xc8\xb1\x72\x2d\x8d\x72\xa5\x09\x63\xae\xb0\x72\xac\x90\xe7\xc8\x33\x8a\x0a\x28\xb7\x6b\xd1\x99\x92\x2b\x8d\x24\xb7\xe3\x06\xf2\x5c\xc8\x43\x59\x6d\x9a\x16\xf8\x56\xbf\xb9\xaf\x84\x72\x51\x54\x99\xa4\x95\x1e\x35\xe2\x2d\x61\x09\xe6\xad\xb5\x6d\xa8\xed\x1c\x73\x20\xab\xbc\x27\xcb\xce\x2a\xdb\xfd\xbd\xf1\xc0\xd1\xb0\x1d\xcc\x45\xad\x15\xcd\x31\x9a\xf0\x8b\x03\x59\x64\x27\x8d\xc0\x4f\xef\xcc\x0a\x59\x89\x5a\x03\xe1\xbb\xd6\xac\x03\xa9\xb3\x2f\xd9\x81\xba\x5f\x25\x5a\x00\xe2\x39\x20\xb7\xbd\x98\x0c\x32\x9b\x51\x7e\x0b\x54\xb7\x78\xd0\xc6\xa5\xc3\x84\xc9\xd1\x73\x38\x98\x71\xdd\xbb\xa0\x35\xee\x93\x69\x17\x6d\x60\xcc\x36\x25\x8c\xfe\x89\x2e\xc5\x55\x4b\x6a\x5a\xbb\x2d\x05\x02\x19\x4a\x4d\x28\x3f\x38\x2a\x58\x1f\x04\x7e\x7b\x6f\x56\x9e\x80\x24\xe7\x32\xaa\x7c\x5f\x1d\xc8\x1c\xa5\x87\xe6\x28\x6d\x31\x08\xef\xa9\xb2\xd3\x78\x67\xc5\xa1\x80\x88\x89\x8c\xb0\x0b\x07\x32\x4e\xe9\x45\x8b\x38\x04\x9a\xce\xe2\x9a\xf7\x4e\xd4\xd2\x46\x45\xed\x94\xc6\xd2\x80\x4c\x5b\x47\x87\x0e\x8c\x81\xe6\xdf\x2c\x70\xb5\x9e\xf8\x60\xc1\xda\xe2\x9d\x5b\x1f\x75\x34\xcf\x86\x03\x65\x6e\xf0\xa0\xe9\x65\x2e\xe1\x06\xd8\x6a\x33\x8d\x68\xe1\xa8\xba\x14\xed\xd3\xd7\x66\xee\xa1\x1d\xa3\x50\xd7\x55\x08\xc0\xb6\xbc\x95\x97\xa8\x94\xbb\x50\x1d\x12\x62\x9b\xf1\xdd\xd3\x7b\xb3\x11\x77\x40\xf9\x5a\x34\xa8\x66\x55\xb6\x55\x73\xe8\x63\xd7\x9c\xb6\x19\xda\xa8\xff\xdc\xad\x0c\xb2\xf4\x27\xce\x31\x35\xf7\x01\xc3\x59\x61\x56\x54\x1c\x41\x7b\x7b\xbc\xc6\xac\x67\xca\xc2\x8e\xcd\x9d\x43\xd9\xe5\x1e\x48\x7c\xbb\x9a\x95\x70\x3e\x58\x51\x4e\xe4\xce\xa2\xbf\xb4\x0f\x14\x06\xff\x7f\x62\x5f\xde\xa2\x54\xe6\x92\xd6\xdb\x75\x25\x29\xd7\x6d\x19\xbb\x4d\xff\x45\xc4\xcd\x0e\x3b\x51\x03\x91\xa6\xc0\x28\x2f\x26\xc1\x7d\xd3\xea\xde\x16\xa9\xdd\x4a\x9b\x16\xd2\xdd\xff\xb2\x32\x87\x79\xb3\xc8\x28\x47\x48\x44\x95\x2d\x22\xdf\x7d\x65\x65\xbe\x80\xa4\xd0\xf0\x62\xf8\x9a\xd7\x7e\x7d\x0c\xa7\x96\xea\xcb\xc9\xd7\xc1\x83\x5e\x73\x2b\xfe\x47\xf4\x35\xdc\xbf\x37\xbf\x88\x5d\x96\x0b\xd4\x69\xf0\xed\xa0\xbd\xd7\xb6\x4a\xed\x97\x0a\x90\x94\xe4\x3e\xc7\x4a\x6f\xe0\x9f\x90\x94\x94\x77\x7f\xeb\x5d\x85\x90\x37\xd7\x20\x75\x1a\x70\x9d\x9e\xc2\x83\x7b\x79\x4b\xb6\x30\xfb\x56\x08\x51\x30\x3c\x2e\x04\x23\xbc\x38\x16\xb2\x58\xce\x9e\x56\x77\xe2\xa9\x3b\xf9\x5e\x75\xff\xa7\xae\xd8\xd1\xd8\xdf\x7b\xb4\x27\xd5\xc5\x75\xed\x89\x6a\x57\xe2\x61\x7c\x47\x51\x1f\x7d\x2b\xb5\x47\x5e\xf3\x95\xd9\x53\xc2\xf6\x3f\x6c\x47\x2a\x78\x4f\xfd\x74\x37\x58\x57\xb5\x93\x79\xf3\x9e\x1b\x1f\x86\xf7\x09\x69\x6e\x58\x3f\x24\xa3\x83\x79\x27\x65\x36\x7f\xc4\xbd\x8b\xd9\x5f\x91\xec\x4f\x39\x23\xe1\x03\x5f\x2f\x66\x47\xff\x0b\x00\x00\xff\xff\xdc\x2c\x2f\x1e\xcc\x22\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x4f\xe3\x46\x14\x7e\xf7\xaf\x38\xcc\x5a\xbb\xb0\x12\x58\xe9\x63\x90\x5b\x82\x40\x80\xc4\x92\x28\x61\x5b\x55\x74\xd7\x9a\xd8\x13\xdb\x8a\xe3\x71\x67\xc6\x06\x4a\xf8\xef\x95\x67\xe2\xf1\x6d\x72\x69\xbb\xe5\x29\x9e\x73\x99\x73\xf9\xce\x77\x86\x0f\x47\xce\x3c\x4e\x1d\x1e\x59\x56\x11\x1e\x9f\xc0\x9b\x05\x00\xe0\x79\x45\x08\xc8\xbe\x40\xd6\xbb\x65\x95\x1f\x5a\xe2\x63\x4e\x00\xd9\x03\x04\x71\x2a\x0f\xca\xbf\x38\x8d\xc5\x89\xfe\xaa\x1c\x78\xe5\x31\x20\xfb\xed\x62\xf8\xd3\x3b\x6a\x89\xcf\xcf\xf5\x27\xf6\x45\x5c\x60\x41\x0c\xf6\x95\x68\xaf\x8f\x80\xec\xf0\x52\x0b\xf7\xfa\xf1\x83\x0c\xfb\x4b\x1c\x12\x6e\xf0\x53\x0b\x0f\x88\x87\x0b\x46\x5f\x8d\xc1\x48\xc9\x5e\x0f\x61\x42\xe7\x38\xb9\x7e\x21\xbe\xc1\x49\x2d\xdc\xeb\x27\xcf\x42\x86\x03\x53\x59\x36\x92\xbd\x1e\x3e\xb7\x6d\x7d\xba\x5a\xe1\x34\x80\x0a\x1f\xe5\x19\xe1\xd8\xaf\x80\x22\x9b\xae\xd1\x52\x84\xd0\x28\xfe\x46\xbd\x08\x21\x89\xd3\xa5\xb6\xa8\x0b\xab\xed\xe2\x05\x3c\xc1\xe9\x5f\x80\xec\x5f\xef\xa6\x8f\x5f\x47\xf7\x37\x63\x04\xdf\xce\x41\x44\xa4\x46\x1d\xf1\x23\x0a\xd7\x8c\x51\x36\x84\x07\x0a\x45\xcc\x44\x8e\x93\x90\xc2\x33\x65\x4b\x9e\x61\x9f\x40\xcc\xd5\xfd\x04\xb0\x28\x8d\x61\x45\x57\x24\x15\xda\x45\x11\x42\x44\x92\xac\xd1\x78\x2d\x62\x44\xe4\x2c\x85\x81\x3c\x58\xc4\x0a\xfc\x41\x33\x22\x6f\x32\x7a\xbc\x75\x38\xf3\x1d\x39\x26\x56\x0b\xb3\x9d\x54\xd2\xdd\xa9\x14\x61\x03\xc3\xd5\x8d\xaa\xb6\x2f\x19\x65\x02\xb4\xad\x3c\xd4\x5f\xae\x7d\x5c\x84\x72\xfc\x66\x44\x88\x38\x0d\xb9\x2c\xf3\x89\xd9\xd4\xd2\x55\x43\x23\x75\x57\x9c\x86\xd0\x88\xcb\x7c\xa5\xcc\xd3\xb5\x6f\xc7\x5f\xae\x9d\x33\x5d\x65\xc7\xee\x3a\x56\x66\x5e\x6d\x37\xbe\xbf\x9a\xcc\x06\xae\x3d\x99\x0d\xb6\x6b\xdc\x8c\x95\xfb\x37\xf5\x63\x78\xaa\x2e\x0a\xe9\xfb\x0e\xaf\xa3\xc7\x5b\x6f\x76\xeb\xda\xe5\x0f\xab\x53\xe6\x9b\xf1\xe5\xdd\x83\x01\x2d\xe6\xcb\x2f\xef\x1e\x5c\x65\xa2\xae\x4b\x38\x39\xc8\xc4\x94\x44\xc9\xa4\xad\xe6\xa9\x41\xf5\x16\x38\x49\xe6\xd8\x5f\xaa\x6e\xfd\x99\x13\xf6\x5a\xb5\xeb\xa4\x11\x3d\xb2\x3b\xfa\x08\x5c\x40\x82\xe5\x64\x6b\x36\x55\xf1\xda\xbd\x1a\x1a\xa3\xdb\x9a\x9f\xd9\x89\x09\x85\x9b\xdc\x3b\x13\x50\x65\xbd\x51\x92\xce\x36\x6d\x18\xca\x0e\xa1\x6d\x33\xed\x5d\xdd\xcd\x46\x97\xf7\xd7\xde\x64\x3a\xfe\x32\x79\xdc\x9a\x66\x89\x22\x74\x5c\xdb\x9d\x40\x89\x29\xd4\x0a\x71\xb5\x0c\x62\x06\xa7\xd9\xb6\x09\xed\xe8\x28\x94\x58\x5d\x96\x9a\x12\x9c\x68\x62\xaa\x47\xf2\x3f\x11\xd3\xbf\x62\xa4\x0e\x1d\x98\x18\xa9\x31\xce\x57\x95\xf6\xae\x81\x96\xb3\xd8\x1b\x4f\x43\x7f\x0d\x80\xb7\x0c\x78\xd9\x0e\xb2\x06\x10\xba\x17\xaa\xc9\x55\x71\xe5\x29\x27\x0d\x9e\xe9\x53\x87\x79\xec\x4d\x03\x69\x24\x95\x0e\x85\x35\xfa\x2a\x97\xb0\xa1\xa9\x83\x7e\x33\x0f\xea\xf8\x0f\x5a\x47\x6d\x00\xc8\x20\x5b\xb2\x16\x02\x1a\x7b\x09\xda\x8b\xb9\x7e\x64\x34\x90\xd0\x99\x7e\xa3\xfa\x45\x7b\xa4\xcc\xab\x0b\x3e\x7e\x84\x23\x78\x53\x6b\x9c\x0b\x58\x43\xc8\x48\x06\xe8\x7b\xad\xf5\x87\x8d\xe0\x67\x70\x02\x52\x38\x69\x9e\x24\xe7\xf0\x7e\xc8\xbe\xab\x77\x68\x2e\x68\x7f\x91\x56\x08\xa7\xa9\xc7\x28\x15\xae\x3d\xf9\xed\x4a\x0a\x9e\xa3\x38\x21\x92\x3f\x3b\x2a\x08\x8e\x5c\x40\xb2\x5b\x01\xed\x34\x74\xd1\x57\x6f\x2c\x37\x73\x87\x53\xf2\xec\x69\x15\x2f\xc5\x2b\xe2\xda\xc7\x3e\x16\xbb\x5d\xb5\xdf\x4f\x8a\xe9\x25\xb3\xb7\xab\xba\x5e\xcb\x14\xfa\x77\xa8\x2c\xf6\xa1\x0f\x7a\xaf\x2d\x83\xa7\x96\x45\x03\x3b\x35\xb6\x4c\xc8\xfa\x00\x22\x8a\x39\x70\xc1\xe2\x8c\x4b\xd8\x26\x98\x0b\xc8\xb0\x88\x4a\x18\x65\x34\x25\xa9\x80\x05\xa3\x2b\x29\x2c\xcf\xcf\xba\xcf\xfb\xba\x6b\xc7\x8a\xb1\xfa\xbd\x5a\x03\x27\x01\x7c\xe2\x6b\xe7\xe9\xbb\xf3\xed\xb3\xbd\x5e\x7f\x52\xa5\x0b\x68\x4a\xf4\xec\x6e\x9e\xad\x1a\x15\x34\x09\xea\x2c\x1b\xab\xe9\xf0\xb7\x57\x87\xea\xfb\xec\xfa\x35\x0b\x14\xb1\xea\x7b\xd4\x72\xa7\x10\x12\x01\xa7\x39\x84\xb1\x88\xf2\xf9\x99\x4f\x57\xce\x0d\x11\x33\xc1\x08\x5e\x39\x45\xd8\x70\x31\x25\x09\xc5\x41\xe9\xa3\xac\x10\x8f\x48\x92\x40\x86\x99\x00\xba\xf8\xc7\x5e\x75\xcc\x4c\x3a\xed\x8e\x6a\xab\x20\x9b\x71\x7d\x6a\x57\x40\xe2\xa9\xab\x67\xda\x61\x68\xda\xda\x2b\x6d\x13\xcb\x0c\x3b\x83\x92\x9a\xed\xce\xbf\x2e\x87\xb1\x6f\x93\x54\x7f\xa7\x39\xf0\x88\xe6\x49\x00\x3c\x23\x7e\xbc\x78\x05\xac\x79\x4c\x44\x58\x54\xd2\x39\x01\xf2\x42\xfc\x5c\x90\xa0\xb7\x57\xeb\x00\x76\xef\xd5\xad\xb8\xfa\x31\xc0\xd2\x5c\xab\x2e\xf7\x7c\x1a\x10\xd7\xfe\xe5\x7f\x6a\xe6\x21\x1d\x6a\x54\xc2\x6e\x04\x25\x59\xd9\x40\xcb\xd6\xdf\x01\x00\x00\xff\xff\x94\x6b\xfc\xd3\x39\x10\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

