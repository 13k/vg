// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdb\x6e\xdb\x38\x13\xbe\xf7\x53\x4c\xdd\x00\xb1\x0b\x28\xfe\xd3\xcb\x16\xf9\x81\xb4\x09\xda\x00\x69\x13\xf4\xb0\xbd\x08\xb2\x02\x4d\x8d\x24\x22\x14\xa9\x25\x47\x72\xb2\xc8\xc3\x2f\x48\x59\x47\xd3\xe9\x8d\x77\x05\x04\x81\xe6\xf8\xcd\x91\x94\x5f\xbf\x5a\xad\x85\x5a\xa5\xc2\xe6\xab\xd9\x2c\xad\x14\x27\xa1\x15\xd4\xd9\x0c\x00\x40\xa4\xa0\x34\x01\xd7\x95\x22\x38\x62\x26\xab\xe1\xff\xb0\x4a\xb0\x5e\xa9\x4a\x4a\x2f\xe2\x1e\xae\x8b\x82\xa9\xa4\xd5\x72\x8f\x41\xaa\x8c\xf2\xaf\xa8\x12\xff\xff\x35\x20\xcf\x75\x63\xe6\xee\xf4\xde\xd3\xec\x46\x10\xcf\xc7\x34\x6f\x91\x59\x04\xa1\x04\x75\x14\xf7\xc4\x75\x16\x3b\x62\x2b\x7f\x72\x12\x4d\x75\x18\x27\x51\x33\xc2\x1d\xbd\x96\xf1\x82\x6e\x82\x7b\xb5\x03\x2c\xaf\xc2\x93\x92\xf1\x07\x96\xa1\xdd\x51\x09\xb0\xbc\xca\xf1\x9b\xe3\x91\x6c\x9f\xbc\x06\x5a\x97\x33\xf7\x37\x28\x49\x1b\xfc\x2c\x1c\x91\x27\xd7\x19\x48\xa1\x1e\x1a\xd5\x91\xe6\x04\x8d\x48\xe1\x0e\xa2\xbf\x61\x7e\xf4\xc7\xd5\xb7\x1f\x3f\xcf\xaf\x3f\xdd\xcc\xa1\x4f\x87\x2f\xd4\xa5\x31\xda\xbc\x83\xaf\x1a\x6a\x61\xa8\x62\x32\xd3\xb0\xd1\xe6\xc1\x96\x8c\x23\x08\xdb\xe4\x1a\x81\x11\x50\x8e\x50\xe8\x02\x55\x5f\xaf\x3a\x83\x1c\x65\x19\xca\x50\xd3\x1b\x70\x3a\xea\x0e\x9e\x40\x8f\x25\xbe\x3d\xff\xf1\x79\x65\x0d\x5f\x05\x42\x19\x55\xa2\x09\x44\xed\x0b\x24\x50\x3b\x6f\xb0\x53\x5d\x0c\x7a\x7b\x09\x91\x24\x78\x3b\x50\xb7\x48\xe0\xdb\xe5\xed\x3d\x2c\xd6\xcc\xa2\x62\x05\xc2\xd1\xed\xaf\x8b\xe5\xd8\x96\x13\x8c\xb2\x47\xe8\x40\x6c\xdb\xec\xed\x7d\x98\xed\x03\x84\xa3\xcf\x37\x5f\x2e\x57\x27\x5d\x7a\x57\x7d\x10\x63\xb3\x71\xaf\x78\x73\x7d\xf1\xe9\xa6\xd1\x6e\xfe\xbf\x28\xf8\xe1\xea\xab\x93\xfb\x70\xf5\xf5\x05\xb1\xc6\x9a\xb7\x35\x92\x6a\xfd\x8c\x51\xbf\x0b\xf9\xdd\x7a\x9a\x14\x70\x2d\x54\x63\xb1\x78\x48\x84\x81\xa8\x0c\x97\x78\x2c\xd1\xa0\x1d\x59\x6f\xc3\xf5\x3e\x7a\x9c\x81\x26\x8e\x2f\xae\xbe\x9f\x7f\xb8\xbe\x8c\x6f\xbf\xdd\x7c\xb9\xfd\x31\x6c\x85\xb6\x87\x2c\x44\x1c\xdc\xbe\x8b\x4b\xa3\x8b\x92\x20\xd6\x32\x89\x07\x84\x1d\x0d\x08\x31\xbb\x31\x71\xcd\xb7\xe8\x11\x2c\x61\x3e\x5e\x05\xfb\xac\xb7\x8d\xdf\x8d\xfa\xa8\xc9\x27\x4d\xfb\xdf\xcd\x6b\x60\xd3\x05\xe7\xd5\xd7\xa6\x2b\x7c\xa0\xef\xc6\x52\x4d\x09\x43\x7d\x3c\x94\x0b\x49\x1d\xa0\xde\x18\xac\xe0\xa8\x21\xa6\x65\xfa\x9d\x06\x86\x0b\x3b\x5e\x08\xd8\x0f\x7c\x90\x18\x8f\xe3\xc7\xc0\x5c\xee\xe7\x4e\x92\xbc\xcb\xf6\xea\x93\xce\xf2\xfb\xb3\x22\xdd\x1f\x1e\x51\xa4\x55\x54\x33\x23\xd8\x5a\x22\xdc\xfe\xba\x68\x53\x6d\x89\x51\x65\x21\x8a\x84\x8d\xb6\x67\x54\x64\xab\xb5\x25\x41\x95\x33\xb6\xef\xa8\xdf\x9e\xf5\xa9\x50\x09\x30\x05\xce\x5b\xb4\xf5\xd6\xcc\x92\xc4\x1e\xb5\x84\x9e\x15\x1b\xad\xc9\x2f\x57\xcf\xdf\xe4\x42\x22\x10\x5a\xb7\x9d\x27\x42\xaf\xce\x60\xde\x8f\x99\x48\x1b\xb1\x28\x85\xf9\x54\x74\xb0\x5d\xc7\x73\xe9\xdc\x2b\xdc\xc4\x1d\x3b\xf6\xbb\x7d\xc1\x19\xbd\x6c\x65\x39\x32\x23\x52\x58\x63\x26\x94\xbf\x27\xf9\x90\xfe\xea\xeb\xfb\x1e\xb4\xd9\x46\x10\x70\xf5\xea\x6c\xb0\x0e\xdf\x77\x83\x35\x7c\xea\x0c\xfa\x53\x7e\xd7\xc4\x78\x19\x4d\xf4\x07\x65\x99\xb2\x5f\x03\xe5\xc2\x82\x25\x23\x4a\xeb\x97\x81\x64\x96\xa0\x64\x94\xbb\xeb\x48\xa9\x15\x2a\x82\xd4\xe8\xc2\x33\x1d\xfd\x64\x7c\x26\x4e\xea\xb1\xd8\xde\xec\x26\xe4\x67\xb0\x98\xc0\xb1\x7d\x5e\xdd\xfd\xb9\xba\x7f\x73\xf4\xfc\x7c\xbc\x1c\xef\xbc\xdd\x86\x9c\xcd\x1c\x02\x89\xae\x35\xb9\x4b\x40\x14\xe1\x23\x97\x95\x15\x75\x80\xa7\x60\xee\xf3\xbb\x88\x9b\x51\x54\x55\xb1\x46\x13\xeb\x34\xe6\x45\x12\x33\x93\xd9\x78\xa3\x63\x5d\x92\x5d\xc2\x19\x9c\xce\x21\x7a\x64\x7d\x4a\x01\x20\x4a\x60\x7e\xde\xbe\x33\xb0\x25\x72\x91\x0a\x1e\x5a\xa1\xf3\xc3\x78\xef\x2f\x44\x8d\xf7\x8f\x39\x53\x19\xfa\x44\x3b\x57\x42\x65\x90\x08\x83\x9c\xb4\x79\x02\xd2\x9e\x61\x0d\x1f\x10\x75\xea\x89\xdb\x75\x7e\x68\x7c\xfd\x01\xd0\xe0\xbb\xe8\xdf\x9d\x57\x5e\x19\xe3\xba\xe3\xdf\x4b\x50\x82\x96\x8c\x7e\x82\xb6\x3c\xdf\xb0\xd0\x35\x5a\xd0\x0a\xdd\x3c\x15\x95\x24\x51\xca\x41\xe0\xe0\xae\xcf\x4c\x4a\x87\x4f\x18\xe0\x5a\x11\x2a\xb2\x07\x82\x83\xca\x56\x06\xa1\x83\x73\x0e\x1b\xc3\xca\x12\x0d\xa4\xda\x40\x82\x25\x50\xce\x08\x84\xb2\xc4\xa4\x6c\xc6\x29\xc1\x12\x55\x82\x8a\x0b\xb4\x20\x94\xa7\x05\x0f\x65\x65\x09\x59\xe2\x2a\x5a\xa3\x4a\xb4\x39\x14\xe6\x9a\xc9\x76\x5e\x1d\xe6\xcb\xc7\x52\xdb\xa6\x7e\x96\x1b\x51\x52\x83\xd9\xe6\xba\x92\x09\xac\xd1\x2b\x44\x98\xb4\x58\xdb\x22\xdb\x1c\xa5\x3c\x10\x26\x7f\xbb\x18\x60\xfa\xec\xde\xd9\x5a\x57\x04\x4c\x3d\xb5\x9f\x41\x07\x72\xe6\xbf\x12\x07\xce\x3e\x1a\xf4\x03\xae\x12\x40\xe5\x4f\x3a\x36\xe9\x1f\xf7\xdd\x04\x82\xda\x89\x6b\x33\xd0\x4d\xdd\x81\x80\x79\x37\x03\x60\xd7\xee\xfd\x37\x73\xd5\x62\xf2\x4b\xfb\xf0\x80\x2c\x8d\x01\x59\xf2\xc3\x84\x8f\xc2\x92\xdb\x46\x1d\x8e\x43\x4d\x94\x45\xaa\xca\x61\x77\xfa\x8a\xd8\x41\xe8\x42\xc1\x93\xae\xcc\x41\xfb\x6f\x7b\x9f\xe9\xdd\x7e\xcf\xf5\x06\x84\x4a\xf5\xb6\x0b\xbd\xc7\xb6\x0c\x87\x5e\x6a\x95\xea\x2b\xef\x9c\xff\xf4\xef\x36\xdc\x6b\xfd\xd1\x3b\x58\x15\x74\x6c\x7d\xf7\x60\x02\xa4\xe7\xa3\x4b\x9d\x87\x51\x67\x71\x65\x85\xca\xe2\xed\x24\x75\x97\x2c\x5e\x24\xee\x33\xd7\x13\xa5\x50\x08\x91\x2e\xf9\x32\xf0\x0d\xcc\x8b\x64\x09\x51\x46\x70\x3a\xb8\x46\x7b\x89\xf6\xf7\x19\x38\xf3\x52\xee\x73\xf8\x3e\x70\xd9\x80\xff\x05\xbf\x6e\x66\x30\xfc\x88\xf0\x94\x40\x4e\xf7\x84\xd1\x9d\xd6\x4d\x1e\xe7\x0b\xff\x1b\x87\xa5\x65\xb0\x30\xfb\x8c\x6c\xcf\x94\x5d\x1b\xff\x04\x00\x00\xff\xff\xa9\xe0\xe6\xbf\x00\x13\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 4864, mode: os.FileMode(420), modTime: time.Unix(1496487826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x4e\xe3\x3c\x10\xbd\xcf\x53\x0c\x26\x12\x2d\x12\x44\xfd\x2e\x8b\x2a\x01\x02\x41\x25\xa0\x15\xf0\xed\x5e\x20\x36\x32\x89\x9b\x58\x6d\xec\xc8\x76\xc3\x6a\x29\xef\xbe\xb2\xd3\x3a\x7f\x6e\xd0\xee\xe6\xa6\xaa\x67\xe6\x4c\xe6\x9c\x33\xf1\xe1\x41\xf0\x46\x59\x20\x53\xcf\x2b\x92\xc1\x10\x3e\x3c\x00\x80\x08\x4b\x02\xc8\x1f\x21\xa0\xcc\x1c\xe8\x87\x32\xaa\x86\xf6\x9f\x7e\xc2\xb0\x48\x42\x7d\x0c\xc8\xff\x38\x1f\xff\xf7\x89\x1a\xe1\xb3\x33\xfb\x17\x47\x8a\x16\x58\x11\x47\xfd\x2e\xf4\x25\x46\x4c\x7a\x50\xaa\xe0\x97\x38\x51\x9c\xe3\x68\x89\x13\x22\x1d\x38\x55\xf0\x4b\x9c\xe3\x66\x79\xc4\xb3\x0c\xb3\x18\x8a\x04\xfc\x73\x13\x21\x12\x47\x9e\xf7\xe9\x79\x96\x27\x4b\x70\x91\x58\x4a\x76\xd9\x45\x02\x2b\xca\x96\x36\xbf\x7a\x13\x5b\x45\x17\xf0\x02\x27\xbf\x00\xf9\xdf\xa6\x8f\xcf\xff\x5f\xdc\xdd\xcc\x10\xbc\x9e\x81\x4a\x49\x25\x13\x89\x52\x0e\xd7\x42\x70\x31\x86\x07\x0e\x05\x15\x6a\x8d\x57\x09\x87\x77\x2e\x96\x32\xc7\x11\x01\x2a\xcb\xee\x04\xb0\xd2\xc5\x90\xf1\x8c\x30\x65\x21\x8a\x04\x52\xb2\xca\x6b\x4c\xd9\x90\x20\x6a\x2d\x18\x8c\xcc\xc1\x82\x96\x6e\x89\xa1\x7a\xa1\x70\x7e\xf1\x7c\x1b\x48\x11\x05\x7a\x12\xaf\x21\x71\x6b\x10\xd6\x3f\x48\x91\xd4\x24\xdf\xf5\x2b\x89\xfd\x99\x73\xa1\xc0\xd6\x4e\xfc\xd1\x1f\xf0\xd3\x29\x1e\xbc\x61\x49\x18\xce\x08\xf8\xf3\xef\x57\xc3\xde\x56\x66\xbc\x89\x7f\x3b\xbb\xbf\x0e\x4e\x2d\xb7\x41\xd5\xb0\x51\x16\x56\x75\xb3\xbb\xab\xf9\xd3\x68\xe2\xcf\x9f\x46\xfb\x33\x6e\x66\x25\x7c\xf9\xdb\x97\x77\x39\x7d\xd0\x69\x97\xd3\x87\x9e\x7e\x06\xcb\x20\xd5\x93\x76\x4d\x9a\x33\x8d\x1d\x4d\xb7\x6d\x5a\xda\xbe\x6d\xbf\x09\xdb\x24\x03\x86\xca\x77\x19\x9b\x6e\x68\x9f\x18\xe1\xd5\xf4\xe9\xe2\xf2\xee\x3a\x9c\x3f\xce\xee\xe7\xcf\x7b\xb5\xd1\x44\xa1\x41\x55\x37\x04\x4d\x1b\x6a\x08\x93\x2d\x63\x2a\xe0\x24\x77\x5b\xaf\x99\x51\xf2\xb4\x5b\xac\xca\x54\xff\xb4\x58\x7f\xb5\x51\x2d\x43\xef\xdb\xa8\x1a\x0f\x7e\xc7\x43\x0e\x85\x1c\xee\x70\x29\xee\x32\x5b\x47\xca\x76\x43\x6b\x9f\x35\x93\xa4\xb6\x09\x5d\x73\x3b\xec\xe7\xf2\xad\xd3\xf3\xad\x0d\xb3\x62\xe1\xb5\xe2\xdd\xef\xc7\xf6\x80\x72\x16\x0a\xce\xd5\x44\xef\xad\x09\xbc\xa7\x74\x45\xe0\x05\x90\xdf\x4a\x41\x70\x30\x01\x64\x44\x8d\x79\x75\xa5\x19\xdd\x17\xdd\xf4\xda\x6e\x77\x8d\xa0\x1f\x46\xde\x43\x9b\x12\xea\x8f\xc7\xc4\x1f\x44\x58\xf5\x43\x35\x6f\x0c\xd3\x1d\x21\x98\x34\x7d\x77\xc2\x01\xf9\x5d\xfc\x72\x82\x3e\x83\xd6\xcc\x56\x5d\x2e\x5d\xa0\x46\xfe\xd6\x70\x4d\x33\x7a\x8e\xe8\x21\xa8\x94\x4a\x90\x4a\xd0\x5c\x1a\x8b\xaf\xb0\x54\x90\x63\x95\xea\xab\x2f\xe7\x8c\x30\x05\x0b\xc1\x33\x13\xd4\xe7\xa7\xed\xeb\xbf\xd2\x6b\x60\x96\xa9\x4d\x15\x6c\x40\x92\x18\x8e\xe4\x26\x78\xf9\x11\xbc\x1e\xfb\x9b\xcd\x51\x49\x59\xcc\x19\x71\x7b\xc2\xfb\x1d\x00\x00\xff\xff\xd2\xde\xe1\x2b\xc2\x08\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 2242, mode: os.FileMode(420), modTime: time.Unix(1496488125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8a\xdb\x30\x10\xc6\xef\x7e\x8a\xa9\xb6\xd0\xdd\xc3\xb2\x4f\x50\x68\x69\x0b\x3d\xf4\x5a\x28\x94\x62\x26\xd2\x38\x16\x51\x24\xa1\x19\x39\x4d\x97\x7d\xf7\x62\xa5\x4e\x32\x26\x65\xaf\x3f\x7f\xfa\xe6\xcf\x37\xbe\x7b\xf3\xb4\xf1\xf1\xe9\x0f\x8f\x5d\x67\xc7\x7c\x70\xfd\x50\xa3\x15\x9f\x22\xbf\xbf\x7f\xfb\xbc\x42\x3f\x3f\xfc\x7a\x01\xd3\xf7\xd3\xb6\xc7\x2a\xa9\x47\x2b\x7e\x42\x21\xf3\xd0\x75\x8d\xda\xb4\xcf\x81\x9a\xf6\xfe\x01\x9e\x3b\x00\x80\x99\xa1\x73\xb0\x88\x15\xb4\x2e\xa3\xdd\xe1\x96\x58\x61\x47\x37\xd5\x8e\x58\x4a\x3a\x2a\x46\x91\x6b\xd1\x32\x9a\x30\x28\x30\x52\xc8\x0a\xf8\xe8\x45\x81\xe0\xe3\x6e\x05\x58\x2b\x98\xa4\x6a\x13\x16\x94\xaa\xfb\xae\xf1\x6c\x74\x77\x86\x8f\x3f\xc0\x7c\xfc\x37\x0e\x20\x70\x26\xeb\x07\x6f\x61\xf2\x45\x2a\x86\x6d\x82\x43\x2a\x3b\xce\x68\xc9\xe8\x2d\x69\x8f\xcf\xe7\xa5\x80\x8c\x04\xb6\x96\x42\x51\x6e\xdb\xac\x16\xb8\x6a\x06\x0e\x05\x73\xa6\x02\x43\x2a\xe0\x28\x83\x8c\x28\xe0\x23\x0b\x86\xc0\xcd\xdd\x51\xa6\xe8\x28\x5a\x4f\x0c\x3e\x36\x76\xa3\x52\x7b\x44\xe8\x20\x0d\x30\x51\x74\xa9\x98\xeb\x44\x74\xdd\x2f\xbf\x73\xe2\x53\xf3\x6c\x8b\xcf\x72\xaa\xcb\x63\xaa\xc1\xc1\x86\x5a\x70\x8f\xe4\x96\x7a\xcb\x84\x3c\x52\x08\xe6\x12\xab\x76\xfd\x4a\x21\x03\x6e\x52\x15\xc0\x78\x9c\x3f\xed\x31\x3a\x73\x09\x5d\xcb\x3f\x15\x6a\x39\xc4\xf9\x74\x70\x13\xe6\x48\x2e\xe3\xcc\x78\x8e\x10\xbc\x80\x24\xd5\x85\xf3\x85\xac\xa4\x72\x34\x97\xf3\xd1\xd6\xdf\xe6\x87\xaf\x44\xb3\xb8\xca\xe8\xf9\xda\xf2\x3f\x77\xf3\xbd\x1d\x14\xdf\x6e\x04\x86\x92\xf6\xed\xd3\x55\x1e\xf2\x8e\x9b\x19\x39\x90\x64\x96\x8b\xec\x5e\xba\x6e\xf6\x75\x34\xc0\xfa\x4f\x85\x69\xdb\xfd\x0d\x00\x00\xff\xff\x28\xe9\xee\x7a\x08\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1496488101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

