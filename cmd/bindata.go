// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xea\x06\xb0\xbd\x80\xe2\x4b\xee\xbf\x5d\xe4\x80\x74\x13\xb4\x01\xda\x26\x48\xdb\x5d\x1c\x8a\xae\x40\x4b\x63\x99\x08\x4d\x6a\x49\x4a\x89\x17\xf9\xf0\x07\x92\x7a\x90\x12\xdd\x74\x6f\xd5\x1a\x28\xdc\x90\xf3\xe2\x3c\x7e\x33\xa4\x5f\xbe\x58\xad\x29\x5f\x6d\xa8\xda\xae\x8e\x8e\x36\x15\xcf\x34\x15\x1c\xea\xe2\x08\x00\x80\x6e\x80\x0b\x0d\x99\xa8\xb8\x86\x63\x22\x8b\x1a\xfe\x03\xab\x1c\xeb\x15\xaf\x18\xb3\x24\xe6\x93\x89\xdd\x8e\xf0\xbc\xe5\x32\x1f\x89\xba\x92\xdc\xfe\x89\x3c\xb7\xdf\x2f\x01\xb3\xad\x70\x62\x3e\x9f\x7e\xb1\x6b\xea\x81\xea\x6c\x1b\xae\x59\x89\x44\x21\x50\x4e\x75\xb7\x62\x3e\x69\x5d\xa4\x66\xb1\xa5\x3f\x39\x49\x86\x3c\x24\xd3\xb4\x26\x1a\x47\x7c\xed\xc6\x57\x78\x73\x3c\xc8\x1d\xd9\xb2\x2c\x59\x5e\x92\xec\x9e\x14\xa8\x46\x2c\x91\x2d\xcb\x52\x30\xb1\x26\xec\xea\x11\xb3\x11\x4b\xbf\xf5\x15\x2b\xab\xb2\x90\x24\x1f\x9b\x38\x5c\xb7\xc4\xf3\x9f\xe6\x01\x61\x1f\x29\xa7\xa1\x0b\x90\xf9\xe7\xc5\xbf\xf5\xf4\x51\xdc\x7d\x76\xb9\x2e\x80\x51\x7e\xef\x58\x03\xce\xc1\xd1\xe9\x06\x3e\x43\xf2\x17\xcc\x8e\x7f\xbb\xbe\xfb\xf8\xe9\xe2\xed\xeb\x9b\x19\xf4\xa7\xb2\x59\x71\x25\xa5\x90\x3f\xc3\x7b\x01\x35\x95\xba\x22\xac\x10\xf0\x20\xe4\xbd\x2a\x49\x86\x40\x95\x0b\x2c\x02\xd1\xa0\xb7\x08\x3b\xb1\x43\xde\x27\x47\x5d\xc0\x16\x59\x19\x0b\x87\x4b\x44\x38\x0d\x52\x31\xcb\xa1\xb7\x25\xbd\xbd\xf8\xf8\x66\xa5\x64\xb6\x8a\x1c\x25\x08\xbb\x3b\x08\x3f\x74\x90\x48\xa2\x58\x81\x1d\xeb\xc2\x2b\xa4\x25\x24\x4c\xc3\x99\xc7\xae\x50\x83\x8d\xfa\xd9\x17\x58\xac\x89\x42\x4e\x76\x08\xc7\xb7\xbf\x5f\x2e\x43\x59\x86\xb0\xf7\xcd\xa2\x2e\x6c\xa5\x7c\x40\xad\x29\x2f\x54\x93\x3a\x67\x36\x75\x96\x3d\x47\x52\x3c\x42\x67\x76\x4b\xe4\xb4\xdb\x08\x5c\x38\xbb\x29\x2f\x3c\xdf\xc4\xb9\xad\xc7\xe0\xf8\xcd\xcd\xbb\xab\xd5\x49\x17\xaf\x95\xc7\x16\xf0\xa5\x3d\xe3\xcd\xdb\xcb\xd7\x37\x8e\xdb\x7d\x0f\xfc\xfa\xfa\xe6\xd5\xf5\xfb\xd9\xc0\x29\x31\x19\xaf\xae\xdf\x83\xa3\x76\x27\x60\x0a\xbf\x8d\x27\x66\x8c\x81\xc0\xb1\x8b\xc7\x22\x9c\xe1\xd6\xec\x8e\xca\xd5\x6c\xba\x21\x8c\xad\x49\x76\x6f\xc3\xf1\x67\x85\x72\xdf\xc6\x63\xe9\x25\xc0\xf1\x90\xfa\x1c\xb4\xac\x30\x72\xde\xd6\x4b\xa1\xcf\x7f\xf6\xbd\x16\x3d\x73\x9c\x2f\x7e\xb8\xc6\x23\x83\x42\x30\xbe\xb0\x64\xbb\xfb\x9c\x4a\x48\xca\x78\xa9\x84\x14\x2e\x12\x81\xf4\x36\xca\x56\x47\xef\xb3\x08\x18\xa4\x97\xd7\x1f\x2e\x5e\xbd\xbd\x4a\x6f\xef\x6e\xde\xdd\x7e\xf4\xc3\xdf\xd6\xa2\x82\x24\x03\xd3\xa4\xd2\x52\x8a\x5d\xa9\x21\x15\x2c\x4f\xbd\x85\x11\x07\xc4\x36\xbb\x64\x37\xc9\xb6\xe8\x2d\x58\xc2\x2c\xc4\xd3\x43\xd2\x5b\x00\x69\xbf\xeb\xa2\xeb\x38\x77\x48\x58\x04\x40\x06\x80\xf0\xe3\xb0\x30\xd2\xb2\x46\x58\xd8\x57\xff\x65\x4b\x3d\xa8\xff\x3e\xa4\x5d\xbe\x44\xca\x2a\xa4\x72\x91\x8f\x15\x9a\x4f\x17\xa3\x9a\x20\x4d\x30\x1a\xf8\x20\x8f\x86\xd1\x7d\x8e\x03\xe3\xf9\x10\xd6\x13\x42\x04\x34\x11\x22\x75\xd8\xec\x44\x4e\x7e\x70\x77\xe0\xe4\xf1\xb6\x65\x1f\x27\x9f\x3f\x13\x58\x4e\x06\xe6\x24\x7d\x5a\x0d\x90\xfe\x1f\x34\x38\x9b\x45\x9f\xca\xdc\x65\x50\xa7\xc1\xee\x15\x02\x0a\xa3\xbd\x82\x82\xea\x6d\xb5\x3e\xc9\xc4\x6e\xf5\x1a\xf5\x07\x2d\x91\xec\x56\x75\xe1\x89\xb8\x43\x26\x48\x6e\x64\x98\xdc\x56\x5b\x64\x0c\x4a\x22\x35\x88\xcd\xdf\x96\xda\x94\x03\xd6\x84\x41\x92\x38\x59\x26\x8a\xf0\x04\x4a\x54\x32\xc3\xa3\xc1\xa9\x03\xe7\xcc\x20\x21\xa1\x27\x5e\x9c\x8f\x69\x06\xb5\x7b\x17\xd4\x51\x40\xeb\x57\x68\x3f\x4e\x8d\x49\xba\x71\x2c\x08\xe5\x60\x6c\xfc\x86\x79\xc2\xc7\x92\xff\x8a\x0a\xd4\x56\x54\x2c\x07\x55\x62\x46\x37\x7b\x20\xdd\x30\xa8\xb7\x44\xb7\xbb\x6b\x04\x7c\xc4\xac\xd2\x98\x8f\x10\x25\x32\xb9\xc6\x11\xe5\x7b\xa7\x9a\x89\xa7\x3f\xe5\x74\x4a\x95\x26\xba\x52\x69\x26\x72\x84\x63\xf7\xc7\xa4\x21\xfe\x86\xc8\x79\x5e\x39\xf6\xcc\x19\x46\xd4\xce\x96\x95\x16\xfd\x60\x9d\x24\x82\x27\x35\x91\x94\xac\x19\xc2\xed\xef\x97\xad\xe1\x4e\x0a\x24\x09\x55\x49\x13\xb2\x44\x55\x6b\xa5\xa9\xae\x8c\xb0\x43\x77\xae\xe6\xd2\xb5\xa1\x3c\x07\xc2\xc1\x68\x4b\xda\xe4\xb4\xfd\x91\x05\xc0\xd0\x6f\xa5\x52\x08\x6d\x07\x4f\xbb\xff\xb0\xa5\x0c\x41\xa3\x32\x99\x36\x20\x32\xee\xea\x5b\x27\xdd\x38\xb2\x64\x03\xb3\x21\xa9\x37\x28\x86\xbd\xd6\xa8\xe7\xf8\xd0\xbb\x32\xb5\x73\xef\x22\x23\xfa\xeb\x52\x96\x81\x18\xba\x81\x35\x16\x94\xdb\x0b\xab\x3d\xd2\x9f\x3d\xf8\xfe\x02\x42\x36\x27\x88\xa8\x7a\x71\xee\x25\xe7\x2f\x5d\x14\xfd\x4f\x10\xf8\xb1\x88\x70\xc0\x18\xf0\x7b\x61\x19\x6e\xbf\x04\xbd\xa5\x0a\x94\x96\xb4\x54\x16\xf0\x18\x51\x1a\x4a\xa2\xb7\xa6\x3a\x4b\xc1\x91\x6b\xd8\x48\xb1\xb3\x9b\x66\xfd\x24\xbc\x2f\x0c\xe2\xb1\x68\xae\xd8\x83\xe5\x27\x50\x98\xc3\x5c\x3d\xad\x3e\xff\xb1\xfa\xf2\xd3\xf1\xd3\xd3\x7c\x19\x62\xcd\x38\x21\x8f\x8e\x8c\x05\x0c\x4d\x6a\x66\xc6\x01\x49\x82\x8f\x19\xab\x14\xad\x23\x7b\x1c\x66\xd6\xbf\x8b\xd4\xf5\x49\x5e\xed\xd6\x28\x53\xb1\x49\xb3\x5d\x9e\x12\x59\xa8\xf4\x41\xa4\xa2\xd4\x6a\x09\xe7\x70\x3a\x83\xe4\x91\xf4\x2e\xb5\x9f\x24\x87\xd9\x45\xbb\x42\x1a\x9c\xa2\x59\x6c\x08\x9a\x4d\xa3\xbf\xbf\x2e\xb6\xfa\x7f\xdd\x12\x5e\xa0\x75\xb6\x51\x66\x40\x3c\xa7\x12\x33\x2d\xe4\x1e\xb4\x70\x3d\x49\x66\xde\xa2\xd8\xd8\xc5\x66\x24\x9b\xda\xc2\x1e\x02\x5b\x0b\x2f\xfb\x15\xa3\x37\xab\xa4\x34\x39\xf2\xfd\x9c\x94\xa3\xd2\x52\xec\xa1\x0f\xd2\x1d\xee\x44\x8d\x0a\x04\x47\x53\x57\xbb\x8a\x69\x5a\x32\xef\xf0\x60\xba\x0a\x61\xcc\x58\x48\x25\x64\x82\x6b\xe4\x5a\x4d\x64\x10\x72\x55\x49\x04\xcf\xa0\x0b\x78\x90\xa4\x2c\x51\xc2\x46\x48\xc8\xb1\x74\x2d\x8d\x72\xa5\x09\x63\xae\xb0\x72\x2c\x91\xe7\xc8\x33\x8a\x0a\x28\xb7\x6b\xd1\xf1\x9a\x2b\x8d\x24\xb7\xe3\x06\xf2\x5c\xc8\xa9\xac\x36\x4d\x0b\x7c\xab\xaf\x1e\x4b\xa1\x5c\x14\x55\x26\x69\xa9\x47\x8d\xb8\x26\x2c\xc1\xbc\xb5\xb6\x0d\xb5\x9d\x63\x26\xb2\xca\x7b\x71\xea\xac\xb2\xdd\xdf\x1b\x0f\x1c\x0d\xdb\xc3\x42\x54\x5a\xd1\x1c\xa3\x09\xbf\x9c\xc8\x22\x3b\x69\x04\x7e\x7a\x63\x56\xc8\x5a\x54\x1a\x08\xdf\xb7\x66\x4d\xa4\xce\x3e\x27\x06\xea\x7e\x95\x68\x01\x88\xe7\x80\xdc\xf6\x62\x32\xc8\x6c\x46\xf9\x3d\x50\xdd\xe2\x41\x1b\x97\x0e\x13\x66\x47\x2f\x61\x32\xe3\xba\x67\x1d\x6b\xdc\x47\xd3\x2e\xda\xc0\x98\x6d\x4a\x18\xfd\x0b\x5d\x8a\xab\x96\xd4\xb4\x76\x5b\x0a\x04\x32\x94\x9a\x50\x3e\x39\x2a\x58\x1f\x04\x7e\x7b\x6b\x56\x9e\x81\x24\xe7\x32\xaa\x7c\x5f\x4d\x64\x8e\xd2\x43\x73\x94\xb6\x18\x84\x8f\x54\xd9\x69\xbc\xb3\x62\x2a\x20\x62\x22\x23\xec\xda\x81\x8c\x53\x7a\xdd\x22\x0e\x81\xa6\xb3\xb8\xe6\xbd\x17\x95\xb4\x51\x51\x7b\xa5\x71\x67\x40\xa6\xad\xa3\xa9\x03\x63\xa0\xf9\x37\x0b\x5c\xad\x27\xde\x59\xb0\xb6\x78\xe7\xd6\x47\x1d\xcd\xb3\x61\xa2\xcc\x0d\x5e\xc0\xbc\xcc\x25\xdc\x00\x5b\x65\xa6\x11\x2d\x1c\x55\x97\xa2\x7d\xfa\xda\xcc\x9d\xda\x31\x0a\x75\x55\x86\x00\x6c\xcb\x5b\x79\x89\x4a\xb9\x0b\xd5\x94\x10\xdb\x8c\xef\x9e\xde\x0f\x5b\xf1\x00\x94\x6f\x44\x83\x6a\x56\x65\x5b\x35\x53\x1f\xbb\xe2\xb4\xcd\xd0\x46\xfd\xa7\x6e\x65\x90\xa5\xdf\x71\x8e\xa9\xb8\x0f\x18\xce\x0a\xb3\xa2\xe2\x08\xda\xdb\xe3\x35\x66\x3d\x57\x16\x76\x6c\xee\x4c\x65\x97\x7b\x20\xf1\xed\x6a\x56\xc2\xf9\x60\x4d\x39\x91\x7b\x8b\xfe\xd2\x3e\x50\x18\xfc\xff\x8e\x7d\xb9\x46\xa9\xcc\x25\xad\xb7\xeb\x56\x52\xae\xdb\x32\x76\x9b\xfe\x8b\x88\x9b\x1d\xf6\xa2\x02\x22\x4d\x81\x51\x5e\xcc\x82\xfb\xa6\xd5\x5d\x17\xa9\xdd\x4a\x9b\x16\xd2\xdd\xff\xb2\x5d\x0e\x8b\x66\x91\x51\x8e\x90\x88\x32\x5b\x46\x7e\xba\xc8\x76\xf9\x12\x92\x42\xc3\xa9\x77\x2d\x76\x6f\xdb\xcd\x6f\x78\x70\x6e\xa9\x3e\x9f\x7d\xf1\x28\xfa\x7b\x10\xfc\x2b\xfa\x98\xea\xdf\x9b\x4f\x63\x97\xe5\x02\x75\x1a\xfc\xb8\x63\xef\xb5\xad\x52\xfb\x26\x0d\xc9\x8e\x3c\xe6\x58\xea\x2d\xfc\x1b\x92\x1d\xe5\xdd\xff\xf5\xbe\x44\xc8\x9b\x6b\x90\x3a\x0f\xb8\xce\xcf\xe1\x09\x0a\x89\x25\x24\x35\xcc\xff\x28\x84\x28\x18\x9e\x14\x82\x11\x5e\x9c\x08\x59\xac\xe6\xcf\xab\x3b\xf3\xd4\x9d\x7d\xab\xba\xff\x53\x57\xec\x68\xec\xc7\x1e\xed\x59\x75\x71\x5d\x07\xa2\xda\x95\x78\x18\xdf\x51\xd4\x47\x3f\x6a\x1c\x90\xd7\xfc\xc6\xf2\x9c\xb0\xc3\x4f\xa8\x91\x0a\x3e\x50\x3f\xdd\x0d\xd6\x55\xed\x6c\x61\x7f\x13\x55\x3a\x3e\x0c\x1f\x12\xd2\xdc\xb0\xfe\x91\x8c\x0e\xe6\x9d\x94\xf9\xe2\x2b\xee\x5d\xce\xff\x8e\x64\x7f\xca\x19\x09\x1f\xf8\x7a\x39\x3f\xfa\x5f\x00\x00\x00\xff\xff\x69\x40\xdc\x08\x51\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8273, mode: os.FileMode(420), modTime: time.Unix(1502377004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\xc7\x04\xc2\x92\x20\x41\x1a\x20\x8d\x0d\x3b\xdd\x30\x14\x9d\x40\x4b\x67\x89\xb0\x24\x6a\x24\xa5\xa4\x6b\xfa\xdf\x07\x51\x16\xf5\x46\xdb\xdd\x9b\xbe\x18\xe6\xdd\x3d\xe4\xdd\x3d\xf7\x90\x6f\xdf\xb8\x1b\x9a\xb9\x22\xb6\xac\x32\x9a\x4c\xe1\x9b\x05\x00\x10\x10\x81\x60\x3b\x73\x1b\x68\xa6\x16\xaa\x8f\x66\x54\x4e\xf5\xbf\xea\xf3\xfd\x32\xf2\xab\x65\xb0\x9d\x6f\x97\xe7\x3f\x7d\xb7\x7b\xe6\x8b\x0b\xfd\x97\x04\x92\x96\x44\xa2\x21\xbe\x31\x9d\xc4\x08\xf1\x08\x4a\x6b\x3c\x89\x13\x84\x39\x09\x76\x24\x42\x61\xc0\x69\x8d\x27\x71\xa2\x84\x6d\x48\x72\xfb\x82\x81\x01\xa7\x35\x9e\xc4\x29\xf2\x88\x93\xd0\x94\xd4\xde\x72\x12\xe1\x7d\x3f\x36\x60\x69\x4a\xb2\x10\xca\x08\x9c\x4b\x65\x41\x41\x02\xcb\xfa\x6e\x59\xba\x63\xba\xd5\x65\xa4\x9b\xd3\x78\x97\x11\x24\x34\xdb\x69\xff\xb6\x26\x3a\x8a\x6e\xe1\x33\xcc\xfe\x04\xdb\xf9\xe5\x7e\xf5\xf4\xe9\xea\xe1\x6e\x61\xc3\x97\x0b\x90\x31\xb6\x84\xc1\x20\x66\x70\xcb\x39\xe3\xe7\xf0\xc8\xa0\xa4\x5c\x16\x24\x89\x18\x3c\x33\xbe\x13\x39\x09\x10\xa8\xa8\x77\x47\x20\xb2\x0a\x86\x94\xa5\x98\x49\x0d\x51\x46\x10\x63\x92\x77\x7a\xa6\x4d\x1c\x65\xc1\x33\x98\xab\x85\x2d\xad\x79\x1b\x42\x7b\x20\x7f\x79\xf5\xf4\xc1\x15\x3c\x70\xab\x4c\xac\x1e\xd9\x06\x89\x64\xc7\x13\x29\xa3\x0e\xf9\x9a\xfd\xea\xc2\xbe\xe4\x8c\x4b\xd0\xb1\x9e\x33\x29\x23\x35\x29\x6b\x94\x92\x66\x91\x00\xe7\x72\xba\xf7\xad\xca\x71\x55\xa3\xd0\x2c\xea\x9c\xd4\x8c\xa5\xce\xef\x39\x1f\x16\x1f\x6f\xdd\x33\x5d\x3c\xf7\x40\x98\xdf\xc6\x2d\x1e\x6e\x96\xeb\xb9\xe7\x2c\xd7\xf3\xc3\x1e\x77\x8b\x1a\xbe\xfe\x3d\x82\xa4\xbc\x94\xcf\xa0\x60\x77\x8b\xeb\xfb\x47\x43\xd7\xcd\xbb\x5d\xdf\x3f\x7a\x75\x48\xbd\x57\x22\xf0\x87\x42\x4c\xa7\xae\x24\xab\xd7\x86\x7a\xda\xfc\x2d\x49\x92\x0d\x09\x76\x75\x17\xfe\x28\x90\x7f\x6d\xda\x30\xed\x9c\xde\x76\x06\xfe\x36\x78\x60\x4b\x5e\xe0\xc1\x6c\x9a\x6a\xf5\x9b\x73\xde\xab\x9e\x21\x23\x73\x98\x89\x41\xfb\x6c\x07\xe4\x6d\xf2\xdc\x3b\x29\xb0\x7d\xe1\xcf\x55\x4f\xec\x43\xd3\xe8\xdf\xdc\xaf\xaf\xae\x1f\x6e\xfd\xe5\x6a\xf1\x71\xf9\x74\x30\xb1\x8a\x28\xf6\xa4\x8d\x9b\x42\x45\x1b\xbb\x77\xc4\x74\x17\x52\x0e\xb3\xdc\x3c\x5b\x7d\x8f\xba\xc3\x43\x65\x59\x21\x49\xb4\x9c\xb4\xa3\xf4\xaf\xe4\xe4\x1f\xe9\xc8\x60\x8c\x4d\x3a\xd2\xce\xea\x4d\xe3\x7c\x64\x5a\xd5\xa0\x8d\x66\xcf\xd0\x59\x03\xb9\x2d\x03\x53\x4c\x74\x1f\x51\x60\xb8\xa1\x1e\xce\x22\x13\xd8\x51\x90\xb1\x28\x18\x86\xdb\x34\x76\x46\xad\x18\x28\x93\xee\x27\x29\x24\x1b\x0b\x6b\x53\x3a\x96\xf9\x9c\x31\xe9\x39\xcb\x5f\x6f\x94\xe1\x39\xa6\x09\xaa\x29\x1c\xb8\xd8\xf0\xc6\x03\x5b\xf5\x3d\x64\xed\xab\x43\x51\x63\x3b\x76\xef\x68\xe2\x98\x2b\xd5\x97\xe1\xb3\xaf\x5d\xfc\x8c\xa4\xe8\x39\x93\x80\xc8\xe3\x50\xfd\xab\xb4\xd6\x0b\xa5\x0f\x5d\x6a\xce\x18\xd8\xce\x18\xbf\xce\xe0\x18\x87\x3b\x7c\x6c\x6f\xdd\x31\x50\xcf\x7f\x7f\xb7\xf5\xf9\x6a\x19\xac\x6f\x41\xc6\x54\x80\x90\x9c\xe6\x42\x4d\x41\x42\x84\x84\x9c\xc8\xb8\x7a\x13\xe4\x2c\xc3\x4c\xc2\x96\xb3\x54\x19\xab\xf5\xb3\xe1\x0b\xad\xed\xd7\x44\xcd\xc0\xb0\x54\xf0\x0a\x02\x43\x78\x27\x5e\xdd\xcf\xbf\xbb\x5f\xde\x3b\xaf\xaf\xef\xea\x92\x85\x2c\x43\xcd\x89\xfd\xcb\x45\xb3\x81\x25\x61\x9b\x62\x47\xe6\x7e\xfc\x0e\x1e\x48\xc7\x78\x5a\x3f\xe5\x61\x3d\xa9\x7a\x9f\xfa\x6a\x60\x10\xa1\x84\x59\x01\x11\x95\x71\xb1\x39\x0b\x58\xea\xde\xa1\x5c\x4b\x8e\x24\x75\xcb\xa8\x03\xb1\xc2\x84\x91\xb0\xc2\xa8\xea\x23\x62\x4c\x12\xc8\x09\x97\xc0\xb6\x7f\x1b\x55\x9f\x99\x2b\xd0\xe1\xe5\xd9\x2b\x88\x0d\x33\xd2\xcf\x5e\xf1\x68\xe0\x63\xd4\xc3\x55\x4f\xa3\x7a\x11\x96\x91\x6c\x63\x97\x2d\xd5\x6d\x6b\x5f\xad\x06\x69\x9e\x1f\x97\xe4\xdf\x58\x01\x22\x66\x45\x12\x82\xc8\x31\xa0\xdb\xaf\x40\xf4\x53\x54\xc6\x44\x36\xd6\x0d\x02\xbe\x60\x50\x48\x0c\x47\xfa\xdc\x1e\xe0\xb8\x3e\x1f\xe4\xd3\x7f\x44\xa8\x92\x24\xcd\x6b\xb8\xde\xdf\x0f\x58\x88\x9e\xf3\xf3\xff\xd0\xc7\xd3\xed\xe9\x94\xc1\xe9\x1c\x47\x3d\x6b\x0d\x1a\x6c\xfd\x15\x00\x00\xff\xff\xaa\xbb\xa3\xe9\xd5\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3541, mode: os.FileMode(420), modTime: time.Unix(1502377002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1502377004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

