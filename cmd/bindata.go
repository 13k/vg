// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4a\xc4\x30\x14\x85\xf7\xf7\x29\xce\x64\xba\xd0\xc5\x30\x0f\x20\x5d\x0c\x56\x44\xb0\xb6\x94\x71\xba\x10\xb9\x64\x66\x1a\x1b\xb0\x49\x49\xd3\x6e\xc4\x77\x97\x66\x14\xfc\x09\x4e\x36\x21\xe1\xde\xf3\x71\xbe\xe5\x62\xbd\xd7\x66\xbd\x97\x43\x4b\xc4\x65\x75\xb3\xe3\xdd\x5d\xb5\x7d\xdc\xdc\xdf\x16\x5c\xd6\x59\x2a\xc4\xdf\xef\xaa\xc8\xcb\x2d\x5f\x17\x79\xbe\x79\xc8\xd2\xe4\xe7\x9b\x98\xa7\x17\xee\x9d\xed\x7a\xcf\x07\xdb\x75\xd2\x1c\x2f\x2e\xf1\x46\x00\xb0\x84\xd2\xe6\x08\x69\x20\x47\x6f\x57\xf2\xe0\xf5\x24\xbd\xb6\x06\x4a\xbf\x36\x61\x44\x2b\x3c\x41\x08\x2c\x52\x88\xe4\x7f\xb4\xc0\xf3\x15\x7c\xdb\x98\xb0\x38\x9f\x33\x0b\x61\x4e\x69\xfa\x06\x4a\xca\x3a\x13\x88\xb2\xea\x08\xc0\x35\x7e\x74\xe6\x2b\x67\xbe\xa2\xd2\x42\xea\x09\x13\x74\xcc\x6d\xf9\xb3\x6d\x43\xef\x44\x43\x6b\x7b\x8f\xd5\x88\x93\xa8\x49\xba\x81\xe8\x97\xd8\x88\x48\xa2\x8f\x00\x00\x00\xff\xff\x4d\x95\x43\x7d\xb1\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 433, mode: os.FileMode(420), modTime: time.Unix(1496347526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x4c\xdd\x00\xb6\x0b\x30\xde\x74\x6f\x2d\xb2\x40\xda\x04\x6d\x80\xb4\x09\xfa\xd8\x1e\x82\xac\x40\x93\x23\x89\x88\x44\x6a\x49\x4a\x4e\x16\xf9\xf1\x0b\x52\x6f\x99\x4e\xf7\xe0\xae\x80\xc0\x11\x39\x8f\x8f\x33\xdf\x0c\x49\xbd\x7c\xb1\xde\x08\xb9\x8e\x85\x49\xd7\xb3\x59\x5c\x4a\x66\x85\x92\x50\x25\x33\x00\x00\x11\x83\x54\x16\x98\x2a\xa5\x85\x23\xaa\x93\x0a\xfe\x80\x35\xc7\x6a\x2d\xcb\x2c\xf3\x22\xee\x61\x2a\xcf\xa9\xe4\xad\x96\x7b\x34\xda\x52\x4b\xff\x8a\x92\xfb\xdf\x97\x80\x2c\x55\xb5\x99\xdb\x93\x3b\x3f\x66\xb6\xc2\xb2\x74\x3c\xe6\x2d\x52\x83\x20\xa4\xb0\xdd\x88\x7b\xa2\x2a\x89\xdc\x60\x2b\x7f\x7c\x4c\xa6\x3a\x94\x59\x51\x51\x8b\x3b\x7a\xed\xc4\x33\xba\x1c\xf7\x6a\x07\xa6\xbc\x0a\xe3\x05\x65\xf7\x34\x41\xb3\xa3\x12\x98\xf2\x2a\x8b\x57\x8b\x91\x6c\x1f\xbc\x1a\x5a\x17\x33\xf7\x37\x48\x49\xbb\xf8\x59\x78\x45\x7e\xb8\x4a\x20\x13\xf2\xbe\x56\x1d\x69\x4e\xd0\x88\x18\x6e\x81\xfc\x03\xf3\xa3\x3f\x2f\xbf\x7c\xfb\x7e\x76\xf5\xe1\x7a\x0e\x7d\x38\x7c\xa2\x2e\xb4\x56\xfa\x0d\x7c\x56\x50\x09\x6d\x4b\x9a\x25\x0a\xb6\x4a\xdf\x9b\x82\x32\x04\x61\xea\x58\x23\x50\x0b\x36\x45\xc8\x55\x8e\xb2\xcf\x57\x95\x40\x8a\x59\x11\x8a\x50\xcd\x0d\x38\x19\xb1\x83\x71\xe8\xb1\x44\x37\x67\xdf\x3e\xae\x8d\x66\xeb\xc0\x52\x46\x99\xa8\x17\x22\xf7\x2d\x24\x90\x3b\x6f\xb0\x53\x5d\x0e\xb8\xbd\x02\x92\x59\x78\x3d\x50\x37\x68\xc1\xd3\xe5\xf5\x1d\x2c\x37\xd4\xa0\xa4\x39\xc2\xd1\xcd\x8f\xf3\xd5\xd8\x96\x13\x24\xc9\x03\x74\x20\x1a\x9a\xbd\xbe\x0b\x4f\xfb\x05\xc2\xd1\xc7\xeb\x4f\x17\xeb\xe3\x2e\xbc\xeb\x7e\x11\x63\xb3\x51\xaf\x78\x7d\x75\xfe\xe1\xba\xd6\xae\x7f\x9f\x15\x7c\x77\xf9\xd9\xc9\xbd\xbb\xfc\xfc\x8c\x58\x6d\xcd\xdb\x1a\x49\xb5\x7e\xc6\xa8\xdf\x84\xfc\x36\x9e\x26\x09\xdc\x08\x59\x5b\xcc\xef\xb9\xd0\x40\x8a\x70\x8a\xc7\x12\x35\xda\x91\xf5\x76\xb9\xde\x47\x8f\x33\x40\xe2\xe8\xfc\xf2\xeb\xd9\xbb\xab\x8b\xe8\xe6\xcb\xf5\xa7\x9b\x6f\x43\x2a\xb4\x1c\x32\x40\x18\xb8\x7e\x17\x15\x5a\xe5\x85\x85\x48\x65\x3c\x1a\x0c\xec\x68\x40\x68\xb2\x2b\x13\x47\xbe\x65\x8f\x60\x05\xf3\x71\x2b\xd8\x67\xbd\x25\x7e\x57\xea\x23\x92\x4f\x48\xfb\xff\xd5\x6b\xa0\xd3\x05\xeb\xd5\xe7\xa6\x4b\x7c\x80\x77\x63\xa9\x3a\x85\x21\x1e\x0f\xe5\x42\x52\x07\xc8\x37\x06\x33\x38\x22\xc4\x34\x4d\x3f\xd3\xc0\x70\x62\xc7\x0d\x01\xfb\x82\x0f\x0e\x46\xe3\xf5\x63\xa0\x2e\xf7\xcf\x4e\x82\xbc\x3b\xed\xd5\x27\xcc\xf2\xfd\xb3\xb4\xaa\xdf\x3c\x08\x51\x92\x54\x54\x0b\xba\xc9\x10\x6e\x7e\x9c\xb7\xa1\x36\x96\xda\xd2\x00\x21\xc2\x90\x66\x8f\x22\xa6\xdc\x18\x2b\x6c\xe9\x8c\xed\xdb\xea\x9b\xbd\x3e\x16\x92\x03\x95\xe0\xbc\x91\xc6\x5b\x5d\x4b\x19\xf6\xa8\x33\xe8\xa7\x22\xad\x94\xf5\xcd\xd5\xcf\x6f\x53\x91\x21\x58\x34\xae\x3b\x4f\x84\x5e\x9c\xc2\xbc\x2f\x33\x11\xd7\x62\x24\x86\xf9\x54\x74\xd0\x5d\xc7\x75\xe9\xdc\x4b\xdc\x46\xdd\x74\xe4\x7b\xfb\x92\x51\xfb\xbc\x95\xd5\xc8\x8c\x88\x61\x83\x89\x90\xfe\x9c\xe4\x97\xf4\x77\x9f\xdf\xb7\xa0\x74\xb3\x82\x80\xab\x17\xa7\x83\x76\xf8\xb6\x2b\xac\xe1\x53\x25\xd0\xef\xf2\xbb\x26\xc6\xcd\x68\xa2\x3f\x48\xcb\x74\xfa\x25\xd8\x54\x18\x30\x56\x8b\xc2\xf8\x66\x90\x51\x63\xa1\xa0\x36\x75\xc7\x91\x42\x49\x94\x16\x62\xad\x72\x3f\xe9\xc6\x8f\xc7\x7b\xe2\x24\x1f\xcb\xe6\x64\x37\x19\x7e\x02\x83\x1c\x16\xe6\x69\x7d\xfb\xd7\xfa\xee\xd5\xd1\xd3\xd3\x62\x35\xee\x79\xbb\x84\x9c\xcd\x1c\x82\x0c\x1d\x35\x99\x0b\x00\x21\xf8\xc0\xb2\xd2\x88\x2a\x30\x27\x61\xee\xe3\xbb\x8c\xea\x52\x94\x65\xbe\x41\x1d\xa9\x38\x62\x39\x8f\xa8\x4e\x4c\xb4\x55\x91\x2a\xac\x59\xc1\x29\x9c\xcc\x81\x3c\xd0\x3e\xa4\x00\x40\x38\xcc\xcf\xda\x77\x0a\xa6\x40\x26\x62\xc1\x42\x2d\x74\x7e\x18\xef\xfd\x81\xa8\xf6\xfe\x3e\xa5\x32\x41\x1f\x68\xe7\x4a\xc8\x04\xb8\xd0\xc8\xac\xd2\x8f\x60\x95\x9f\x30\x9a\x0d\x06\x55\xec\x07\x9b\x76\x7e\x68\x7c\xfd\x06\x50\xe3\x3b\xef\xdf\x9d\x57\x56\x6a\xed\xd8\xf1\xeb\x02\xc4\xd1\x58\xad\x1e\xa1\x4d\xcf\x17\xcc\x55\x85\x06\x94\x44\x57\x4f\x79\x99\x59\x51\x64\x83\x85\x83\x3b\x3e\xd3\x2c\x73\xf8\x84\x06\xa6\xa4\x45\x69\xcd\x81\xe0\xa0\x34\xa5\x46\xe8\xe0\x9c\xc1\x56\xd3\xa2\x40\x0d\xb1\xd2\xc0\xb1\x00\x9b\x52\x0b\x42\x1a\x4b\xb3\xac\x2e\x27\x8e\x05\x4a\x8e\x92\x09\x34\x20\xa4\x1f\x0b\x6e\xca\xd2\x58\xa4\xdc\x65\xb4\x42\xc9\x95\x3e\x14\xe6\x8a\x66\x6d\xbd\x3a\xcc\x17\x0f\x85\x32\x75\xfe\x0c\xd3\xa2\xb0\x35\x66\x93\xaa\x32\xe3\xb0\x41\xaf\x40\x90\xb7\x58\xdb\x24\x9b\x14\xb3\xec\x40\x98\xfc\xe9\x62\x80\xe9\xa3\x7b\xa7\x1b\x55\x5a\xa0\xf2\xb1\xbd\x06\x1d\xc8\x99\xbf\x25\x0e\x9c\xbd\xd7\xe8\x0b\x5c\x72\x40\xe9\x77\x3a\x3a\xe1\x8f\xbb\x37\x81\xb0\x6d\xc5\xb5\x11\xe8\xaa\xee\x40\xc0\xbc\x9b\x01\xb0\x2b\xf7\xfe\x93\xba\x6a\x31\xf9\xa6\x7d\x78\x40\xc6\x8e\x01\x19\xeb\x8b\x09\x1f\x84\xb1\xae\x1b\x75\x38\x0e\x55\x51\x06\x6d\x59\x0c\xd9\xe9\x33\x62\x06\x4b\x17\x12\x1e\x55\xa9\x0f\xca\xbf\xe6\x3c\xd3\x79\xfd\x9a\xaa\x2d\x08\x19\xab\x86\x84\xde\x61\x9b\x85\x43\xf7\xb4\x52\x36\xfd\xa1\x71\xfe\xbd\x7b\xa7\xd0\x6c\x07\xfd\x7e\xfb\x8b\x1a\x7b\x29\x7b\xf2\xd5\x18\xdc\xbb\x09\xd3\xbd\x47\x33\xe8\x56\x76\x61\x3c\x81\x91\x83\x55\xf3\xd1\xb9\xd2\xc3\xa8\x92\xa8\x34\x42\x26\x51\x53\xcc\xdd\x39\x8f\xe5\xdc\xdd\xb4\xfd\x60\x26\x24\x02\x51\x05\x5b\x05\xae\xe1\x2c\xe7\x2b\x20\x89\x85\x93\xc1\x49\xde\x4b\xb4\x9f\x88\xe0\xd4\x4b\xb9\x1b\xf9\x5d\xe0\xbc\x03\xbf\x05\x2f\x58\x33\x18\xde\x63\x02\x87\xe2\x04\x6d\x34\xfa\x50\xe1\xcf\xaf\xa1\xeb\x2a\x90\x9c\x3e\x70\x2c\x6c\x0a\xbf\x03\xc9\x85\x6c\xff\x7f\x02\x8d\x15\x3c\x01\x2b\x2d\x10\x3e\x5f\xcf\x81\xc4\xa4\x19\xae\x5d\x06\xd2\xb8\x27\x72\xdd\x19\xa5\x4e\xdd\x7c\xe9\xbf\xec\x18\xbb\x0a\x72\x61\x9f\x91\x66\x27\xdd\xb5\x01\xf5\x77\xa7\xff\x6a\xa7\x63\x6f\x6d\x69\xb1\xdc\x09\xd9\x6a\x31\xfb\x37\x00\x00\xff\xff\x38\x56\x7b\x91\x4a\x14\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 5194, mode: os.FileMode(420), modTime: time.Unix(1496582155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x4e\xe3\x3c\x10\xbd\xcf\x53\x0c\x26\x12\x2d\x12\x44\xfd\x2e\x8b\x2a\x01\x02\x41\x25\xa0\x15\xf0\xed\x5e\x20\x36\x32\x89\x9b\x58\x6d\xec\xc8\x76\xc3\x6a\x29\xef\xbe\xb2\xd3\x3a\x7f\x6e\xd0\xee\xe6\xa6\xaa\x67\xe6\x4c\xe6\x9c\x33\xf1\xe1\x41\xf0\x46\x59\x20\x53\xcf\x2b\x92\xc1\x10\x3e\x3c\x00\x80\x08\x4b\x02\xc8\x1f\x21\xa0\xcc\x1c\xe8\x87\x32\xaa\x86\xf6\x9f\x7e\xc2\xb0\x48\x42\x7d\x0c\xc8\xff\x38\x1f\xff\xf7\x89\x1a\xe1\xb3\x33\xfb\x17\x47\x8a\x16\x58\x11\x47\xfd\x2e\xf4\x25\x46\x4c\x7a\x50\xaa\xe0\x97\x38\x51\x9c\xe3\x68\x89\x13\x22\x1d\x38\x55\xf0\x4b\x9c\xe3\x66\x79\xc4\xb3\x0c\xb3\x18\x8a\x04\xfc\x73\x13\x21\x12\x47\x9e\xf7\xe9\x79\x96\x27\x4b\x70\x91\x58\x4a\x76\xd9\x45\x02\x2b\xca\x96\x36\xbf\x7a\x13\x5b\x45\x17\xf0\x02\x27\xbf\x00\xf9\xdf\xa6\x8f\xcf\xff\x5f\xdc\xdd\xcc\x10\xbc\x9e\x81\x4a\x49\x25\x13\x89\x52\x0e\xd7\x42\x70\x31\x86\x07\x0e\x05\x15\x6a\x8d\x57\x09\x87\x77\x2e\x96\x32\xc7\x11\x01\x2a\xcb\xee\x04\xb0\xd2\xc5\x90\xf1\x8c\x30\x65\x21\x8a\x04\x52\xb2\xca\x6b\x4c\xd9\x90\x20\x6a\x2d\x18\x8c\xcc\xc1\x82\x96\x6e\x89\xa1\x7a\xa1\x70\x7e\xf1\x7c\x1b\x48\x11\x05\x7a\x12\xaf\x21\x71\x6b\x10\xd6\x3f\x48\x91\xd4\x24\xdf\xf5\x2b\x89\xfd\x99\x73\xa1\xc0\xd6\x4e\xfc\xd1\x1f\xf0\xd3\x29\x1e\xbc\x61\x49\x18\xce\x08\xf8\xf3\xef\x57\xc3\xde\x56\x66\xbc\x89\x7f\x3b\xbb\xbf\x0e\x4e\x2d\xb7\x41\xd5\xb0\x51\x16\x56\x75\xb3\xbb\xab\xf9\xd3\x68\xe2\xcf\x9f\x46\xfb\x33\x6e\x66\x25\x7c\xf9\xdb\x97\x77\x39\x7d\xd0\x69\x97\xd3\x87\x9e\x7e\x06\xcb\x20\xd5\x93\x76\x4d\x9a\x33\x8d\x1d\x4d\xb7\x6d\x5a\xda\xbe\x6d\xbf\x09\xdb\x24\x03\x86\xca\x77\x19\x9b\x6e\x68\x9f\x18\xe1\xd5\xf4\xe9\xe2\xf2\xee\x3a\x9c\x3f\xce\xee\xe7\xcf\x7b\xb5\xd1\x44\xa1\x41\x55\x37\x04\x4d\x1b\x6a\x08\x93\x2d\x63\x2a\xe0\x24\x77\x5b\xaf\x99\x51\xf2\xb4\x5b\xac\xca\x54\xff\xb4\x58\x7f\xb5\x51\x2d\x43\xef\xdb\xa8\x1a\x0f\x7e\xc7\x43\x0e\x85\x1c\xee\x70\x29\xee\x32\x5b\x47\xca\x76\x43\x6b\x9f\x35\x93\xa4\xb6\x09\x5d\x73\x3b\xec\xe7\xf2\xad\xd3\xf3\xad\x0d\xb3\x62\xe1\xb5\xe2\xdd\xef\xc7\xf6\x80\x72\x16\x0a\xce\xd5\x44\xef\xad\x09\xbc\xa7\x74\x45\xe0\x05\x90\xdf\x4a\x41\x70\x30\x01\x64\x44\x8d\x79\x75\xa5\x19\xdd\x17\xdd\xf4\xda\x6e\x77\x8d\xa0\x1f\x46\xde\x43\x9b\x12\xea\x8f\xc7\xc4\x1f\x44\x58\xf5\x43\x35\x6f\x0c\xd3\x1d\x21\x98\x34\x7d\x77\xc2\x01\xf9\x5d\xfc\x72\x82\x3e\x83\xd6\xcc\x56\x5d\x2e\x5d\xa0\x46\xfe\xd6\x70\x4d\x33\x7a\x8e\xe8\x21\xa8\x94\x4a\x90\x4a\xd0\x5c\x1a\x8b\xaf\xb0\x54\x90\x63\x95\xea\xab\x2f\xe7\x8c\x30\x05\x0b\xc1\x33\x13\xd4\xe7\xa7\xed\xeb\xbf\xd2\x6b\x60\x96\xa9\x4d\x15\x6c\x40\x92\x18\x8e\xe4\x26\x78\xf9\x11\xbc\x1e\xfb\x9b\xcd\x51\x49\x59\xcc\x19\x71\x7b\xc2\xfb\x1d\x00\x00\xff\xff\xd2\xde\xe1\x2b\xc2\x08\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 2242, mode: os.FileMode(420), modTime: time.Unix(1496488125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8a\xdb\x30\x10\xc6\xef\x7e\x8a\xa9\xb6\xd0\xdd\xc3\xb2\x4f\x50\x68\x69\x0b\x3d\xf4\x5a\x28\x94\x62\x26\xd2\x38\x16\x51\x24\xa1\x19\x39\x4d\x97\x7d\xf7\x62\x6d\x9c\x64\x4c\x4a\xaf\x3f\x8f\xbe\xf9\xf3\x7d\xbe\x7b\xf3\xb4\xf1\xf1\xe9\x0f\x8f\x5d\x67\xc7\x7c\x70\xfd\x50\xa3\x15\x9f\x22\xbf\xbf\x7f\xfb\xbc\x42\x3f\x3f\xfc\x7a\x01\xd3\xf7\xd3\xb6\xc7\x2a\xa9\x47\x2b\x7e\x42\x21\xf3\xd0\x75\x8d\xda\xb4\xcf\x81\x5a\xed\xfd\x03\x3c\x77\x00\x00\x33\x43\xe7\x60\x29\x56\xd0\xba\x8c\x76\x87\x5b\x62\x85\x1d\xdd\xac\x76\xc4\x52\xd2\x51\x31\x8a\x5c\x8b\x2e\xa3\x09\x83\x02\x23\x85\xac\x80\x8f\x5e\x14\x08\x3e\xee\x56\x80\x75\x05\x93\x54\x2d\xc2\x82\x52\xf5\xdc\x35\xfa\xc8\x82\x21\xac\xe8\x59\xfe\xee\x0c\x1f\x7f\x80\xf9\x78\x5a\x12\x10\x38\x93\xf5\x83\xb7\x30\xf9\x22\x15\xc3\x36\xc1\x21\x95\x1d\x67\xb4\x64\xf4\xed\xb4\xc6\xe7\xf3\xa9\x40\x46\x02\x5b\x4b\xa1\x28\xb7\x65\x56\x67\x5d\x0d\x03\x87\x82\x39\x53\x81\x21\x15\x70\x94\x41\x46\x14\x38\x2d\xc4\x4d\xdd\x51\xa6\xe8\x28\x5a\x4f\x0c\x3e\x36\x76\xa3\x53\x7b\x44\xe8\x20\x0d\x30\x51\x74\xa9\x98\x6b\x9f\x74\xdf\x2f\xbf\x73\xe2\xd7\xe1\xd9\x16\x9f\xe5\xb5\x2f\x8f\xa9\x06\x07\x1b\x6a\x76\x3e\x92\x5b\xfa\x2d\x1b\xf2\x48\x21\x98\x8b\xd9\x5a\xf5\x2b\x85\x0c\xb8\x49\x55\x00\xe3\x71\xfe\xb4\xc7\xe8\xcc\x25\x0a\xba\xfc\x53\xa1\xe6\x43\x9c\x03\x85\x9b\x30\x5b\x72\x59\x67\xc6\xb3\x85\xe0\x05\x24\xa9\x29\x9c\x2f\x64\x25\x95\xa3\xb9\x84\x4a\x4b\x7f\x9b\x1f\xfe\xc7\x9a\x45\x55\x46\xcf\xd7\x92\xff\xc8\xcd\xf7\x16\x28\xbe\x3d\x08\x0c\x25\xed\xdb\xa7\x2b\x3f\xe4\x1d\x37\x31\x72\x20\xc9\x2c\x89\xec\x5e\xba\x6e\xd6\x75\x34\xc0\xfa\xff\x85\x69\xdb\xfd\x0d\x00\x00\xff\xff\xce\xd0\x93\x71\x1e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1496582211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

