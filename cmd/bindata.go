// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x7b\x6b\x1b\x3b\x16\xff\xdf\x9f\xe2\xd4\x0d\xd8\x2e\x4c\xbc\xc9\xfe\xd7\x92\x85\xb4\x09\x69\x20\x6d\x42\xda\x6e\x59\x42\x3a\xc8\xa3\xe3\xb1\x88\x46\x9a\x95\x34\x8e\x7d\xc9\x87\xbf\x48\xf3\x92\xc6\x4a\x1f\xd4\xbd\x86\x92\x8e\x74\x8e\xce\xeb\x77\x1e\xd2\xcb\x17\xf3\x05\x13\xf3\x25\xd3\xab\xf9\x68\xb4\xac\x44\x66\x98\x14\xb0\xce\x47\x00\x00\x6c\x09\x42\x1a\xc8\x64\x25\x0c\x1c\x10\x95\xaf\xe1\x3f\x30\xa7\xb8\x9e\x8b\x8a\x73\x47\x62\x7f\x99\x2c\x0a\x22\x68\xcb\x65\x7f\x0a\x4d\xa5\x84\xfb\x44\x41\xdd\xdf\x97\x80\xd9\x4a\xd6\xc7\xdc\x1d\xdd\xbb\x35\xfd\xc8\x4c\xb6\x0a\xd7\xdc\x89\x44\x23\x30\xc1\x4c\xb7\x62\x7f\xe9\x3a\x4f\xed\x62\x4b\x7f\x78\x98\x0c\x79\x48\x66\xd8\x9a\x18\xdc\xe1\x6b\x37\xbe\xc3\x4b\xf1\x59\xee\xc8\x96\x63\xc9\x68\x49\xb2\x07\x92\xa3\xde\x61\x89\x6c\x39\x96\x9c\xcb\x05\xe1\xe7\x1b\xcc\x76\x58\xfa\xad\xef\x68\x59\x95\xb9\x22\x74\x57\xc5\xe1\xba\x23\x9e\xbc\x9a\x04\x84\x7d\xa4\x6a\x09\x5d\x80\xec\x3f\x2f\xfe\xad\xa7\x47\x71\xf7\xb9\xe5\x75\x0e\x9c\x89\x87\x9a\x35\xe0\x1c\x98\xce\x96\x70\x07\xc9\x5f\x30\x3e\xf8\xef\xe5\xed\xe7\x2f\xa7\x57\x17\xd7\x63\xe8\xad\x72\xa8\x38\x57\x4a\xaa\xd7\xf0\x51\xc2\x9a\x29\x53\x11\x9e\x4b\x78\x94\xea\x41\x97\x24\x43\x60\xba\x0e\x2c\x02\x31\x60\x56\x08\x85\x2c\x50\xf4\xe0\x58\xe7\xb0\x42\x5e\xc6\xc2\x51\x03\x11\x8e\x02\x28\x66\x14\x7a\x5d\xd2\x9b\xd3\xcf\xef\xe7\x5a\x65\xf3\x88\x29\x41\xd8\x6b\x43\xc4\x73\x86\x44\x80\xe2\x0e\xec\x58\xa7\x5e\x22\xcd\x20\xe1\x06\x8e\x3d\x76\x8d\x06\x5c\xd4\x8f\xef\x61\xba\x20\x1a\x05\x29\x10\x0e\x6e\xbe\x9e\xcd\xc2\xb3\x2c\x61\x92\x6f\xa0\x53\xa2\x41\xcb\x71\x7d\x96\xf3\xe7\x69\xad\x05\x13\xb9\x67\x69\x9c\xdb\xd9\x0f\x07\xef\xaf\x3f\x9c\xcf\x0f\x3b\xef\xcf\x3d\xb6\x80\x2f\xed\x19\xaf\xaf\xce\x2e\xae\x6b\xee\xfa\xef\xc0\x4b\x17\xd7\x6f\x2f\x3f\x8e\x07\x26\xc6\xce\x78\x7b\xf9\x11\x6a\xea\xda\x02\xae\xf1\xe7\x78\x62\xca\xd8\x82\x16\x77\x58\x48\x5d\x2b\xee\xd4\x0e\xa8\x5a\x93\x42\x07\xbd\xf6\x4d\xec\x49\x9d\x16\x03\x28\x59\xf9\x8e\xac\x78\xa0\x4c\x41\x52\xc6\xc1\x16\x52\xd4\xd6\x07\xa7\xb7\x9e\x75\x32\x7a\x3d\x23\xe9\x94\x9e\x5d\x7e\x3a\x7d\x7b\x75\x9e\xde\xdc\x5e\x7f\xb8\xf9\xec\xbb\xbc\x45\xb3\x86\x24\x03\x5b\xe6\xd3\x52\xc9\xa2\x34\x90\x4a\x4e\x53\x6f\x61\x87\x03\x62\x9b\x1d\xc0\x6c\x80\xa7\xbd\x06\x33\x18\x87\x15\xe9\xb9\xd3\xdb\x14\xec\x8a\x4e\x90\x6e\x83\xf4\xf9\xe7\x2a\x47\xa4\xc0\xef\x54\x8e\x3e\xbb\xce\x5a\xea\x41\x7e\xf5\xe1\xeb\xb0\x11\x81\x6d\x48\x55\x47\x39\x06\x64\x9f\x2e\x46\xb5\x07\x48\x60\x34\xc8\x01\x66\x86\x91\xfc\x11\x07\xc6\x63\x1f\x26\x23\x42\xa4\x28\xe1\xa0\x26\xf9\x3b\x11\xcb\x9f\xdd\x1d\x38\x79\x77\xdb\xb1\xef\x82\xcf\xef\xa0\x8e\x93\x83\xb5\xa4\x87\xd5\xa0\x92\xfe\x46\x3b\x70\x28\xfa\x52\xd2\x1a\x41\x9d\x04\xb7\x97\x4b\xc8\xad\xf4\x0a\x72\x66\x56\xd5\xe2\x30\x93\xc5\xfc\x02\xcd\x27\xa3\x90\x14\xf3\x75\xee\x1d\x71\x8b\x5c\x12\x6a\xcf\xb0\xd8\xd6\x2b\xe4\x1c\x4a\xa2\x0c\xc8\xe5\x2f\x9f\xda\xa4\x03\xae\x09\x87\x24\xa9\xcf\xb2\x51\x84\x27\xd0\xb2\x52\x19\x8e\x06\x56\x07\xce\x19\x43\x42\x42\x4f\xbc\x38\xd9\xa5\x19\xe4\xee\x6d\x90\x47\x01\xad\x9f\xa1\xfd\xf0\xb1\x4b\x12\xaf\x23\x83\x21\xeb\x27\xba\xaf\x5f\x4b\xfe\x27\x2b\xd0\x2b\x59\x71\x0a\xba\xc4\x8c\x2d\xb7\x40\xba\xd1\xc9\xac\x88\x69\x77\x17\x08\xb8\xc1\xac\x32\x48\x77\x2a\x4a\x64\xce\x8b\x57\x94\x3f\x0d\x35\x1b\xcf\x66\x40\xa8\xc7\xc9\x7d\x86\xf1\xd7\xa3\xe3\xa6\xaa\xca\xc8\x7e\xa4\x4c\x12\x29\x92\x35\x51\x8c\x2c\x38\xc2\xcd\xd7\xb3\x56\x41\x6d\x88\xa9\x34\x24\x09\xd3\x49\xe3\xfe\x44\x57\x0b\x6d\x98\xa9\xec\x61\xcf\xdd\x36\x9a\xeb\xc6\x92\x09\x0a\x44\x80\x95\x96\xb4\x40\x73\x7d\x8d\x07\x49\xde\x6f\xa5\x4a\x4a\xe3\x46\x2e\xb7\xff\xb8\x62\x1c\xc1\xa0\xb6\xa8\x19\x10\x59\xb7\xf4\x2d\x8f\x2d\x6b\xb2\x64\x09\xe3\x21\xa9\x37\x54\x85\x3d\xd2\x8a\x17\xf8\xd8\xbb\x2c\x75\x13\xdf\x34\x23\xe6\xfb\xa7\xcc\x82\x63\xd8\x12\x16\x98\x33\xe1\xae\x6a\xce\xa4\xff\xf7\x85\xf4\x0d\x48\xd5\x58\x10\x11\xf5\xe2\xc4\x03\xda\x9b\xae\x37\xfb\xbf\x20\xc0\xbb\x47\x84\x83\xc1\x80\xdf\x0b\xcb\x70\xfb\x25\x98\x15\xd3\xa0\x8d\x62\xa5\x76\xc5\x8b\x13\x6d\xa0\x24\x66\x65\x33\xad\x94\x02\x85\x81\xa5\x92\x85\xdb\xb4\xeb\x87\xe1\xa4\x3c\x88\xc7\xb4\xb9\x5c\x0e\x96\x9f\x40\x23\x85\x89\x7e\x9a\xdf\x7d\x9b\xdf\xbf\x3a\x78\x7a\x9a\xcc\x42\x64\xee\x02\x72\x34\xb2\x1a\x70\xb4\xd0\xcc\xac\x03\x92\x04\x37\x19\xaf\x34\x5b\x47\xf6\x04\x8c\x9d\x7f\xa7\x69\xdd\xf3\x44\x55\x2c\x50\xa5\x72\x99\x66\x05\x4d\x89\xca\x75\xfa\x28\x53\x59\x1a\x3d\x83\x13\x38\x1a\x43\xb2\x21\xbd\x4b\x01\x20\xa1\x30\x3e\x6d\xbf\x49\x53\x71\x58\x16\x1b\x67\xc6\xfb\x91\xde\x5f\x93\x6a\xe9\xef\x56\x44\xe4\xe8\x1c\x6d\x45\xd9\x62\x4c\x99\xc2\xcc\x48\xb5\x05\x23\xeb\xde\xa2\x32\x6f\x51\x2e\xdd\x62\x33\x5a\xed\x5b\xbf\xbe\x94\xd5\xfa\x9d\xf5\xdf\x56\x6a\x56\x29\x65\xd1\xf1\xe7\x1c\x44\x51\x1b\x25\xb7\xd0\x86\xe7\x16\x0b\xb9\x46\x0d\x52\xa0\xcd\xa7\xa2\xe2\x86\x95\xdc\x33\x1c\x6c\x67\x20\x9c\x5b\xfd\x98\x82\x4c\x0a\x83\xc2\xe8\x3d\xa9\x83\x42\x57\x0a\xa1\x53\xe7\x14\x1e\x15\x29\x4b\x54\xb0\x94\x0a\x28\x96\x75\x53\x62\x42\x1b\xc2\x79\x9d\x4e\x14\x4b\x14\x14\x45\xc6\x50\x03\x13\x6e\x2d\x3a\x20\x0b\x6d\x90\x50\x37\x30\xa0\xa0\x52\xed\x4b\x67\xdb\x76\xa0\xd7\xf9\x7c\x53\x4a\x5d\xc7\x4f\x67\x8a\x95\x66\xa7\x91\xae\x09\x4f\x90\xb6\xba\xb6\x41\x76\x73\xc8\x9e\x74\xf2\xde\x57\x1a\x9d\x5c\xef\xf6\x9a\x7b\x4d\xc1\xb7\x30\x95\x95\xd1\x8c\x62\x14\xe6\xb3\x3d\xe9\xe3\xe6\x04\xcf\x47\xef\xed\x37\x59\xc8\xca\x00\x11\xdb\x56\xa9\x3d\x09\x73\x0f\x67\x9e\xb0\x77\x0a\x5d\xc1\x11\x14\x50\xb8\xce\x4b\x06\x78\xe6\x4c\x3c\x00\x33\x6d\x05\x68\x23\xd2\x55\x81\x3d\x29\xe6\xc4\x78\x8a\x5d\xd9\xef\x1f\xe4\x79\xab\x93\x6b\x22\xfb\x57\x48\x9b\x50\x21\x6d\x5c\x72\xe3\x86\x69\x37\xaa\x76\x7a\xec\x2b\xc3\x35\x9a\xaa\xf4\xb3\xc5\x45\x44\x7b\xa6\x33\x01\x5b\x59\xa9\xbd\xe6\x43\x33\x5f\x75\x52\x3f\xad\xe4\x23\x30\xb1\x94\x0d\x08\x9d\xc0\x36\x0a\xfb\xae\xb1\x95\x68\xea\x55\x23\xfc\x4b\xf7\x4d\xa0\x69\x4f\x7d\xff\xff\x43\x8d\xa6\x12\x3d\xf8\x6a\x1d\xec\xb7\x8e\xc3\xbd\xd7\xc6\xab\x9e\x66\xa2\x1d\x80\x91\x82\x91\xfb\xd2\xaa\xbe\x87\xf6\x5a\x35\xdf\x61\x09\x5f\x30\x41\xd4\xd6\x25\xaa\x72\xb7\x40\x9b\xaa\xf1\xe2\xe9\x4f\xdf\x4e\x0d\x7b\xd9\xd5\x4c\xe4\x69\x53\x62\xba\x69\x38\x2b\xa8\xbd\x27\xb9\x45\xce\x04\x42\x22\xcb\x6c\x16\x79\xc2\xcc\x0a\x3a\x83\x24\x37\x70\xe4\x5d\x06\x1c\x45\xfb\x96\x0f\x27\x8e\xea\xee\xf8\xde\xa3\xe8\xa7\x42\xf8\x57\xf4\x49\x68\x04\xfe\x3d\x29\x72\x75\xc8\xd1\xa4\xc1\x23\xaf\x9b\xf2\x63\x0f\x6c\x90\x14\x64\x43\xb1\x34\x2b\xf8\x37\x24\x05\x13\xdd\xff\xcd\xb6\x44\xa0\xcd\x6c\xa8\x4f\x62\xcc\x27\x27\xf0\x04\xb9\xc2\x12\x92\x35\x4c\xbe\xe5\x52\xe6\x1c\x0f\x73\xc9\x89\xc8\x0f\xa5\xca\xe7\x93\x9f\x16\x7e\xec\x09\x3f\xfe\x45\xe1\x71\xc9\xce\x2d\x11\xa8\x3d\x13\xdd\x6e\xda\xac\xe1\x35\x9e\xba\x97\x7b\x6d\xe2\x6d\xec\xb9\x43\x9a\x99\xe8\xb7\xce\xe8\x72\xbe\x3e\x65\x32\xdd\x09\xe9\x6c\x32\xfa\x3b\x00\x00\xff\xff\xff\x8b\x41\x6e\x93\x1a\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 6803, mode: os.FileMode(420), modTime: time.Unix(1496915224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x29\xe0\x08\xde\x63\x02\x03\x4d\x90\x20\x0d\x90\xc6\x46\x92\x6e\x18\x82\x4e\xa0\xa5\xb3\x44\x44\x12\x05\x92\x52\xb2\x35\xfd\xdf\x07\x52\x16\xf5\x8b\x96\xd3\xad\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xbe\x23\xdf\xbf\xf3\x37\x34\xf7\x45\xe2\x38\x55\x3c\x3b\x82\xef\x0e\x00\x40\x48\x04\x82\xeb\x2d\x5c\xa0\xb9\x5e\x50\x1f\xcd\xa9\x3c\x32\xff\xd4\x17\x04\x55\x1c\xa8\x65\x70\xbd\xef\x9f\x4e\x7e\xfb\xe1\xf6\xcc\xa7\xa7\xe6\x2f\x09\x25\xad\x88\x44\x4b\x7c\x63\x3a\x88\x11\xe1\x04\x4a\x6b\x3c\x88\x13\x46\x05\x09\x9f\x48\x8c\xc2\x82\xd3\x1a\x0f\xe2\xc4\x29\xdb\x90\xf4\xf2\x05\x43\x0b\x4e\x6b\x3c\x88\x53\x16\x31\x27\x91\x2d\xa9\x9d\xe5\x20\xc2\xc7\x7e\x6c\xc8\xb2\x8c\xe4\x11\x54\x31\x78\x9f\xb4\x05\x05\x09\x1d\xe7\x87\xe3\x98\x8e\x99\x56\x57\xb1\x69\x4e\xe3\x5d\xc5\x90\xd2\xfc\xc9\xf8\xb7\x35\x31\x51\x74\x0b\x8f\x30\xff\x07\x5c\xef\xf7\xeb\xbb\x87\xaf\x67\x37\x57\x2b\x17\xbe\x9d\x82\x4c\xb0\x25\x0c\x86\x09\x83\x4b\xce\x19\x3f\x81\x5b\x06\x15\xe5\xb2\x24\x69\xcc\xe0\x99\xf1\x27\x51\x90\x10\x81\x8a\x7a\x77\x04\x22\x55\x30\x64\x2c\xc3\x5c\x1a\x88\x2a\x86\x04\xd3\xa2\xd3\x33\x63\xe2\x28\x4b\x9e\xc3\x42\x2f\x6c\x69\xcd\xdb\x08\xda\x03\x05\xeb\xb3\x87\xcf\xbe\xe0\xa1\xaf\x32\x71\x7a\x64\x1b\x24\x92\x4f\x27\x52\xc5\x1d\xf2\x35\xfb\xd5\x85\x7d\x29\x18\x97\x60\x62\x97\xde\xe2\x27\xea\x33\x0a\x9e\x6d\x88\xc0\x9c\x64\x08\xde\xfa\x8f\x8b\xa3\xfe\x56\xaa\x9a\x67\xf5\x21\x68\x1e\x77\x12\xb5\x1f\x45\xa7\xbf\xf4\x3e\xaf\xbe\x5c\xfa\xc7\xa6\xf6\xfe\x9e\xb0\xa0\x8d\x5b\xdd\x5c\xac\xef\x17\x4b\x6f\x7d\xbf\xd8\xef\x71\xb5\xaa\xe1\xeb\xdf\x09\x24\xed\xa5\x7d\x06\xf5\xbe\x5a\x9d\x5f\xdf\xee\x2d\xca\x70\xb7\xf3\xeb\xdb\x65\x1d\x52\xef\x95\x0a\x7c\x53\x88\xed\xd4\x6a\xe2\x99\xd2\x76\x8f\xde\x24\xd5\xaf\xe1\x89\x25\xc9\x1d\xfa\x80\x6b\x0d\xee\xce\x49\x83\xed\x12\x3d\xd1\x35\x70\xf7\x91\x23\xb8\xb8\xbe\x3f\x3b\xbf\xb9\x0c\xd6\x77\xab\x2f\xeb\x87\xbd\x65\x51\x8d\x71\x67\x6d\xdc\x11\xa8\x36\xb9\x3d\xa2\x64\x4f\x11\xe5\x30\x2f\xec\x52\xe8\x7b\xd4\x15\x6d\x84\xde\x92\xfc\x7f\x09\xfd\x3f\x29\x7c\x20\x30\x9b\xc2\x5b\x19\x5c\x34\xce\x13\x42\xd0\x1c\x1e\xd1\xda\xd2\x44\x0b\x6f\x6c\xa4\xb0\x31\x69\xd4\xed\xe1\x86\x86\xf7\x65\x2e\xb0\x23\xce\xb1\xde\x2c\xba\xb1\x31\xda\x2a\xc3\x81\xe8\x4d\x3f\x49\x29\xd9\x78\xe4\x35\xa5\x63\x79\xc0\x19\x93\x4b\x35\x6a\xb4\xe1\x39\xa1\x29\xc2\x23\xb8\xde\xc0\xc5\x85\x77\x4b\x70\x75\xdf\x23\xd6\xbe\x07\x34\x35\xb6\x63\xf7\xce\xb8\x19\x73\x45\x7d\x39\x3e\x07\xc6\x25\x50\xf3\x6e\xe9\xcd\x42\x22\xa7\xa1\xfa\x97\x9c\xde\xdd\x75\x61\xd9\xa7\xe6\x9c\x81\xeb\x8d\xf1\xeb\x0c\xa6\x38\xdc\xe1\x63\x7b\x1f\x8e\x81\x7a\xfe\xbb\x5b\xa7\xcf\x57\xc7\x62\x7d\x0f\x32\xa1\x02\x84\xe4\xb4\x10\x5a\x05\x29\x11\x12\x0a\x22\x13\x75\x5b\x17\x2c\xc7\x5c\xc2\x96\xb3\x4c\x1b\xd5\xfa\xf1\xf0\xed\xd4\xf6\x6b\xa6\x35\x30\x2c\x15\xbc\x82\xc0\x08\x3e\x88\x57\xff\xf1\x2f\xff\xdb\x47\xef\xf5\xf5\x43\x5d\xb2\x88\xe5\x68\x38\xb1\x7b\x53\x18\x36\xb0\x34\x6a\x53\xec\x4c\xb4\xb7\xdf\x8e\x83\xd1\x31\x56\xeb\xd7\x22\xaa\x95\x6a\xf6\xd1\xb6\x98\x41\x8c\x12\xe6\x25\xc4\x54\x26\xe5\xe6\x38\x64\x99\x7f\x85\xf2\x5e\x72\x24\x99\x5f\xc5\x1d\x88\x3b\x4c\x19\x89\x14\x86\xaa\x8f\x48\x30\x4d\xa1\x20\x5c\x02\xdb\xfe\x34\xaa\x39\x33\xd7\xa0\xc3\x7b\xa9\x57\x10\x17\xe6\xa4\x9f\xbd\xe6\xd1\xc0\xc7\x3a\x0f\xef\x7a\x33\xaa\x17\xe1\x58\xc9\x36\x76\xd9\x52\xd3\xb6\xf6\x3d\x69\x19\xcd\x8b\xe9\x91\xfc\x27\x2b\x41\x24\xac\x4c\x23\x10\x05\x86\x74\xfb\x37\x10\xf3\x48\x94\x09\x91\x8d\x75\x83\x80\x2f\x18\x96\x12\xa3\xd1\x7c\x6e\x0f\x30\x3d\x9f\xf7\xf2\xe9\x17\x11\xaa\x22\xa9\x7a\xa7\xfe\xfa\xa6\xbd\xa9\x17\xb6\xc1\xea\xfc\x1b\x00\x00\xff\xff\x6d\xe6\x70\xd7\x44\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3396, mode: os.FileMode(420), modTime: time.Unix(1496824195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7e\x8a\xa9\x76\xa1\xc9\x21\xec\x13\x14\x5a\xda\x85\x1e\x7a\x2d\x14\x4a\x09\x63\x69\x6c\x8b\x28\x92\xd0\x8c\x9c\xcd\x2e\xfb\xee\xc5\x4a\x9c\x44\x6e\xa0\xb7\xf0\x69\xf4\xcf\x8c\xfe\x3f\x7e\xf8\xf0\xd4\x5a\xff\xf4\xca\x43\xd3\x6c\xb7\x63\xbf\x4d\xe4\x02\x9a\xd5\x1a\xde\x1a\x00\x00\x1a\xd1\x81\x7a\x5c\x8d\xfd\xe9\xe7\x66\xc3\x03\x39\x07\xaf\x3c\xac\x55\xf3\xde\x34\x7a\x88\x07\xb3\xed\xb2\xd7\x62\x83\xe7\x4f\xab\xc7\xb7\x05\xfa\xfd\xf9\xcf\x3b\xa8\x22\x8e\x59\xc2\x16\xb5\xd8\x11\x85\xd4\xfa\xdc\x52\x87\x7d\x74\x54\x6a\x2f\x7d\x27\x86\xc6\xc0\x5c\x5c\x41\x6d\x22\xea\x1d\xf6\xc4\x15\x36\x74\xb7\xda\x10\x4b\x0a\xc7\x8a\x91\xe7\x9c\xea\xb2\x69\xbd\x0a\xf4\x2e\xb4\xe8\x9e\x5f\x48\x57\x78\x20\x17\x2b\x60\xbd\x95\x0a\x38\xeb\x77\x0b\xc0\x75\x05\x93\xe4\x5a\x84\x05\x25\xd7\xeb\x64\x6f\x3d\x0b\x3a\xb7\xa0\xff\xc8\xe7\xd8\x27\x34\xa7\x6d\x1e\x2e\x74\xf3\x0b\xd4\x97\xf3\x7b\x00\x02\x47\xd2\xb6\xb3\x1a\x46\x9b\x24\xa3\xeb\x03\x1c\x42\xda\x71\x44\x4d\xaa\x7e\xe6\x5a\xe3\xdb\xe5\x55\x41\x06\x02\x9d\x53\x22\x2f\xf7\x65\x16\x0e\x2c\x86\x81\x43\xc2\x18\x29\x41\x17\x12\x18\x8a\x20\x03\x0a\x9c\x97\xe4\xa2\x6e\x28\x92\x37\xe4\xb5\x25\x06\xeb\x0b\xbb\xd3\xa9\x5c\x22\x34\x10\x3a\x18\xc9\x9b\x90\xd4\xad\xa5\x75\xdf\xe7\x97\x18\xf8\x34\x3c\xeb\x64\xa3\x9c\xfa\xf2\x10\xb2\x33\xd0\x52\x71\x7e\x43\x66\xee\x37\x6f\x58\x82\xae\xae\xb9\xa8\x55\xbf\x93\x8b\x80\x6d\xc8\x02\xe8\x8f\xd3\xd1\x1e\xbd\x51\xd7\x78\xd4\xe5\x5f\x13\x15\x1f\xfc\x94\x3d\x6c\xdd\x64\xc9\x75\x9d\x09\x4f\xb6\x82\x15\x90\x50\x4d\x61\x6c\x22\x2d\x21\x1d\xd5\x35\x68\xb5\xf4\x8f\xe9\xe2\x7f\xac\x99\x55\x65\xb0\x7c\x2b\x79\xc9\x52\x2d\xf9\xb3\x84\x8c\xef\x0f\x02\x5d\x0a\xfb\x72\x74\xe3\x87\x7c\xe4\x22\x46\x06\x24\xa8\x39\xa5\xe5\x03\x11\xf6\xd1\x50\x07\xcb\xbf\x3a\x8c\x7d\xf3\x37\x00\x00\xff\xff\x27\x7d\x68\x13\x7e\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1496592103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

