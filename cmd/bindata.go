// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\x4f\x6b\xfa\x40\x14\xbc\xef\xa7\x78\xbe\xdf\x1e\xd4\x1f\x21\xd0\x6b\x48\xa9\x54\x11\x41\x4d\x48\x8d\x0a\x45\xd6\x35\xae\x26\xb0\x26\x62\xfe\x60\xa9\x7e\xf7\x92\x4d\xd0\x26\x84\x7a\xe9\xa5\x39\x84\x64\x76\x66\xde\x32\xf3\xfe\xb5\xf4\x4d\x10\xea\x1b\x1e\xfb\x84\x64\xfb\x76\x07\x3e\x09\x00\x94\xef\xfc\x91\x91\xc7\x25\xb8\x6f\x03\xb6\x34\x1a\x40\xf7\x0e\x2a\x8e\xb9\xf6\x78\x2c\x00\xa9\x86\x10\x84\xd0\x3d\x77\x3b\x20\x3c\x3f\x02\xfc\x10\x31\x82\x61\x80\x88\xb9\xb7\xae\x88\xdc\xba\x28\x7d\x20\x8a\x45\x02\xff\xcf\x60\x54\x81\xb4\x04\xae\xf0\xf4\x0c\xfa\x56\x64\x7a\x98\x4a\x49\x14\xc6\x58\xb6\x07\xa4\x2f\x58\xfc\xbe\x03\x52\x35\x19\xa1\x65\x96\x53\x56\x70\xb9\x28\x23\x2d\xad\x70\x96\x8d\x9c\x33\xb9\x12\x92\xbb\xb2\x93\x90\x11\xdf\xde\x92\xb3\x1d\x6b\x62\xcf\xd8\xab\x35\x99\xf4\xa6\x7d\x93\xb2\xf9\xc8\x99\xb9\xbd\xf1\xd0\x62\x96\x33\x1a\x8e\xa6\xbd\x31\xab\x72\x94\x4c\x64\x5c\x02\xd2\x76\xb6\x2f\x3e\x35\x2d\xf6\x85\x94\x90\x37\xd3\x41\x35\xcc\x76\x06\xf3\x6f\x6e\xf6\xa2\x6f\x22\x96\x97\x38\x9e\xa2\xc3\x31\x61\x5e\x74\x38\xf0\x70\xfb\x73\x8d\x4d\x2d\xfe\x89\x12\x83\x9d\x2a\xc5\x5e\xf4\x8b\x4a\x68\x43\x24\x08\x2b\x03\x12\x5f\x84\x37\xdb\xc6\xdc\x94\x09\xb9\x73\xf2\x0c\x79\x9a\x44\x8c\x7b\x49\x90\xf1\x44\xa8\xa3\x5d\xf0\xbb\xeb\xf2\x70\x15\x4c\x5a\x5b\x8d\xda\x31\x36\x94\x0d\x06\xd4\x54\x48\xbe\x02\x00\x00\xff\xff\x24\x62\xee\x6b\xd7\x03\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\xdf\x9f\x62\xea\x1a\xb0\xbd\x80\xe2\x6b\xee\xbf\x16\x39\x20\xdd\xf4\x9a\x00\x6d\x13\x24\xed\x2e\x0e\xbd\x56\xa0\xa5\xb1\x4c\x84\x26\xb5\x24\xe5\xc4\x8b\x7c\xf8\x03\x49\x3d\x48\x89\x4e\xb2\x57\x77\x0d\x14\x6e\xc8\x79\x71\x1e\xbf\x19\xd2\x2f\x5f\x2c\x96\x94\x2f\x56\x54\xad\x17\xa3\xd1\xaa\xe2\x99\xa6\x82\xc3\xb6\x18\x01\x00\xd0\x15\x70\xa1\x21\x13\x15\xd7\x30\x21\xb2\xd8\xc2\xbf\x60\x91\xe3\x76\xc1\x2b\xc6\x2c\x89\xf9\x64\x62\xb3\x21\x3c\x6f\xb8\xcc\x47\xa2\xae\x24\xb7\x7f\x22\xcf\xed\xf7\x4b\xc0\x6c\x2d\x9c\x98\xaf\xaf\xbe\xd9\x35\x75\x47\x75\xb6\x0e\xd7\xac\x44\xa2\x10\x28\xa7\xba\x5d\x31\x9f\x74\x5b\xa4\x66\xb1\xa1\x3f\x3a\x4a\xfa\x3c\x24\xd3\x74\x4b\x34\x0e\xf8\x9a\x8d\x47\x78\x73\xdc\xcb\x1d\xd9\xb2\x2c\x59\x5e\x92\xec\x96\x14\xa8\x06\x2c\x91\xad\x5a\x8b\xd2\x52\xec\x22\x2a\xec\xfa\x23\xf6\x15\x4c\x2c\x09\x7b\x77\x8f\xd9\x80\xb9\xdb\x7a\x84\xbf\x2a\x0b\x49\xf2\xe1\xe1\xfa\xeb\x96\x78\xfa\xcb\x34\x20\xec\x62\xec\x34\xb4\xa1\x35\xff\xbc\xcc\x69\x62\x34\x8a\x3b\xde\x2e\x6f\x0b\x60\x94\xdf\x3a\xd6\x80\xb3\xe7\x34\xba\x82\xaf\x90\xfc\x09\xe3\xc9\x6f\x17\xd7\x9f\xbf\x9c\x7e\x78\x7f\x39\x86\xee\x54\x36\x9f\xde\x49\x29\xe4\x6b\xf8\x24\x60\x4b\xa5\xae\x08\x2b\x04\xdc\x09\x79\xab\x4a\x92\x21\x50\xe5\x52\x02\x81\x68\xd0\x6b\x84\x8d\xd8\x20\xef\xd2\x6a\x5b\xc0\x1a\x59\x19\x0b\xa4\x4b\x61\x78\x15\x24\x71\x96\x43\x67\x4b\x7a\x75\xfa\xf9\x7c\xa1\x64\xb6\x88\x1c\x25\x48\x18\x77\x10\xbe\xef\x20\x91\x14\xb3\x02\x5b\xd6\x99\x57\x82\x73\x48\x98\x86\x63\x8f\x5d\xa1\x06\x1b\xf5\xe3\x6f\x30\x5b\x12\x85\x9c\x6c\x10\x26\x57\xbf\x9f\xcd\x43\x59\x86\xb0\xf3\xcd\x6c\x5b\xd8\x1a\xbb\x41\xad\x29\x2f\x54\x9d\x3a\xc7\x36\x75\xe6\x1d\x47\x52\xdc\x43\x6b\x36\x4c\x5a\x01\xa3\x36\x06\xa7\xce\x72\xca\x0b\xcf\x3b\x71\x7e\xeb\x33\x98\x9c\x5f\x7e\x7c\xb7\x38\x6a\x23\xb6\xf0\xd8\x02\xbe\xb4\x63\xbc\xfc\x70\xf6\xfe\xd2\x71\xbb\xef\x9e\x67\xdf\x5f\xbe\xbd\xf8\x34\xee\xb9\x25\x26\xe3\xed\xc5\x27\x70\xd4\xee\x04\x4c\xe1\xf3\x78\x62\xc6\x18\xf8\x1c\x3a\x79\x28\xc2\xd0\xa6\xff\xbe\xb8\x39\x87\x49\x6b\xfb\x23\x94\x37\xe7\x30\xb3\xae\x4d\x14\xbc\xb6\x1c\xf0\x00\x59\xa5\x21\x59\xc2\x71\xe2\x05\xc7\x55\x7e\xba\x22\x8c\x2d\x49\x76\x6b\x83\xfa\x47\x85\x72\xd7\x44\x75\xee\xa5\xd1\xa4\x4f\x7d\x02\x5a\x56\x18\xf1\x59\xe3\xe9\x30\x6e\xaf\x7d\xcf\x47\xfd\x16\xe7\x8b\x3b\xa8\xf6\x6a\xaf\x9c\x8c\x3f\x2d\xd9\xe6\x36\xa7\x12\x92\x32\x5e\x70\x21\x85\x8b\x66\x20\xbd\xc9\x14\xab\xc3\x1a\xb1\x0f\x52\xd2\xb3\x8b\x9b\xd3\xb7\x1f\xde\xa5\x57\xd7\x97\x1f\xaf\x3e\xfb\x29\xd4\x54\xb4\x82\x24\x03\xd3\x24\xd3\x52\x8a\x4d\xa9\x21\x15\x2c\x4f\xbd\x85\x01\x07\xc4\x36\xdb\x82\x31\x09\x3b\xeb\x2c\x98\xc3\x38\x44\xe5\x7d\xd2\x1b\x18\x6a\xbe\xb7\x45\xdb\xf1\xae\x91\xb0\x08\x0c\xf5\x60\xe5\xef\x43\xd4\x48\xcb\x1c\x20\x6a\x87\x20\x67\x0d\x75\x0f\x43\xba\x90\xb6\xf9\x12\x29\xcd\x90\xca\x45\x3e\x56\xac\x3e\x5d\x8c\xaa\x2d\xd2\x1f\xcc\x15\x8c\x46\x3f\x48\xa6\x7e\x88\x9f\xe2\xc0\x78\x52\x84\x45\x85\x10\x41\x5f\x84\x48\x31\xd6\x3b\xfb\x8e\xff\x38\xc9\x63\x04\xbd\x78\x0c\xb7\xad\x09\xb1\x3c\xed\xc6\xa2\x67\xb4\xbc\x27\xf2\xf8\x40\xb9\x1c\xe6\xf3\x70\x6e\x0b\x12\xda\xaf\x4b\xe8\x75\xe5\x5e\x57\x6c\xa3\xe6\x4d\x55\xe1\xfc\xe7\x9a\xf0\xe8\x91\xe1\xe1\x0d\xd4\x8c\x8c\x2a\x0d\x0f\x76\x50\x2f\x24\x96\x30\xfe\xde\xd1\xfd\x77\x32\x8e\x4e\xec\x56\xdf\x60\xde\x18\x46\xc5\x1f\x0d\x6d\x3c\x19\x98\x2c\xec\x7c\xd9\x3b\xd8\x0f\xcc\x39\x36\x5c\x5f\xca\xdc\x41\x40\xab\xc1\xee\x15\x02\x0a\xa3\xbd\x82\x82\xea\x75\xb5\x3c\xca\xc4\x66\xf1\x1e\xf5\x8d\x96\x48\x36\x8b\x6d\xe1\x89\xb8\x46\x26\x48\x6e\x64\x98\x80\xaa\x35\x32\x06\x25\x91\x1a\xc4\xea\x2f\x4b\xad\x5d\x85\x5b\xc2\x20\x49\x9c\x2c\x53\x81\xf0\x00\x4a\x54\x32\xc3\x7e\x80\x02\xe7\x8c\x21\x21\xa1\x27\x5e\x9c\x0c\x69\x7a\xe0\x7b\x1d\x00\x61\x40\xeb\x47\xaf\x9b\xaa\x87\x24\xf1\x50\xf6\x6e\x0f\xcf\xa8\x31\xbf\x80\xfe\x23\x2a\x50\x6b\x51\xb1\x1c\x54\x89\x19\x5d\xed\x80\xb4\xd9\xab\xd7\x44\x37\xbb\x4b\x04\xbc\xc7\xac\xd2\x98\x0f\x5a\x42\xe4\x02\x13\x6f\x09\x3f\x3b\xd5\x4c\x3c\x83\x3a\x6b\x94\x2a\x4d\x74\xa5\xd2\x4c\xe4\x08\x13\xf7\xc7\x41\x43\xfc\x8c\xc8\x79\x5e\x99\x78\xe6\xf4\x23\x6a\xaf\x18\x95\x16\xdd\xfd\x2a\x49\x04\x4f\xb6\x44\x52\xb2\x64\x08\x57\xbf\x9f\x35\x86\x3b\x29\x90\x24\x54\x25\x75\xc8\x12\x55\x2d\x95\xa6\xba\x32\xc2\xf6\x5d\xda\xeb\x5b\xfb\x8a\xf2\x1c\x08\x07\xa3\x2d\x69\x92\xd3\x0e\x38\x2c\x00\x86\x6e\x2b\x95\x42\x68\x7b\xff\xb0\xfb\x77\x6b\xca\x10\x34\x2a\x93\x69\x3d\x22\xe3\xae\xb1\x8f\xea\x96\x2c\x59\xc1\xb8\x4f\xea\xdd\x16\xc2\x61\xc9\xa8\xe7\x78\xd7\xb9\x32\xb5\xd7\x9f\x59\x46\xf4\xe3\x52\xe6\x81\x18\xba\x82\x25\x16\x94\x5b\x20\xb5\x47\xfa\xa3\x6b\x9c\x6f\x40\xc8\xfa\x04\x11\x55\x2f\x4e\xbc\xe4\x7c\x13\x34\x81\x68\xe0\x87\x22\xc2\xc6\xd5\xe3\xf7\xc2\xd2\xdf\x7e\x09\x7a\x4d\x15\x28\x2d\x69\xa9\x2c\xe0\x31\xa2\x34\x94\x44\xaf\x4d\x75\x96\x82\x23\xd7\xb0\x92\x62\x63\x37\xcd\xfa\x51\xd8\xa0\x7a\xf1\x98\xd5\x6f\x34\xbd\xe5\x07\x50\x98\xc3\x54\x3d\x2c\xbe\x7e\x5f\x7c\xfb\x65\xf2\xf0\x30\x9d\x87\x58\x33\x4c\xc8\xd1\xc8\x58\xc0\xd0\xa4\x66\x66\x1c\x90\x24\x78\x9f\xb1\x4a\xd1\x6d\x64\x8f\xc3\xd8\xfa\x77\x96\xba\x19\x87\x57\x9b\x25\xca\x54\xac\xd2\x6c\x93\xa7\x44\x16\x2a\xbd\x13\xa9\x28\xb5\x9a\xc3\x09\xbc\x1a\x43\x72\x4f\x3a\x97\xda\x4f\x92\xc3\xf8\xb4\x59\x21\x35\x4e\xd1\x2c\xd6\xf9\xc7\x87\xd1\xdf\xbd\x1a\x34\xfa\x7f\x5d\x13\x5e\xa0\x75\xb6\x51\x66\x40\x3c\xa7\x12\x33\x2d\xe4\x0e\xb4\x70\x3d\x49\x66\xde\xa2\x58\xd9\xc5\x7a\x0e\x39\xb4\x85\x1d\x04\x36\x16\x9e\x75\x2b\x46\x6f\x56\x49\x69\x72\xe4\xe7\x39\xa9\x19\x6c\xba\x20\x5d\xe3\x46\x6c\x51\x81\xe0\x68\xea\x6a\x53\x31\x4d\x4b\xe6\x1d\xde\x8e\x36\x84\x31\x63\x21\x95\x90\x09\xae\x91\x6b\x75\x20\x83\x90\xab\x4a\x22\x78\x06\x9d\xc2\x9d\x24\x65\x89\x12\x56\x42\x42\x8e\xa5\x6b\x69\x94\x2b\x4d\x18\x73\x85\x95\x63\x89\x3c\x47\x9e\x51\x54\x40\xb9\x5d\x8b\xce\x94\x5c\x69\x24\xb9\x1d\x37\x90\xe7\x42\x1e\xca\x6a\xd3\xb4\xc0\xb7\xfa\xdd\x7d\x29\x94\x8b\xa2\xca\x24\x2d\xf5\xa0\x11\x6f\x09\x4b\x30\x6f\xac\x6d\x42\x6d\xe7\x98\x03\x59\xe5\x3d\x3c\xb6\x56\xd9\xee\xef\x8d\x07\x8e\x86\xed\x60\x26\x2a\xad\x68\x8e\xd1\x84\x9f\x1f\xc8\x22\x3b\x69\x04\x7e\x3a\x37\x2b\x64\x29\x2a\x0d\x84\xef\x1a\xb3\x0e\xa4\xce\xbe\x47\x07\xea\x7e\x95\x68\x01\x88\xe7\x80\xdc\xf6\x62\xd2\xcb\x6c\x46\xf9\x2d\x50\xdd\xe0\x41\x13\x97\x16\x13\xc6\xa3\x97\x70\x30\xe3\xda\xd7\x3d\x6b\xdc\x67\xd3\x2e\x9a\xc0\x98\x6d\x4a\x18\xfd\x13\x5d\x8a\xab\x86\xd4\xb4\x76\x5b\x0a\x04\x32\x94\x9a\x50\x7e\x70\x54\xb0\x3e\x08\xfc\xf6\xc1\xac\x3c\x01\x49\xce\x65\x54\xf9\xbe\x3a\x90\x39\x4a\xf7\xcd\x51\xda\x62\x10\xde\x53\x65\xa7\xf1\xd6\x8a\x43\x01\x11\x13\x19\x61\x17\x0e\x64\x9c\xd2\x8b\x06\x71\x08\xd4\x9d\xc5\x35\xef\x9d\xa8\xa4\x8d\x8a\xda\x29\x8d\x1b\x03\x32\x4d\x1d\x1d\x3a\x30\x06\x9a\x7f\xb3\xc0\xd5\x78\xe2\xa3\x05\x6b\x8b\x77\x6e\x7d\xd0\xd1\x3c\x1b\x0e\x94\xb9\xc1\x13\xa6\x97\xb9\x84\x1b\x60\xab\xcc\x34\xa2\x85\xa3\x6a\x53\xb4\x4b\x5f\x9b\xb9\x87\x76\x8c\x42\x5d\x95\x21\x00\xdb\xf2\x56\x5e\xa2\x52\xee\x42\x75\x48\x88\xad\xc7\x77\x4f\xef\xcd\x5a\xdc\x01\xe5\x2b\x51\xa3\x9a\x55\xd9\x54\xcd\xa1\x8f\x5d\x71\xda\x64\x68\xad\xfe\x4b\xbb\xd2\xcb\xd2\x9f\x38\xc7\x54\xdc\x07\x0c\x67\x85\x59\x51\x71\x04\xed\xec\xf1\x1a\xb3\x9e\x2a\x0b\x3b\x36\x77\x0e\x65\x97\x7b\x20\xf1\xed\xaa\x57\xc2\xf9\x60\x49\x39\x91\x3b\x8b\xfe\xd2\x3e\x50\x18\xfc\xff\x89\x7d\x79\x8b\x52\x99\x4b\x5a\x67\xd7\x95\xa4\x5c\x37\x65\xec\x36\xfd\x17\x11\x37\x3b\xec\x44\x05\x44\x9a\x02\xa3\xbc\x18\x07\xf7\x4d\xab\x7b\x5b\xa4\x76\x2b\xad\x5b\x48\x7b\xff\xcb\x36\x39\xcc\xea\x45\x46\x39\x42\x22\xca\x6c\x1e\xf9\x05\x2b\xdb\xe4\x73\x48\x0a\x0d\xaf\xfa\xaf\x79\xcd\x8f\xc0\x70\x62\xa9\xbe\x1e\x7f\xeb\x3d\xe8\xd5\xb7\xe2\x7f\x44\x5f\xc3\xfd\x7b\xf3\xab\xd8\x65\xb9\x40\x9d\x06\xbf\xf1\xd9\x7b\x6d\xa3\xd4\xfe\xa8\x00\xc9\x86\xdc\xe7\x58\xea\x35\xfc\x13\x92\x0d\xe5\xed\xff\xf5\xae\x44\xc8\xeb\x6b\x90\x3a\x09\xb8\x4e\x4e\xe0\xc1\xbd\xbc\x25\x5b\x98\x7e\x2f\x84\x28\x18\x1e\x15\x82\x11\x5e\x1c\x09\x59\x2c\xa6\x4f\xab\x3b\xf6\xd4\x1d\x3f\x57\xdd\xff\xa9\x2b\x76\x34\xf6\xf7\x1e\xed\x49\x75\x71\x5d\x7b\xa2\xda\x96\x78\x18\xdf\x41\xd4\x07\xbf\x4a\xed\x91\x57\xff\x48\xf6\x94\xb0\xfd\x0f\xdb\x91\x0a\xde\x53\x3f\xed\x0d\xd6\x55\xed\x78\x56\xbf\xe7\xc6\x87\xe1\x7d\x42\xea\x1b\xd6\x0f\xc9\x68\x61\xde\x49\x99\xce\x1e\x71\xef\x7c\xfa\x57\x24\xfb\x53\xce\x40\x78\xcf\xd7\xf3\xe9\xe8\x7f\x01\x00\x00\xff\xff\x92\x00\x81\x7f\x92\x22\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x4f\xe3\x46\x14\x7e\xf7\xaf\x38\xcc\x5a\xbb\x64\x25\xb0\xd2\x47\x90\x5b\x82\x40\x80\xc4\x92\x28\x61\x5b\x55\x74\xd7\x9a\xd8\x13\xdb\x8a\xe3\x71\x67\xc6\x06\x4a\xf8\xef\x95\x67\xe2\xf1\x6d\x72\x69\xbb\xe5\x05\x79\xce\x65\xce\xe5\x3b\xdf\x99\x7c\x38\x72\xe6\x71\xea\xf0\xc8\xb2\x8a\xf0\x78\x00\x6f\x16\x00\x80\xe7\x15\x21\x20\xfb\x02\x59\xef\x96\x55\x7e\x68\x89\x8f\x39\x01\x64\x0f\x11\xc4\xa9\x3c\x28\xff\xe2\x34\x16\x03\xfd\x55\x39\xf0\xca\x63\x40\xf6\xdb\xc5\xd9\x4f\xef\xa8\x25\x3e\x3f\xd7\x9f\xd8\x17\x71\x81\x05\x31\xd8\x57\xa2\xbd\x3e\x02\xb2\xc3\x4b\x2d\xdc\xeb\xc7\x0f\x32\xec\x2f\x71\x48\xb8\xc1\x4f\x2d\x3c\x20\x1e\x2e\x18\x7d\x35\x06\x23\x25\x7b\x3d\x84\x09\x9d\xe3\xe4\xfa\x85\xf8\x06\x27\xb5\x70\xaf\x9f\x3c\x0b\x19\x0e\x4c\x65\xd9\x48\xf6\x7a\xf8\xdc\xb6\xf5\xe9\x6a\x85\xd3\x00\x2a\x7c\x94\x67\x84\x63\xbf\x02\x8a\x6c\xba\x46\x4b\x11\x42\xa3\xf8\x1b\xf5\x22\x84\x24\x4e\x97\xda\xa2\x2e\xac\xb6\x8b\x17\xf0\x04\x27\x7f\x01\xb2\x7f\xbd\x9b\x3e\x7e\x1d\xdd\xdf\x8c\x11\x7c\x3b\x07\x11\x91\x1a\x75\xc4\x8f\x28\x5c\x33\x46\xd9\x19\x3c\x50\x28\x62\x26\x72\x9c\x84\x14\x9e\x29\x5b\xf2\x0c\xfb\x04\x62\xae\xee\x27\x80\x45\x69\x0c\x2b\xba\x22\xa9\xd0\x2e\x8a\x10\x22\x92\x64\x8d\xc6\x6b\x11\x23\x22\x67\x29\x0c\xe5\xc1\x22\x56\xe0\x0f\x9a\x11\x79\x93\xd1\xe3\xad\xc3\x99\xef\xc8\x31\xb1\x5a\x98\xed\xa4\x92\xee\x4e\xa5\x08\x1b\x18\xae\x6e\x54\xb5\x7d\xc9\x28\x13\xa0\x6d\xe5\xa1\xfe\x72\xed\xe3\x22\x94\xe3\x37\x23\x42\xc4\x69\xc8\x65\x99\x07\x66\x53\x4b\x57\x0d\x8d\xd4\x5d\x71\x1a\x42\x23\x2e\xf3\x95\x32\x4f\xd7\xbe\x1d\x7f\xb9\x76\x4e\x75\x95\x1d\xbb\xeb\x58\x99\x79\xb5\xdd\xf8\xfe\x6a\x32\x1b\xba\xf6\x64\x36\xdc\xae\x71\x33\x56\xee\xd5\xff\x1d\x9e\x46\x8f\xb7\xde\xec\xd6\xb5\xa5\x5a\xa7\xb4\x37\xe3\xcb\xbb\x07\x03\x42\xcc\x17\x5e\xde\x3d\xb8\xca\x44\x5d\x97\x70\x72\x90\x89\x29\xf0\x92\x3d\x5b\x0d\x53\xc3\xe9\x2d\x70\x92\xcc\xb1\xbf\x54\x1d\xfa\x33\x27\xec\xb5\x6a\xd1\xa0\x11\x3d\xb2\x3b\xfa\x08\x5c\x40\x82\xe5\x64\x6b\x36\x55\xc1\xda\xfd\x39\x6b\x15\xd0\x90\x91\xd9\xcc\x84\xb5\x4d\xb6\x1d\x9c\x57\x79\x6e\x94\xa4\xb3\x4d\xe1\xcf\x64\x4f\xd0\xb6\xc9\xf5\xae\xee\x66\xa3\xcb\xfb\x6b\x6f\x32\x1d\x7f\x99\x3c\x6e\x4d\xac\xc4\x0a\x3a\xae\xed\x06\x50\x22\x07\xb5\x42\x5c\x2d\x83\x98\xc1\x49\xb6\x6d\x0e\x3b\x3a\x0a\x17\x56\x97\x8b\xa6\x04\x27\x9a\x7e\xea\xc1\xfb\x4f\xf4\xf3\xaf\x78\xa7\x33\xf4\x26\xde\x69\x0c\xed\x55\xa5\xbd\x6b\x6c\xe5\xc4\xf5\x86\xd0\xd0\x5f\x03\xc4\x2d\x03\x5e\x4c\xa0\xef\x01\xa1\x7b\xa1\x9a\x55\x15\x57\x9e\x72\xd2\x60\x93\x3e\x41\x98\x07\xdd\x34\x82\x46\xea\xe8\x10\x55\xa3\xaf\x72\xd5\x1a\x9a\x3a\xec\x37\xf3\xa0\x8e\xff\xa0\xa5\xd3\x06\x80\x0c\xb2\x25\x6b\x21\xa0\xb1\x7d\xa0\xbd\x7e\xeb\xa7\x44\x03\x09\x9d\xe9\x37\xaa\x5f\xb4\x47\xca\xbc\xa0\xe0\xe3\x47\x38\x82\x37\xb5\xac\xb9\x80\x35\x84\x8c\x64\x80\xbe\xd7\x5a\x7f\xd8\x08\x7e\x06\x27\x20\x85\x93\xe6\x49\x72\x0e\xef\x87\x6c\xb5\x7a\x53\xe6\x82\xf6\xd7\x65\x85\x70\x9a\x7a\x8c\x52\xe1\xda\x93\xdf\xae\xa4\xe0\x39\x8a\x13\x22\x19\xb3\xa3\x82\xe0\xc8\x05\x24\xbb\x15\xd0\x4e\x43\x17\x7d\xf5\xc6\x0a\x33\x77\x38\x25\xcf\x9e\x56\xf1\x52\xbc\x22\xae\x7d\xec\x63\xb1\xdb\x55\xfb\x95\xa4\xb8\x5d\x72\x79\xbb\xaa\xeb\xb5\x4c\xa1\x7f\x87\xca\x62\x1f\xfa\xa0\xf7\xa6\x32\x78\x6a\x59\x34\xb0\x53\x63\xcb\x84\xac\x0f\x20\xa2\x98\x03\x17\x2c\xce\xb8\x84\x6d\x82\xb9\x80\x0c\x8b\xa8\x84\x51\x46\x53\x92\x0a\x58\x30\xba\x92\xc2\xf2\xfc\xb4\xfb\x88\xaf\xbb\x76\xac\x18\xab\xdf\xab\x35\x70\x12\xc0\x27\xbe\x76\x9e\xbe\x3b\xdf\x3e\xdb\xeb\xf5\x27\x55\xba\x80\xa6\x44\xcf\xee\xe6\x71\xaa\x51\x41\x93\xa0\xce\xb2\xb1\x9a\x0e\x7f\x61\x75\xa8\xbe\xcf\xae\x5f\xb3\x40\x11\xab\xbe\x47\xad\x73\x0a\x21\x11\x70\x92\x43\x18\x8b\x28\x9f\x9f\xfa\x74\xe5\xdc\x10\x31\x13\x8c\xe0\x95\x53\x84\x0d\x17\x53\x92\x50\x1c\x94\x3e\xca\x0a\xf1\x88\x24\x09\x64\x98\x09\xa0\x8b\x7f\xec\x55\xc7\xcc\xa4\xd3\xee\xa8\xb6\x0a\xb2\x19\xd7\xa7\x76\x05\x24\x9e\xba\x7a\xa6\x1d\x86\xa6\xad\xbd\xd2\x36\xb1\xcc\xb0\x33\x28\xa9\xd9\xee\xfc\x40\x39\x8c\x7d\x9b\xa4\xfa\x3b\xcd\x81\x47\x34\x4f\x02\xe0\x19\xf1\xe3\xc5\x2b\x60\xcd\x63\x22\xc2\xa2\x92\xce\x09\x90\x17\xe2\xe7\x82\x04\xbd\xbd\x5a\x07\xb0\x7b\xaf\x6e\xc5\xd5\x8f\x01\x96\xe6\x5a\x75\xb9\xe7\xd3\x80\xb8\xf6\x2f\xff\x53\x33\x0f\xe9\x50\xa3\x12\x76\x23\x28\xc9\xca\x06\x5a\xb6\xfe\x0e\x00\x00\xff\xff\x11\x1a\xca\xf5\x1f\x10\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

