// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1501412832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\xdf\x9f\x62\xea\x1a\xb0\xbd\x80\xe2\x4b\xee\xbf\x5d\xe4\x80\x74\x13\xb4\x01\xda\x26\x48\xdb\x5d\x1c\x8a\xae\x40\x4b\x63\x99\x08\x45\x6a\x49\x4a\x89\x17\xf9\xf0\x07\x92\x7a\x50\x12\xdd\x74\x6f\xd5\x1a\x28\xdc\x90\xf3\xe2\x3c\x7e\x33\xa4\x5f\xbe\xd8\x6c\x29\xdf\xec\xa8\xda\x6f\x66\xb3\x5d\xc9\x13\x4d\x05\x87\x2a\x9b\x01\x00\xd0\x1d\x70\xa1\x21\x11\x25\xd7\xb0\x20\x32\xab\xe0\x3f\xb0\x49\xb1\xda\xf0\x92\x31\x4b\x62\x3e\x89\xc8\x73\xc2\xd3\x86\xcb\x7c\x24\xea\x52\x72\xfb\x27\xf2\xd4\x7e\xbf\x04\x4c\xf6\xc2\x89\xf9\x7c\xfa\xc5\xae\xa9\x07\xaa\x93\x7d\x7f\xcd\x4a\x24\x0a\x81\x72\xaa\xdb\x15\xf3\x89\xab\x2c\x36\x8b\x0d\xfd\xc9\x49\x34\xe4\x21\x89\xa6\x15\xd1\x38\xe2\x6b\x36\xbe\xc2\x9b\xe2\x51\xee\xc0\x96\x65\x49\xd2\x82\x24\xf7\x24\x43\x35\x62\x09\x6c\x59\x96\x8c\x89\x2d\x61\x57\x8f\x98\x8c\x58\xba\xad\xaf\x58\x59\x16\x99\x24\xe9\xd8\xc4\xe1\xba\x25\x5e\xfe\xb4\xec\x11\x76\x91\x72\x1a\xda\x00\x99\x7f\x5e\xfc\x1b\x4f\xcf\xc2\xee\xb3\xcb\x55\x06\x8c\xf2\x7b\xc7\xda\xe3\x1c\x1c\x9d\xee\xe0\x33\x44\x7f\xc1\x7c\xf1\xdb\xf5\xdd\xc7\x4f\x17\x6f\x5f\xdf\xcc\xa1\x3b\x95\xcd\x8a\x2b\x29\x85\xfc\x19\xde\x0b\xa8\xa8\xd4\x25\x61\x99\x80\x07\x21\xef\x55\x41\x12\x04\xaa\x5c\x60\x11\x88\x06\xbd\x47\xc8\x45\x8e\xbc\x4b\x8e\x2a\x83\x3d\xb2\x22\x14\x0e\x97\x88\x70\xda\x4b\xc5\x24\x85\xce\x96\xf8\xf6\xe2\xe3\x9b\x8d\x92\xc9\x26\x70\x94\x5e\xd8\xdd\x41\xf8\xb1\x83\x04\x12\xc5\x0a\x6c\x59\x57\x5e\x21\xad\x21\x62\x1a\xce\x3c\x76\x85\x1a\x6c\xd4\xcf\xbe\xc0\x6a\x4b\x14\x72\x92\x23\x2c\x6e\x7f\xbf\x5c\xf7\x65\x19\xc2\xce\x37\xab\x2a\xb3\x95\xf2\x01\xb5\xa6\x3c\x53\x75\xea\x9c\xd9\xd4\x59\x77\x1c\x51\xf6\x08\xad\xd9\xb0\x68\x05\xcc\xda\x18\x5c\x38\xcb\x29\xcf\x3c\xef\x84\xf9\xad\xcf\x60\xf1\xe6\xe6\xdd\xd5\xe6\xa4\x8d\xd8\xc6\x63\xeb\xf1\xc5\x1d\xe3\xcd\xdb\xcb\xd7\x37\x8e\xdb\x7d\x0f\x3c\xfb\xfa\xe6\xd5\xf5\xfb\xf9\xc0\x2d\x21\x19\xaf\xae\xdf\x83\xa3\x76\x27\x60\x0a\xbf\x8d\x27\x64\x8c\x01\xc1\xb1\x93\xc7\x22\x9c\xe1\xd6\xec\x96\xca\x55\x6d\xbc\x23\x8c\x6d\x49\x72\x6f\x03\xf2\x67\x89\xf2\xd0\x44\x64\xed\xa5\xc0\x62\x48\x7d\x0e\x5a\x96\x18\x38\x6f\xe3\xa5\xbe\xcf\x7f\xf6\xbd\x16\x3c\x73\x98\x2f\x7c\xb8\xda\x23\x83\x52\x30\xbe\xb0\x64\xf9\x7d\x4a\x25\x44\x45\xb8\x58\xfa\x14\x2e\x12\x3d\xe9\x4d\x94\xad\x8e\xce\x67\x01\x38\x88\x2f\xaf\x3f\x5c\xbc\x7a\x7b\x15\xdf\xde\xdd\xbc\xbb\xfd\xe8\x87\xbf\xa9\x46\x05\x51\x02\xa6\x4d\xc5\x85\x14\x79\xa1\x21\x16\x2c\x8d\xbd\x85\x11\x07\x84\x36\xdb\x64\x37\xc9\xb6\xea\x2c\x58\xc3\xbc\x8f\xa8\xc7\xa4\x37\x10\xd2\x7c\x57\x59\xdb\x73\xee\x90\xb0\x00\x84\x0c\x20\xe1\xc7\xa1\x61\xa0\x69\x8d\xd0\xb0\xab\xfe\xcb\x86\x7a\x50\xff\x5d\x48\xdb\x7c\x09\x94\x55\x9f\xca\x45\x3e\x54\x68\x3e\x5d\x88\x6a\x82\x34\xc1\x60\xe0\x7b\x79\x34\x8c\xee\x73\x1c\x18\xce\x87\x7e\x3d\x21\x04\x40\x13\x21\x50\x87\xf5\x4e\xe0\xe4\x47\x77\x07\x4e\x1e\x6f\x5b\xf6\x71\xf2\xf9\x53\x81\xe5\x64\x60\x4e\xd2\xa5\xd5\x00\xe9\xff\x41\x8b\xb3\x59\xf4\xa9\x48\x5d\x06\xb5\x1a\xec\x5e\x26\x20\x33\xda\x4b\xc8\xa8\xde\x97\xdb\x93\x44\xe4\x9b\xd7\xa8\x3f\x68\x89\x24\xdf\x54\x99\x27\xe2\x0e\x99\x20\xa9\x91\x61\x72\x5b\xed\x91\x31\x28\x88\xd4\x20\x76\x7f\x5b\x6a\x5d\x0e\x58\x11\x06\x51\xe4\x64\x99\x28\xc2\x13\x28\x51\xca\x04\x67\x83\x53\xf7\x9c\x33\x87\x88\xf4\x3d\xf1\xe2\x7c\x4c\x33\xa8\xdd\xbb\x5e\x1d\xf5\x68\xfd\x0a\xed\x06\xaa\x31\x49\x3b\x90\xf5\x42\x39\x18\x1c\xbf\x61\xa2\xf0\xb1\xe4\xbf\xa2\x04\xb5\x17\x25\x4b\x41\x15\x98\xd0\xdd\x01\x48\x3b\x0e\xea\x3d\xd1\xcd\xee\x16\x01\x1f\x31\x29\x35\xa6\x23\x44\x09\xcc\xae\x61\x44\xf9\xde\xa9\x66\xe2\xe9\xcf\x39\xad\x52\xa5\x89\x2e\x55\x9c\x88\x14\x61\xe1\xfe\x98\x34\xc4\xdf\x10\x39\xcf\x2b\x0b\xcf\x9c\x61\x44\xed\x74\x59\x6a\xd1\x8d\xd6\x51\x24\x78\x54\x11\x49\xc9\x96\x21\xdc\xfe\x7e\xd9\x18\xee\xa4\x40\x14\x51\x15\xd5\x21\x8b\x54\xb9\x55\x9a\xea\xd2\x08\x3b\x76\xeb\xaa\xaf\x5d\x3b\xca\x53\x20\x1c\x8c\xb6\xa8\x49\x4e\xdb\x1f\x59\x0f\x18\xba\xad\x58\x0a\xa1\xed\xe8\x69\xf7\x1f\xf6\x94\x21\x68\x54\x26\xd3\x06\x44\xc6\x5d\x5d\xeb\xa4\x3b\x47\x16\xed\x60\x3e\x24\xf5\x06\xc5\x7e\xaf\x35\xea\x39\x3e\x74\xae\x8c\xed\xe4\xbb\x4a\x88\xfe\xba\x94\x75\x4f\x0c\xdd\xc1\x16\x33\xca\xed\x95\xd5\x1e\xe9\xcf\x0e\x7c\x7f\x01\x21\xeb\x13\x04\x54\xbd\x38\xf7\x92\xf3\x97\x36\x8a\xfe\xa7\x17\xf8\xb1\x88\xfe\x80\x31\xe0\xf7\xc2\x32\xdc\x7e\x09\x7a\x4f\x15\x28\x2d\x69\xa1\x2c\xe0\x31\xa2\x34\x14\x44\xef\x4d\x75\x16\x82\x23\xd7\xb0\x93\x22\xb7\x9b\x66\xfd\xa4\x7f\x63\x18\xc4\x63\x55\x5f\xb2\x07\xcb\x4f\xa0\x30\x85\xa5\x7a\xda\x7c\xfe\x63\xf3\xe5\xa7\xc5\xd3\xd3\x72\xdd\xc7\x9a\x71\x42\xce\x66\xc6\x02\x86\x26\x35\x13\xe3\x80\x28\xc2\xc7\x84\x95\x8a\x56\x81\x3d\x0e\x73\xeb\xdf\x55\xec\xfa\x24\x2f\xf3\x2d\xca\x58\xec\xe2\x24\x4f\x63\x22\x33\x15\x3f\x88\x58\x14\x5a\xad\xe1\x1c\x4e\xe7\x10\x3d\x92\xce\xa5\xf6\x13\xa5\x30\xbf\x68\x56\x48\x8d\x53\x34\x09\x0d\x41\xf3\x69\xf4\x77\x17\xc6\x46\xff\xaf\x7b\xc2\x33\xb4\xce\x36\xca\x0c\x88\xa7\x54\x62\xa2\x85\x3c\x80\x16\xae\x27\xc9\xc4\x5b\x14\x3b\xbb\x58\x8f\x64\x53\x5b\xd8\x41\x60\x63\xe1\x65\xb7\x62\xf4\x26\xa5\x94\x26\x47\xbe\x9f\x93\x52\x54\x5a\x8a\x03\x74\x41\xba\xc3\x5c\x54\xa8\x40\x70\x34\x75\x95\x97\x4c\xd3\x82\x79\x87\x07\xd3\x55\x08\x63\xc6\x42\x2a\x21\x11\x5c\x23\xd7\x6a\x22\x83\x90\xab\x52\x22\x78\x06\x5d\xc0\x83\x24\x45\x81\x12\x76\x42\x42\x8a\x85\x6b\x69\x94\x2b\x4d\x18\x73\x85\x95\x62\x81\x3c\x45\x9e\x50\x54\x40\xb9\x5d\x0b\x8e\xd7\x5c\x69\x24\xa9\x1d\x37\x90\xa7\x42\x4e\x65\xb5\x69\x5a\xe0\x5b\x7d\xf5\x58\x08\xe5\xa2\xa8\x12\x49\x0b\x3d\x6a\xc4\x15\x61\x11\xa6\x8d\xb5\x4d\xa8\xed\x1c\x33\x91\x55\xde\x9b\x53\x6b\x95\xed\xfe\xde\x78\xe0\x68\xd8\x01\x56\xa2\xd4\x8a\xa6\x18\x4c\xf8\xf5\x44\x16\xd9\x49\xa3\xe7\xa7\x37\x66\x85\x6c\x45\xa9\x81\xf0\x43\x63\xd6\x44\xea\xec\x83\x62\x4f\xdd\xaf\x12\x2d\x00\xf1\x14\x90\xdb\x5e\x4c\x06\x99\xcd\x28\xbf\x07\xaa\x1b\x3c\x68\xe2\xd2\x62\xc2\x7c\xf6\x12\x26\x33\xae\x7d\xd8\xb1\xc6\x7d\x34\xed\xa2\x09\x8c\xd9\xa6\x84\xd1\xbf\xd0\xa5\xb8\x6a\x48\x4d\x6b\xb7\xa5\x40\x20\x41\xa9\x09\xe5\x93\xa3\x82\xf5\x41\xcf\x6f\x6f\xcd\xca\x33\x90\xe4\x5c\x46\x95\xef\xab\x89\xcc\x51\x7a\x68\x8e\xd2\x16\x83\xf0\x91\x2a\x3b\x8d\xb7\x56\x4c\x05\x44\x4c\x24\x84\x5d\x3b\x90\x71\x4a\xaf\x1b\xc4\x21\x50\x77\x16\xd7\xbc\x0f\xa2\x94\x36\x2a\xea\xa0\x34\xe6\x06\x64\x9a\x3a\x9a\x3a\x30\x06\x9a\x7f\xb3\xc0\xd5\x78\xe2\x9d\x05\x6b\x8b\x77\x6e\x7d\xd4\xd1\x3c\x1b\x26\xca\xdc\xde\x0b\x98\x97\xb9\x84\x1b\x60\x2b\xcd\x34\xa2\x85\xa3\x6a\x53\xb4\x4b\x5f\x9b\xb9\x53\x3b\x46\xa1\x2e\x8b\x3e\x00\xdb\xf2\x56\x5e\xa2\x52\xee\x42\x35\x25\xc4\xd6\xe3\xbb\xa7\xf7\xc3\x5e\x3c\x00\xe5\x3b\x51\xa3\x9a\x55\xd9\x54\xcd\xd4\xc7\x2e\x39\x6d\x32\xb4\x56\xff\xa9\x5d\x19\x64\xe9\x77\x9c\x63\x4a\xee\x03\x86\xb3\xc2\xac\xa8\x30\x82\x76\xf6\x78\x8d\x59\x2f\x95\x85\x1d\x9b\x3b\x53\xd9\xe5\x1e\x48\x7c\xbb\xea\x95\xfe\x7c\xb0\xa5\x9c\xc8\x83\x45\x7f\x69\x1f\x28\x0c\xfe\x7f\xc7\xbe\x5c\xa1\x54\xe6\x92\xd6\xd9\x75\x2b\x29\xd7\x4d\x19\xbb\x4d\xff\x45\xc4\xcd\x0e\x07\x51\x02\x91\xa6\xc0\x28\xcf\xe6\xbd\xfb\xa6\xd5\x5d\x65\xb1\xdd\x8a\xeb\x16\xd2\xde\xff\x92\x3c\x85\x55\xbd\xc8\x28\x47\x88\x44\x91\xac\x03\x3f\x5e\x24\x79\xba\x86\x28\xd3\x70\xea\x5d\x8b\xdd\xdb\x76\xfd\x2b\x1e\x9c\x5b\xaa\xcf\x67\x5f\x3c\x8a\xee\x1e\x04\xff\x0a\x3e\xa6\xfa\xf7\xe6\xd3\xd0\x65\x39\x43\x1d\xf7\x7e\xde\xb1\xf7\xda\x46\xa9\x7d\x93\x86\x28\x27\x8f\x29\x16\x7a\x0f\xff\x86\x28\xa7\xbc\xfd\xbf\x3e\x14\x08\x69\x7d\x0d\x52\xe7\x3d\xae\xf3\x73\x78\x82\x4c\x62\x01\x51\x05\xcb\x3f\x32\x21\x32\x86\x27\x99\x60\x84\x67\x27\x42\x66\x9b\xe5\xf3\xea\xce\x3c\x75\x67\xdf\xaa\xee\xff\xd4\x15\x3a\x1a\xfb\xb1\x47\x7b\x56\x5d\x58\xd7\x91\xa8\xb6\x25\xde\x8f\xef\x28\xea\xa3\x1f\x35\x8e\xc8\xab\x7f\x63\x79\x4e\xd8\xf1\x27\xd4\x40\x05\x1f\xa9\x9f\xf6\x06\xeb\xaa\x76\xbe\xb2\xbf\x8a\x2a\x1d\x1e\x86\x8f\x09\xa9\x6f\x58\xff\x48\x46\x0b\xf3\x4e\xca\x72\xf5\x15\xf7\xae\x97\x7f\x47\xb2\x3f\xe5\x8c\x84\x0f\x7c\xbd\x5e\xce\xfe\x17\x00\x00\xff\xff\x54\x23\xdf\x4e\x53\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8275, mode: os.FileMode(420), modTime: time.Unix(1503149429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\xc7\x04\xc2\x92\x20\x41\x1a\x20\x8d\x0d\x3b\xdd\x30\x14\x9d\x40\x4b\x67\x89\xb0\x24\x6a\x24\xa5\xa4\x6b\xfa\xdf\x07\x51\x16\xf5\x46\xdb\xdd\x9b\xbe\x18\xe6\xdd\x3d\xe4\xdd\x3d\xf7\x90\x6f\xdf\xb8\x1b\x9a\xb9\x22\xb6\xac\x32\x9a\x4c\xe1\x9b\x05\x00\x10\x10\x81\x60\x3b\x73\x1b\x68\xa6\x16\xaa\x8f\x66\x54\x4e\xf5\xbf\xea\xf3\xfd\x32\xf2\xab\x65\xb0\x9d\x6f\x97\xe7\x3f\x7d\xb7\x7b\xe6\x8b\x0b\xfd\x97\x04\x92\x96\x44\xa2\x21\xbe\x31\x9d\xc4\x08\xf1\x08\x4a\x6b\x3c\x89\x13\x84\x39\x09\x76\x24\x42\x61\xc0\x69\x8d\x27\x71\xa2\x84\x6d\x48\x72\xfb\x82\x81\x01\xa7\x35\x9e\xc4\x29\xf2\x88\x93\xd0\x94\xd4\xde\x72\x12\xe1\x7d\x3f\x36\x60\x69\x4a\xb2\x10\xca\x08\x9c\x4b\x65\x41\x41\x02\xcb\xfa\x6e\x59\xba\x63\xba\xd5\x65\xa4\x9b\xd3\x78\x97\x11\x24\x34\xdb\x69\xff\xb6\x26\x3a\x8a\x6e\xe1\x33\xcc\xfe\x04\xdb\xf9\xe5\x7e\xf5\xf4\xe9\xea\xe1\x6e\x61\xc3\x97\x0b\x90\x31\xb6\x84\xc1\x20\x66\x70\xcb\x39\xe3\xe7\xf0\xc8\xa0\xa4\x5c\x16\x24\x89\x18\x3c\x33\xbe\x13\x39\x09\x10\xa8\xa8\x77\x47\x20\xb2\x0a\x86\x94\xa5\x98\x49\x0d\x51\x46\x10\x63\x92\x77\x7a\xa6\x4d\x1c\x65\xc1\x33\x98\xab\x85\x2d\xad\x79\x1b\x42\x7b\x20\x7f\x79\xf5\xf4\xc1\x15\x3c\x70\xab\x4c\xac\x1e\xd9\x06\x89\x64\xc7\x13\x29\xa3\x0e\xf9\x9a\xfd\xea\xc2\xbe\xe4\x8c\x4b\xd0\xb1\x9e\x33\x29\x23\x35\x29\x6b\x94\x92\x66\x91\x00\xe7\x72\xba\xf7\xad\xca\x71\x55\xa3\xd0\x2c\xea\x9c\xd4\x8c\xa5\xce\xef\x39\x1f\x16\x1f\x6f\xdd\x33\x5d\x3c\xf7\x40\x98\xdf\xc6\x2d\x1e\x6e\x96\xeb\xb9\xe7\x2c\xd7\xf3\xc3\x1e\x77\x8b\x1a\xbe\xfe\x3d\x82\xa4\xbc\x94\xcf\xa0\x60\x77\x8b\xeb\xfb\x47\x43\xd7\xcd\xbb\x5d\xdf\x3f\x7a\x75\x48\xbd\x57\x22\xf0\x87\x42\x4c\xa7\xae\x24\xab\xd7\x86\x7a\xda\xfc\x2d\x49\x92\x0d\x09\x76\x75\x17\xfe\x28\x90\x7f\x6d\xda\x30\xed\x9c\xde\x76\x06\xfe\x36\x78\x60\x4b\x5e\xe0\xc1\x6c\x9a\x6a\xf5\x9b\x73\xde\xab\x9e\x21\x23\x73\x98\x89\x41\xfb\x6c\x07\xe4\x6d\xf2\xdc\x3b\x29\xb0\x7d\xe1\xcf\x55\x4f\xec\x43\xd3\xe8\xdf\xdc\xaf\xaf\xae\x1f\x6e\xfd\xe5\x6a\xf1\x71\xf9\x74\x30\xb1\x8a\x28\xf6\xa4\x8d\x9b\x42\x45\x1b\xbb\x77\xc4\x74\x17\x52\x0e\xb3\xdc\x3c\x5b\x7d\x8f\xba\xc3\x43\x65\x59\x21\x49\xb4\x9c\xb4\xa3\xf4\xaf\xe4\xe4\x1f\xe9\xc8\x60\x8c\x4d\x3a\xd2\xce\xea\x4d\xe3\x7c\x64\x5a\xd5\xa0\x8d\x66\xcf\xd0\x59\x03\xb9\x2d\x03\x53\x4c\x74\x1f\x51\x60\xb8\xa1\x1e\xce\x22\x13\xd8\x51\x90\xb1\x28\x18\x86\xdb\x34\x76\x46\xad\x18\x28\x93\xee\x27\x29\x24\x1b\x0b\x6b\x53\x3a\x96\xf9\x9c\x31\xe9\x39\xcb\x5f\x6f\x94\xe1\x39\xa6\x09\xaa\x29\x1c\xb8\xd8\xf0\xc6\x03\x5b\xf5\x3d\x64\xed\xab\x43\x51\x63\x3b\x76\xef\x68\xe2\x98\x2b\xd5\x97\xe1\xb3\xaf\x5d\xfc\x8c\xa4\xe8\x39\x93\x80\xc8\xe3\x50\xfd\xab\xb4\xd6\x0b\xa5\x0f\x5d\x6a\xce\x18\xd8\xce\x18\xbf\xce\xe0\x18\x87\x3b\x7c\x6c\x6f\xdd\x31\x50\xcf\x7f\x7f\xb7\xf5\xf9\x6a\x19\xac\x6f\x41\xc6\x54\x80\x90\x9c\xe6\x42\x4d\x41\x42\x84\x84\x9c\xc8\xb8\x7a\x13\xe4\x2c\xc3\x4c\xc2\x96\xb3\x54\x19\xab\xf5\xb3\xe1\x0b\xad\xed\xd7\x44\xcd\xc0\xb0\x54\xf0\x0a\x02\x43\x78\x27\x5e\xdd\xcf\xbf\xbb\x5f\xde\x3b\xaf\xaf\xef\xea\x92\x85\x2c\x43\xcd\x89\xfd\xcb\x45\xb3\x81\x25\x61\x9b\x62\x47\xe6\x7e\xfc\x0e\x1e\x48\xc7\x78\x5a\x3f\xe5\x61\x3d\xa9\x7a\x9f\xfa\x6a\x60\x10\xa1\x84\x59\x01\x11\x95\x71\xb1\x39\x0b\x58\xea\xde\xa1\x5c\x4b\x8e\x24\x75\xcb\xa8\x03\xb1\xc2\x84\x91\xb0\xc2\xa8\xea\x23\x62\x4c\x12\xc8\x09\x97\xc0\xb6\x7f\x1b\x55\x9f\x99\x2b\xd0\xe1\xe5\xd9\x2b\x88\x0d\x33\xd2\xcf\x5e\xf1\x68\xe0\x63\xd4\xc3\x55\x4f\xa3\x7a\x11\x96\x91\x6c\x63\x97\x2d\xd5\x6d\x6b\x5f\xad\x06\x69\x9e\x1f\x97\xe4\xdf\x58\x01\x22\x66\x45\x12\x82\xc8\x31\xa0\xdb\xaf\x40\xf4\x53\x54\xc6\x44\x36\xd6\x0d\x02\xbe\x60\x50\x48\x0c\x47\xfa\xdc\x1e\xe0\xb8\x3e\x1f\xe4\xd3\x7f\x44\xa8\x92\x24\xcd\x6b\xb8\xde\xdf\x0f\x58\x88\x9e\xf3\xf3\xff\xd0\xc7\xd3\xed\xe9\x94\xc1\xe9\x1c\x47\x3d\x6b\x0d\x1a\x6c\xfd\x15\x00\x00\xff\xff\xaa\xbb\xa3\xe9\xd5\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3541, mode: os.FileMode(420), modTime: time.Unix(1503149425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1503149123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

