// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1496826836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\xb6\x16\xff\xdf\x9f\xe2\xd4\x0d\x60\x7b\x80\xe2\xdb\xdc\xff\x36\xe4\x02\xe9\x52\xb4\x01\xda\x26\x48\xdb\x0d\x17\x45\x27\xd0\xd2\xb1\x4c\x84\x22\x35\x92\x72\xe2\x21\x1f\xfe\x82\xa4\x1e\xa4\x44\x37\xed\x9d\x3a\x03\x43\x56\xf2\xbc\x78\x1e\xbf\x73\x48\x3d\x7f\xb6\xde\x50\xbe\xde\x52\xb5\x5b\xcf\x66\xdb\x9a\x67\x9a\x0a\x0e\xfb\x62\x06\x00\x40\xb7\xc0\x85\x86\x4c\xd4\x5c\xc3\x09\x91\xc5\x1e\xfe\x03\xeb\x1c\xf7\x6b\x5e\x33\x66\x49\xcc\x2f\x13\x65\x49\x78\xde\x72\x99\x9f\x44\x5d\x4b\x6e\xff\x89\x3c\xb7\x7f\x9f\x03\x66\x3b\xe1\xc4\x7c\x7e\xf1\xc5\xae\xa9\x7b\xaa\xb3\x5d\xb8\x66\x25\x12\x85\x40\x39\xd5\xdd\x8a\xf9\xa5\xfb\x22\x35\x8b\x2d\xfd\xe9\x69\x32\xe4\x21\x99\xa6\x7b\xa2\x71\xc4\xd7\x6e\x7c\x85\x37\xc7\xa3\xdc\x91\x2d\xcb\x92\xe5\x15\xc9\xee\x48\x81\x6a\xc4\x12\xd9\xb2\x2c\x05\x13\x1b\xc2\x5e\x3d\x60\x36\x62\xe9\xb7\xbe\x62\x65\x5d\x15\x92\xe4\x63\x13\x87\xeb\x96\x78\xf1\xd3\x22\x20\xec\x23\xe5\x34\x74\x01\x32\xff\x79\xf1\x6f\x3d\x3d\x8b\xbb\xcf\x2e\xef\x0b\x60\x94\xdf\x39\xd6\x80\x73\x70\x74\xba\x85\xcf\x90\xfc\x05\xf3\x93\xdf\xae\x6e\x3f\x7e\xba\x78\xfb\xfa\x7a\x0e\xfd\xa9\x6c\x56\xbc\x92\x52\xc8\x9f\xe1\xbd\x80\x3d\x95\xba\x26\xac\x10\x70\x2f\xe4\x9d\xaa\x48\x86\x40\x95\x0b\x2c\x02\xd1\xa0\x77\x08\xa5\x28\x91\xf7\xc9\xb1\x2f\x60\x87\xac\x8a\x85\xc3\x25\x22\xbc\x08\x52\x31\xcb\xa1\xb7\x25\xbd\xb9\xf8\xf8\x66\xad\x64\xb6\x8e\x1c\x25\x08\xbb\x3b\x08\x3f\x76\x90\x48\xa2\x58\x81\x1d\xeb\xd2\x2b\xa4\x15\x24\x4c\xc3\x99\xc7\xae\x50\x83\x8d\xfa\xd9\x17\x58\x6e\x88\x42\x4e\x4a\x84\x93\x9b\xdf\x2f\x57\xa1\x2c\x43\xd8\xfb\x66\xb9\x2f\x6c\xa5\x7c\x40\xad\x29\x2f\x54\x93\x3a\x67\x36\x75\x56\x3d\x47\x52\x3c\x40\x67\x76\x4b\xe4\xb4\xdb\x08\x5c\x38\xbb\x29\x2f\x3c\xdf\xc4\xb9\xad\xc7\xe0\xe4\xcd\xf5\xbb\x57\xeb\xd3\x2e\x5e\x6b\x8f\x2d\xe0\x4b\x7b\xc6\xeb\xb7\x97\xaf\xaf\x1d\xb7\xfb\x3b\xf0\xeb\xeb\xeb\x97\x57\xef\xe7\x03\xa7\xc4\x64\xbc\xbc\x7a\x0f\x8e\xda\x9d\x80\x29\xfc\x36\x9e\x98\x31\x06\x02\xc7\x2e\x1e\x8b\x70\x86\x5b\xb3\x3b\x2a\x57\xb3\xe9\x96\x30\xb6\x21\xd9\x9d\x0d\xc7\x9f\x35\xca\x43\x1b\x8f\x95\x97\x00\x27\x43\xea\x73\xd0\xb2\xc6\xc8\x79\x5b\x2f\x85\x3e\xff\xd9\xf7\x5a\xf4\xcc\x71\xbe\xf8\xe1\x1a\x8f\x0c\x0a\xc1\xf8\xc2\x92\x95\x77\x39\x95\x90\x54\xf1\x52\x09\x29\x5c\x24\x02\xe9\x6d\x94\xad\x8e\xde\x67\x11\x30\x48\x2f\xaf\x3e\x5c\xbc\x7c\xfb\x2a\xbd\xb9\xbd\x7e\x77\xf3\xd1\x0f\x7f\x5b\x8b\x0a\x92\x0c\x4c\x93\x4a\x2b\x29\xca\x4a\x43\x2a\x58\x9e\x7a\x0b\x23\x0e\x88\x6d\x76\xc9\x6e\x92\x6d\xd9\x5b\xb0\x82\x79\x88\xa7\xc7\xa4\xb7\x00\xd2\x41\x66\x00\x16\x83\xe2\xff\xe7\x70\x2f\xd2\x9e\x46\xb8\xd7\x57\xfa\x65\x4b\x3d\xa8\xf5\x3e\x7c\x5d\x6e\x44\x4a\x28\xa4\x72\x51\x8e\x15\x95\x4f\x17\xa3\x9a\x20\x25\x30\x1a\xe4\x20\x67\x86\x91\x7c\x8a\x03\xe3\xb1\x0f\x6b\x07\x21\x02\x90\x08\x91\x9a\x6b\x76\x22\x27\x3f\xba\x3b\x70\xf2\x78\xdb\xb2\x8f\x93\xcf\xef\xff\x96\x93\x81\x39\x49\x9f\x56\x03\x54\xff\x1b\xcd\xcc\x66\xd1\xa7\x2a\x77\x19\xd4\x69\xb0\x7b\x85\x80\xc2\x68\xaf\xa1\xa0\x7a\x57\x6f\x4e\x33\x51\xae\x5f\xa3\xfe\xa0\x25\x92\x72\xbd\x2f\x3c\x11\xb7\xc8\x04\xc9\x8d\x0c\x93\xdb\x6a\x87\x8c\x41\x45\xa4\x06\xb1\xfd\x6e\xa9\x4d\x39\xe0\x9e\x30\x48\x12\x27\xcb\x44\x11\x1e\x41\x89\x5a\x66\x38\x1b\x9c\x3a\x70\xce\x1c\x12\x12\x7a\xe2\xd9\xf9\x98\x66\x50\xbb\xb7\x41\x1d\x05\xb4\x7e\x85\xf6\xa3\xd3\x98\x24\x8e\x23\x83\x11\xf1\x1b\x66\x07\x1f\x4b\xfe\x2b\x6a\x50\x3b\x51\xb3\x1c\x54\x85\x19\xdd\x1e\x80\x74\x83\x9f\xde\x11\xdd\xee\x6e\x10\xf0\x01\xb3\x5a\x63\x3e\x42\x94\xc8\x94\x1a\x47\x94\x1f\x9d\x6a\x26\x9e\xfe\x44\x33\x69\x18\xbf\x3f\x3a\x76\x26\xac\xb5\xe8\x07\xe2\x24\x11\x3c\xd9\x13\x49\xc9\x86\x21\xdc\xfc\x7e\xd9\x1a\xa8\x34\xd1\xb5\x82\x24\xa1\x2a\x69\xdc\x9f\xa8\x7a\xa3\x34\xd5\xb5\x11\x76\xec\xae\xd4\x5c\x96\xb6\x94\xe7\x40\x38\x18\x6d\x49\x9b\x68\xb6\xaf\xb1\xa0\xc8\xfb\xad\x54\x0a\xa1\xed\xc0\x68\xf7\xef\x77\x94\x21\x68\x54\x26\x6b\x06\x44\xc6\x2d\x7d\xcb\xa3\x5b\x47\x96\x6c\x61\x3e\x24\xf5\x06\xbc\xb0\x47\x1a\xf5\x1c\xef\x7b\x97\xa5\x76\x5e\x5d\x66\x44\x7f\x5d\xca\x2a\x10\x43\xb7\xb0\xc1\x82\x72\x7b\xd1\xb4\x47\xfa\xb3\x07\xd2\x5f\x40\xc8\xe6\x04\x11\x55\xcf\xce\xbd\x44\xfb\xa5\xeb\xcd\xfe\x2f\x08\xf0\x58\x44\x38\x18\x0c\xf8\xbd\xb0\x0c\xb7\x9f\x83\xde\x51\x05\x4a\x4b\x5a\x29\x0b\x5e\x8c\x28\x0d\x15\xd1\x3b\x53\x69\x95\xe0\xc8\x35\x6c\xa5\x28\xed\xa6\x59\x3f\x0d\xe7\xfc\x41\x3c\x96\xcd\xd5\x78\xb0\xfc\x08\x0a\x73\x58\xa8\xc7\xf5\xe7\x3f\xd6\x5f\x7e\x3a\x79\x7c\x5c\xac\xc2\xcc\x1c\x27\xe4\x6c\x66\x2c\x60\x68\x52\x33\x33\x0e\x48\x12\x7c\xc8\x58\xad\xe8\x3e\xb2\xc7\x61\x6e\xfd\xbb\x4c\x5d\xcf\xe3\x75\xb9\x41\x99\x8a\x6d\x9a\x95\x79\x4a\x64\xa1\xd2\x7b\x91\x8a\x4a\xab\x15\x9c\xc3\x8b\x39\x24\x0f\xa4\x77\xa9\xfd\x25\x39\xcc\x2f\xda\x15\xd2\x60\x0e\xcd\x62\x03\xcd\x7c\x1a\xfd\xfd\x35\xaf\xd5\xff\xeb\x8e\xf0\x02\xad\xb3\x8d\x32\x03\xc8\x39\x95\x98\x69\x21\x0f\xa0\x85\xeb\x2f\x32\xf3\x16\xc5\xd6\x2e\x36\xe3\xd5\xd4\x16\xf6\x70\xd6\x5a\x78\xd9\xaf\x18\xbd\x59\x2d\xa5\xc9\x91\x1f\xe7\xa4\x1c\x95\x96\xe2\x00\x7d\x90\x6e\xb1\x14\x7b\x54\x20\x38\x9a\xba\x2a\x6b\xa6\x69\xc5\xbc\xc3\x83\xe9\x10\x84\x31\x63\x21\x95\x90\x09\xae\x91\x6b\x35\x91\x41\xc8\x55\x2d\x11\x3c\x83\x2e\xe0\x5e\x92\xaa\x42\x09\x5b\x21\x21\xc7\xca\xb5\x27\xca\x95\x26\x8c\xb9\xc2\xca\xb1\x42\x9e\x23\xcf\x28\x2a\xa0\xdc\xae\x45\x47\x65\xae\x34\x92\xdc\x8e\x0e\xc8\x73\x21\xa7\xb2\xda\x34\x20\xf0\xad\x7e\xf5\x50\x09\xe5\xa2\xa8\x32\x49\x2b\x3d\x6a\xaa\x7b\xc2\x12\xcc\x5b\x6b\xdb\x50\xdb\x99\x64\x22\xab\xbc\x97\xa2\xce\x2a\xdb\xc9\xbd\x56\xef\x68\xd8\x01\x96\xa2\xd6\x8a\xe6\x18\x4d\xf8\xd5\x44\x16\xd9\xa9\x21\xf0\xd3\x1b\xb3\x42\x36\xa2\xd6\x40\xf8\xa1\x35\x6b\x22\x75\xf6\x19\x30\x50\xf7\xab\x44\x0b\x40\x3c\x07\xe4\xb6\x17\x93\x41\x66\x33\xca\xef\x80\xea\x16\x0f\xda\xb8\x74\x98\x30\x9f\x3d\x87\xc9\x8c\xeb\x9e\x63\xac\x71\x1f\x4d\xbb\x68\x03\x63\xb6\x29\x61\xf4\x2f\x74\x29\xae\x5a\x52\xd3\xda\x6d\x29\x10\xc8\x50\x6a\x42\xf9\xe4\xa8\x60\x7d\x10\xf8\xed\xad\x59\x79\x02\x92\x5a\x97\xd9\xae\xe7\xf9\x6b\x22\x93\x94\x1e\x9a\xa4\xb4\xc5\x21\x7c\xa0\xca\x4e\xd7\x9d\x25\x53\x81\x11\x13\x19\x61\x57\x0e\x68\x9c\xd2\xab\x16\x75\x08\x34\xdd\xc5\x35\xf0\x83\xa8\xa5\x8d\x8c\x3a\x28\x8d\xa5\x01\x9a\xb6\x96\xa6\x0e\x8e\x81\xe7\xdf\x2c\x78\xb5\x9e\x78\x67\x01\xdb\x62\x9e\x5b\x1f\x75\x35\xcf\x86\x89\xb2\x37\x78\xbd\xf2\xb2\x97\x70\x03\x6e\xb5\x99\x48\xb4\x70\x54\x5d\x9a\xf6\x29\x6c\xb3\x77\x6a\xc7\x28\xd4\x75\x15\x82\xb0\x2d\x71\xe5\x25\x2b\xe5\x2e\x54\x53\xc2\x6c\x33\xc2\x7b\x7a\x3f\xec\xc4\x3d\x50\xbe\x15\x0d\xb2\x59\x95\x6d\xe5\x4c\x7d\xec\x9a\xd3\x36\x43\x1b\xf5\x9f\xba\x95\x41\x96\xfe\xc0\x59\xa6\xe6\x3e\x68\x38\x2b\xcc\x8a\x8a\xa3\x68\x6f\x8f\xd7\x9c\xf5\x42\x59\xe8\xb1\xb9\x33\x95\x5d\xee\xc1\xc3\xb7\xab\x59\x09\x67\x84\x0d\xe5\x44\x1e\x6c\x07\x90\xf6\xc1\xc1\xf4\x80\x1f\xd8\x9b\xf7\x28\x95\xb9\xa8\xf5\x76\xdd\x48\xca\x75\x5b\xc6\x6e\xd3\x7f\xe1\x70\xf3\xc3\x41\xd4\x40\xa4\x29\x30\xca\x8b\x79\x70\xe7\xb4\xba\xf7\x45\x6a\xb7\xd2\xa6\x8d\x74\x77\xc0\xac\xcc\x61\xd9\x2c\x32\xca\x11\x12\x51\x65\xab\xc8\x67\x87\xac\xcc\x57\x90\x14\x1a\x5e\x78\x57\x60\xf7\x2e\xdd\x7c\x7f\x83\x73\x4b\xf5\xf9\xec\x8b\x47\xd1\xdf\x85\xe0\x5f\xd1\x87\xd0\x19\xf8\xaf\x03\x91\x0b\x73\x81\x3a\x0d\x3e\xcc\xd8\xbb\x6d\xab\xd4\xbe\x27\x43\x52\x92\x87\x1c\x2b\xbd\x83\x7f\x43\x52\x52\xde\xfd\xbf\x3e\x54\x08\x79\x73\x15\x52\xe7\x01\xd7\xf9\x39\x3c\x42\x21\xb1\x82\x64\x0f\x8b\x3f\x0a\x21\x0a\x86\xa7\x85\x60\x84\x17\xa7\x42\x16\xeb\xc5\xd3\xea\xce\x3c\x75\x67\xdf\xaa\xee\xff\xd4\x15\x3b\x1a\xfb\x67\x8f\xf6\xa4\xba\xb8\xae\x23\x51\xed\x4a\x3c\x8c\xef\x28\xea\xa3\x0f\x12\x47\xe4\x35\xdf\x47\x9e\x12\x76\xfc\x49\x34\x52\xc1\x47\xea\xa7\xbb\xc5\xba\xaa\x9d\x2f\xed\xf7\x4c\xa5\xe3\x03\xf1\x31\x21\xcd\x2d\xeb\x6f\xc9\xe8\x60\xde\x49\x59\x2c\xbf\xe2\xde\xd5\xe2\x7b\x24\xfb\x53\xce\x48\xf8\xc0\xd7\xab\xc5\xec\x7f\x01\x00\x00\xff\xff\x60\x90\x68\xfb\x0d\x20\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8205, mode: os.FileMode(420), modTime: time.Unix(1501161691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x55\x05\xd4\x2e\xe0\x08\xde\x63\x02\x03\x49\x90\x20\x0d\x90\xc6\x46\x9c\x6e\x18\x8a\x4e\xa0\xa5\xb3\x44\x58\x26\x35\x92\x52\xd2\x35\xfd\xdf\x07\x51\x16\xf5\x8b\xb6\xb3\x35\x7a\x31\xcc\xbb\xfb\xc8\xbb\xfb\xee\x23\xdf\xbf\xf3\x57\x94\xf9\x32\x71\x9c\x22\x1e\x8d\xe1\x87\x03\x00\x10\x12\x89\xe0\x7a\x53\x17\x28\xd3\x0b\xe5\x47\x19\x55\x63\xf3\xaf\xfc\x82\xa0\x88\x83\x72\x19\x5c\xef\xc7\xf9\xe9\x6f\x3f\xdd\x8e\xf9\xec\xcc\xfc\x25\xa1\xa2\x05\x51\x68\x89\xaf\x4d\x47\x31\x22\x3c\x80\xd2\x18\x8f\xe2\x84\x51\x46\xc2\x0d\x89\x51\x5a\x70\x1a\xe3\x51\x9c\x38\xe5\x2b\x92\x5e\x3f\x63\x68\xc1\x69\x8c\x47\x71\xf2\x2c\x16\x24\xb2\x25\xb5\xb3\x1c\x45\xf8\xd8\x8d\x0d\xf9\x76\x4b\x58\x04\x45\x0c\xde\xb9\xb6\xa0\x24\xa1\xe3\xfc\x74\x1c\xd3\x31\xd3\xea\x22\x36\xcd\xa9\xbd\x8b\x18\x52\xca\x36\xc6\xbf\xa9\x89\x89\xa2\x6b\xf8\x0a\x93\x7f\xc0\xf5\x7e\xbf\x7d\x78\xfc\x72\x71\x77\x33\x77\xe1\xdb\x19\xa8\x04\x1b\xc2\x60\x98\x70\xb8\x16\x82\x8b\x53\xb8\xe7\x50\x50\xa1\x72\x92\xc6\x1c\x9e\xb8\xd8\xc8\x8c\x84\x08\x54\x56\xbb\x23\x10\x55\x06\xc3\x96\x6f\x91\x29\x03\x51\xc4\x90\x60\x9a\xb5\x7a\x66\x4c\x02\x55\x2e\x18\x4c\xf5\xc2\x9a\x56\xbc\x8d\xa0\x39\x50\xb0\xb8\x78\xfc\xe4\x4b\x11\xfa\x65\x26\x4e\x87\x6c\xbd\x44\xd8\xe1\x44\x8a\xb8\x45\xbe\x7a\xbf\xaa\xb0\xcf\x19\x17\x0a\x4c\xec\xcc\x1b\x15\xb1\x9e\x94\x25\x2a\x45\x59\x2c\xc1\x3b\x1f\xef\x7c\xcb\x72\x5c\x54\x28\x94\xc5\xad\x93\xda\xb1\xf4\xf9\x67\xde\xa7\xf9\xe7\x6b\xff\xc4\x14\xcf\xdf\x13\x16\x34\x71\xf3\xbb\xab\xc5\x72\x3a\xf3\x16\xcb\xe9\x7e\x8f\x9b\x79\x05\x5f\xfd\x1e\x40\xd2\x5e\xda\xa7\x57\xb0\x9b\xf9\xe5\xed\xbd\xa5\xeb\xf6\xdd\x2e\x6f\xef\x67\x55\x48\xb5\x57\x2a\xf1\x55\x21\xb6\x53\x97\x92\xd5\x69\x43\x35\x6d\xc1\x9a\xa4\xe9\x8a\x84\x9b\xaa\x0b\x7f\xe7\x28\xbe\xd7\x6d\x18\xb7\x4e\xef\x7a\x3d\x7f\x17\x66\xe0\x2a\x91\xe3\xde\x6c\xea\x6a\x75\x9b\x73\xda\xa9\x9e\x25\x23\x7b\x98\x8d\x41\xbb\x6c\x7b\xe4\xad\xf3\xdc\x39\x69\xb0\x5d\xe1\x4f\x75\x4f\xdc\x7d\xd3\x18\x5c\xdd\x2e\x2f\x2e\xef\xae\x83\xc5\xc3\xfc\xf3\xe2\x71\x6f\x62\x25\x51\xdc\x51\x13\x37\x86\x92\x36\x6e\xe7\x88\xdb\x4d\x44\x05\x4c\x32\xfb\x6c\x75\x3d\xaa\x0e\xd7\xca\xd1\x4c\xcd\x2f\x29\xc7\xff\x92\x8c\xde\xc4\xda\x24\xa3\x19\xcb\xab\xda\xf9\xc0\x60\xea\x99\x1a\x8c\x99\xa5\x89\x16\x1e\x3b\x16\x52\xd8\x98\x3d\xe8\x76\x7f\x43\x33\x87\x39\x93\xd8\x12\x8b\xe1\xfc\x5b\xe6\xd8\x36\x61\x56\x59\xe8\x89\x90\xe9\x27\xc9\x15\x1f\x6a\x68\x5d\x3a\xce\x02\xc1\xb9\x9a\x79\x8b\x3f\xae\xb4\xe1\x29\xa1\x29\xea\x81\xeb\xb9\xb8\xf0\x6e\x06\xae\xee\x7b\xc4\x9b\x07\x86\xa6\xc6\x7a\xe8\xde\x92\xbf\x21\x57\xca\x8f\xe1\x53\x60\x5c\x02\x46\xb6\x38\xf3\x46\x21\x51\x87\xa1\xba\xb7\x66\x25\x0d\x5a\x0a\xda\xd4\x9c\x70\x70\xbd\x21\x7e\x95\xc1\x21\x0e\xb7\xf8\xd8\x5c\xb0\x43\xa0\x8e\xff\xee\x1a\xeb\xf2\xd5\xb1\x58\xdf\x83\x4a\xa8\x04\xa9\x04\xcd\xa4\x9e\x82\x94\x48\x05\x19\x51\x49\x79\xfd\x67\x9c\x21\x53\xb0\x16\x7c\xab\x8d\xe5\xfa\x49\xff\x31\xd6\xf4\x6b\xa4\x67\xa0\x5f\x2a\x78\x01\x89\x11\x7c\x90\x2f\xfe\xd7\xbf\xfc\x6f\x1f\xbd\x97\x97\x0f\x55\xc9\x22\xce\xd0\x70\x62\xf7\x48\x31\x6c\xe0\x69\xd4\xa4\xd8\x52\xb4\xd7\x5f\xb7\x3d\xe9\x18\x4e\xeb\x97\x2c\xaa\x26\xd5\xec\x53\xdd\x02\x1c\x62\x54\x30\xc9\x21\xa6\x2a\xc9\x57\x27\x21\xdf\xfa\x37\xa8\x96\x4a\x20\xd9\xfa\x45\xdc\x82\x78\xc0\x94\x93\xa8\xc4\x28\xeb\x23\x13\x4c\x53\xc8\x88\x50\xc0\xd7\xff\x19\xd5\x9c\x59\x68\xd0\xfe\x3d\xd9\x29\x88\x0b\x13\xd2\xcd\x5e\xf3\xa8\xe7\x63\xd5\xc3\x87\x8e\x46\x75\x22\x1c\x2b\xd9\x86\x2e\x6b\x6a\xda\xd6\x3c\x50\x2d\xd2\x3c\x3d\x2c\xc9\x7f\xf2\x1c\x64\xc2\xf3\x34\x02\x99\x61\x48\xd7\xdf\x81\x98\x57\xa7\x4a\x88\xaa\xad\x2b\x04\x7c\xc6\x30\x57\x18\x0d\xf4\xb9\x39\xc0\x61\x7d\xde\xcb\xa7\x37\x22\x54\x41\xd2\xf2\xe1\xfb\xf6\x4d\x7b\x55\x2f\x6c\xc2\xea\xfc\x1b\x00\x00\xff\xff\x58\xdd\xce\x90\x95\x0d\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 3477, mode: os.FileMode(420), modTime: time.Unix(1500231182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xcc\x2a\xbd\xe5\x5b\xca\x4b\xbf\x6a\xca\xef\xa5\x78\x3c\x6f\x04\xda\x14\x76\xe5\xe8\x26\x0f\x79\xcb\x85\x8c\x0c\x48\x50\xe7\xe6\x96\xb7\x29\xec\xa2\xa1\x16\xa6\xaf\x0c\x0c\x5d\xf3\x37\x00\x00\xff\xff\x80\x34\x98\x76\xf9\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1273, mode: os.FileMode(420), modTime: time.Unix(1500928645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

