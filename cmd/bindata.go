// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 405, mode: os.FileMode(420), modTime: time.Unix(1506352061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\x1b\x37\x12\xff\x5f\x9f\x62\xa2\x08\x90\x54\x60\xad\x8b\xef\xbf\x06\x3e\xc0\xa9\x83\xc4\x40\x12\x1b\x4e\xd2\xe2\x90\x4b\x16\xd4\xee\x68\x45\x98\x22\xb7\x24\x57\xb6\x0a\x7f\xf8\x03\xc9\x7d\x90\xbb\x94\x9d\xb6\x9b\x0a\x08\x14\x93\xf3\xe2\x3c\x7e\x33\xa4\x9e\x3f\x5b\xad\x29\x5f\x6d\xa8\xda\xae\x26\x93\x4d\xc5\x33\x4d\x05\x87\x7d\x31\x01\x00\xa0\x1b\xe0\x42\x43\x26\x2a\xae\x61\x46\x64\xb1\x87\xff\xc0\x2a\xc7\xfd\x8a\x57\x8c\x59\x12\xf3\xc9\xc4\x6e\x47\x78\xde\x70\x99\x8f\x44\x5d\x49\x6e\xff\x44\x9e\xdb\xef\xe7\x80\xd9\x56\x38\x31\x5f\x5e\x7c\xb5\x6b\xea\x8e\xea\x6c\x1b\xae\x59\x89\x44\x21\x50\x4e\x75\xbb\x62\x3e\xe9\xbe\x48\xcd\x62\x43\x7f\x72\x92\xf4\x79\x48\xa6\xe9\x9e\x68\x1c\xf0\x35\x1b\x8f\xf0\xe6\x78\x94\x3b\xb2\x65\x59\xb2\xbc\x24\xd9\x2d\x29\x50\x0d\x58\x22\x5b\xb5\x16\xa5\xa5\x38\x44\x54\xd8\xf5\x47\xec\x2b\x98\x58\x13\xf6\xfa\x1e\xb3\x01\x73\xb7\xf5\x08\x7f\x55\x16\x92\xe4\xc3\xc3\xf5\xd7\x2d\xf1\xfc\xa7\x79\x40\xd8\xc5\xd8\x69\x68\x43\x6b\xfe\x79\x99\xd3\xc4\x68\x12\x77\xbc\x5d\xde\x17\xc0\x28\xbf\x75\xac\x01\x67\xcf\x69\x74\x03\x5f\x20\xf9\x03\xa6\xb3\x5f\x2f\x6f\x3e\x7d\x3e\x7f\xf7\xe6\x6a\x0a\xdd\xa9\x6c\x3e\xbd\x96\x52\xc8\x9f\xe1\x83\x80\x3d\x95\xba\x22\xac\x10\x70\x27\xe4\xad\x2a\x49\x86\x40\x95\x4b\x09\x04\xa2\x41\x6f\x11\x76\x62\x87\xbc\x4b\xab\x7d\x01\x5b\x64\x65\x2c\x90\x2e\x85\xe1\x45\x90\xc4\x59\x0e\x9d\x2d\xe9\xf5\xf9\xa7\xb7\x2b\x25\xb3\x55\xe4\x28\x41\xc2\xb8\x83\xf0\x63\x07\x89\xa4\x98\x15\xd8\xb2\x2e\xbc\x12\x5c\x42\xc2\x34\x9c\x7a\xec\x0a\x35\xd8\xa8\x9f\x7e\x85\xc5\x9a\x28\xe4\x64\x87\x30\xbb\xfe\xed\x62\x19\xca\x32\x84\x9d\x6f\x16\xfb\xc2\xd6\xd8\x47\xd4\x9a\xf2\x42\xd5\xa9\x73\x6a\x53\x67\xd9\x71\x24\xc5\x3d\xb4\x66\xc3\xac\x15\x30\x69\x63\x70\xee\x2c\xa7\xbc\xf0\xbc\x13\xe7\xb7\x3e\x83\xd9\xdb\xab\xf7\xaf\x57\x27\x6d\xc4\x56\x1e\x5b\xc0\x97\x76\x8c\x57\xef\x2e\xde\x5c\x39\x6e\xf7\xdd\xf3\xec\x9b\xab\x57\x97\x1f\xa6\x3d\xb7\xc4\x64\xbc\xba\xfc\x00\x8e\xda\x9d\x80\x29\xfc\x3e\x9e\x98\x31\x06\x3e\x87\x4e\x1e\x8a\x70\x86\x5b\xb3\x5b\x2a\x57\xb5\xe9\x86\x30\xb6\x26\xd9\xad\x0d\xc8\xef\x15\xca\x43\x13\x91\xa5\x97\x02\xb3\x3e\xf5\x19\x68\x59\x61\xe4\xbc\x8d\x97\x42\x9f\xff\xec\x7b\x2d\x7a\xe6\x38\x5f\xfc\x70\xb5\x47\x7a\xa5\x60\x7c\x61\xc9\x76\xb7\x39\x95\x90\x94\xf1\x62\x09\x29\x5c\x24\x02\xe9\x4d\x94\xad\x8e\xce\x67\x11\x38\x48\x2f\x2e\x3f\x9e\xbf\x7a\xf7\x3a\xbd\xbe\xb9\x7a\x7f\xfd\xc9\x0f\x7f\x53\x8d\x0a\x92\x0c\x4c\x83\x4b\x4b\x29\x76\xa5\x86\x54\xb0\x3c\xf5\x16\x06\x1c\x10\xdb\x6c\x93\xdd\x24\xdb\xa2\xb3\x60\x09\xd3\x10\x51\x8f\x49\x6f\x20\xa4\xf9\xde\x17\x6d\xb7\xba\x41\xc2\x22\x10\xd2\x83\x84\x7f\x0e\x0d\x23\xed\x6e\x80\x86\x5d\xf5\x5f\x34\xd4\xbd\xfa\xef\x42\xda\xe6\x4b\xa4\xac\x42\x2a\x17\xf9\x58\xa1\xf9\x74\x31\xaa\x11\xd2\x04\xa3\x81\x0f\xf2\xa8\x1f\xdd\xa7\x38\x30\x9e\x0f\x61\x3d\x21\x44\x40\x13\x21\x52\x87\xf5\x4e\xe4\xe4\x47\x77\x7b\x4e\x1e\x6e\x5b\xf6\x58\xf2\x75\x73\xca\x77\xf4\xa0\x27\x92\x73\xa4\x04\x0d\x93\x74\x38\x48\x05\x59\xea\x17\x1b\xf4\xda\x64\xaf\x4d\xb5\xf1\xf0\xc6\x9c\x70\x20\x73\x5d\x71\xf2\x48\x37\x7f\x09\x35\x23\xa3\x4a\xc3\x83\x9d\x9c\x0b\x89\x25\x4c\xbf\x75\x74\xff\x9b\x4d\xa3\x23\xb4\xd5\x37\x18\x00\x86\x51\xf1\x67\x35\x1b\x4f\x06\x26\xbf\x3a\x5f\xf6\x0e\xf6\x37\x06\x0f\x1b\xae\xcf\x65\xee\xea\xba\xd5\x60\xf7\x0a\x01\x85\xd1\x5e\x41\x41\xf5\xb6\x5a\x9f\x64\x62\xb7\x7a\x83\xfa\xa3\x96\x48\x76\xab\x7d\xe1\x89\xb8\x41\x26\x48\x6e\x64\x98\x80\xaa\x2d\x32\x06\x25\x91\x1a\xc4\xe6\x4f\x4b\xad\x5d\x85\x7b\xc2\x20\x49\x9c\x2c\x53\x5b\xf0\x00\x4a\x54\x32\xc3\x7e\x80\x02\xe7\x4c\x21\x21\xa1\x27\x9e\x9d\x0d\x69\x7a\x88\x7a\x13\xa0\x5b\x40\xeb\x47\xaf\x1b\x73\x87\x24\xf1\x50\xf6\xc6\xf9\xef\xa8\x31\xbf\x80\xfe\x2b\x2a\x50\x5b\x51\xb1\x1c\x54\x89\x19\xdd\x1c\x80\xb4\xd9\xab\xb7\x44\x37\xbb\x6b\x04\xbc\xc7\xac\xd2\x98\x0f\x70\x3e\x72\xa3\x88\xe3\xfc\x8f\x4e\x35\x13\xcf\xa0\xce\x1a\xa5\x4a\x13\x5d\xa9\x34\x13\x39\xc2\xcc\xfd\x31\x6a\x88\xbf\x23\x72\x9e\x57\x66\x9e\x39\xfd\x88\xda\x99\xbf\xd2\xa2\xbb\xf0\x24\x89\xe0\xc9\x9e\x48\x4a\xd6\x0c\xe1\xfa\xb7\x8b\xc6\x70\x27\x05\x92\x84\xaa\xa4\x0e\x59\xa2\xaa\xb5\xd2\x54\x57\x46\xd8\xb1\x5b\x74\x7d\x8d\xde\x50\x9e\x03\xe1\x60\xb4\x25\x4d\x72\xda\xa9\x85\x05\xc0\xd0\x6d\xa5\x52\x08\x6d\x2f\x04\x76\xff\x6e\x4b\x19\x82\x46\x65\x32\xad\x47\x64\xdc\x35\xf5\x51\xdd\x92\x25\x1b\x98\xf6\x49\xbd\xf1\x3d\x9c\x80\x8c\x7a\x8e\x77\x9d\x2b\x53\x7b\x1f\x59\x64\x44\x3f\x2e\x65\x19\x88\xa1\x1b\x58\x63\x41\xb9\x05\x52\x7b\xa4\xdf\xbb\x96\xf8\x12\x84\xac\x4f\x10\x51\xf5\xec\xcc\x4b\xce\x97\x41\x13\x88\x06\x7e\x28\x22\x6c\x5c\x3d\x7e\x2f\x2c\xfd\xed\xe7\xa0\xb7\x54\x81\xd2\x92\x96\xca\x02\x1e\x23\x4a\x43\x49\xf4\xd6\x54\x67\x29\x38\x72\x0d\x1b\x29\x76\x76\xd3\xac\x9f\x84\x0d\xaa\x17\x8f\x45\xfd\x68\xd2\x5b\x7e\x00\x85\x39\xcc\xd5\xc3\xea\xcb\xb7\xd5\xd7\x9f\x66\x0f\x0f\xf3\x65\x88\x35\xc3\x84\x9c\x4c\x8c\x05\x0c\x4d\x6a\x66\xc6\x01\x49\x82\xf7\x19\xab\x14\xdd\x47\xf6\x38\x4c\xad\x7f\x17\xa9\x9b\x5e\x78\xb5\x5b\xa3\x4c\xc5\x26\xcd\x76\x79\x4a\x64\xa1\xd2\x3b\x91\x8a\x52\xab\x25\x9c\xc1\x8b\x29\x24\xf7\xa4\x73\xa9\xfd\x24\x39\x4c\xcf\x9b\x15\x52\xe3\x14\xcd\x62\x9d\x7f\x3a\x8e\xfe\xee\x1a\xdf\xe8\xff\x65\x4b\x78\x81\xd6\xd9\x46\x99\x01\xf1\x9c\x4a\xcc\xb4\x90\x07\xd0\xc2\xf5\x24\x99\x79\x8b\x62\x63\x17\xeb\x39\x64\x6c\x0b\x3b\x08\x6c\x2c\xbc\xe8\x56\x8c\xde\xac\x92\xd2\xe4\xc8\x8f\x73\x52\x33\xd8\x74\x41\xba\xc1\x9d\xd8\xa3\x02\xc1\xd1\xd4\xd5\xae\x62\x9a\x96\xcc\x3b\xbc\x1d\x6d\x08\x63\xc6\x42\x2a\x21\x13\x5c\x23\xd7\x6a\x24\x83\x90\xab\x4a\x22\x78\x06\x9d\xc3\x9d\x24\x65\x89\x12\x36\x42\x42\x8e\xa5\x6b\x69\x94\x2b\x4d\x18\x73\x85\x95\x63\x89\x3c\x47\x9e\x51\x54\x40\xb9\x5d\x8b\xce\x94\x5c\x69\x24\xb9\x1d\x37\x90\xe7\x42\x8e\x65\xb5\x69\x5a\xe0\x5b\xfd\xfa\xbe\x14\xca\x45\x51\x65\x92\x96\x7a\xd0\x88\xf7\x84\x25\x98\x37\xd6\x36\xa1\xb6\x73\xcc\x48\x56\x79\x2f\x81\xad\x55\xb6\xfb\x7b\xe3\x81\xa3\x61\x07\x58\x88\x4a\x2b\x9a\x63\x34\xe1\x97\x23\x59\x64\x27\x8d\xc0\x4f\x6f\xcd\x0a\x59\x8b\x4a\x03\xe1\x87\xc6\xac\x91\xd4\xd9\x07\xe2\x40\xdd\x2f\x12\x2d\x00\xf1\x1c\x90\xdb\x5e\x4c\x7a\x99\xcd\x28\xbf\x05\xaa\x1b\x3c\x68\xe2\xd2\x62\xc2\x74\xf2\x1c\x46\x33\xae\x7d\x6e\xb3\xc6\x7d\x32\xed\xa2\x09\x8c\xd9\xa6\x84\xd1\x3f\xd0\xa5\xb8\x6a\x48\x4d\x6b\xb7\xa5\x40\x20\x43\xa9\x09\xe5\xa3\xa3\x82\xf5\x41\xe0\xb7\x77\x66\xe5\x09\x48\x72\x2e\xa3\xca\xf7\xd5\x48\xe6\x28\xdd\x37\x47\x69\x8b\x41\x78\x4f\x95\x9d\xc6\x5b\x2b\xc6\x02\x22\x26\x32\xc2\x2e\x1d\xc8\x38\xa5\x97\x0d\xe2\x10\xa8\x3b\x8b\x6b\xde\x07\x51\x49\x1b\x15\x75\x50\x1a\x77\x06\x64\x9a\x3a\x1a\x3b\x30\x06\x9a\x7f\xb5\xc0\xd5\x78\xe2\xbd\x05\x6b\x8b\x77\x6e\x7d\xd0\xd1\x3c\x1b\x46\xca\xdc\xe0\x5d\xd2\xcb\x5c\xc2\x0d\xb0\x55\x66\x1a\xd1\xc2\x51\xb5\x29\xda\xa5\xaf\xcd\xdc\xb1\x1d\xa3\x50\x57\x65\x08\xc0\xb6\xbc\x95\x97\xa8\x94\xbb\x50\x8d\x09\xb1\xf5\xf8\xee\xe9\xfd\xb8\x15\x77\x40\xf9\x46\xd4\xa8\x66\x55\x36\x55\x33\xf6\xb1\x2b\x4e\x9b\x0c\xad\xd5\x7f\x6e\x57\x7a\x59\xfa\x03\xe7\x98\x8a\xfb\x80\xe1\xac\x30\x2b\x2a\x8e\xa0\x9d\x3d\x5e\x63\xd6\x73\x65\x61\xc7\xe6\xce\x58\x76\xb9\x07\x12\xdf\xae\x7a\x25\x9c\x0f\xd6\x94\x13\x79\xb0\xe8\x2f\xed\x03\x85\xc1\xff\x1f\xd8\x97\xf7\x28\x95\xb9\xa4\x75\x76\x5d\x4b\xca\x75\x53\xc6\x6e\xd3\x7f\x11\x71\xb3\xc3\x41\x54\x40\xa4\x29\x30\xca\x8b\x69\x70\xdf\xb4\xba\xf7\x45\x6a\xb7\xd2\xba\x85\xb4\xf7\xbf\x6c\x97\xc3\xa2\x5e\x64\x94\x23\x24\xa2\xcc\x96\x91\x9f\x94\xb2\x5d\xbe\x84\xa4\xd0\xf0\xa2\xff\x9a\xd7\xfc\x2a\x0b\x67\x96\xea\xcb\xe9\xd7\xde\x83\x5e\x7d\x2b\xfe\x57\xf4\x89\xdb\xbf\x37\xbf\x88\x5d\x96\x0b\xd4\x69\xf0\xa3\x9b\xbd\xd7\x36\x4a\xed\x2f\x05\x90\xec\xc8\x7d\x8e\xa5\xde\xc2\xbf\x21\xd9\x51\xde\xfe\x5f\x1f\x4a\x84\xbc\xbe\x06\xa9\xb3\x80\xeb\xec\x0c\x1e\xdc\xcb\x5b\xb2\x87\xf9\xb7\x42\x88\x82\xe1\x49\x21\x18\xe1\xc5\x89\x90\xc5\x6a\xfe\xb4\xba\x53\x4f\xdd\xe9\xf7\xaa\xfb\x8b\xba\x62\x47\x63\xff\xec\xd1\x9e\x54\x17\xd7\x75\x24\xaa\x6d\x89\x87\xf1\x1d\x44\x7d\xf0\x53\xd3\x11\x79\xf5\x2f\x5f\x4f\x09\x3b\xfe\xb0\x1d\xa9\xe0\x23\xf5\xd3\xde\x60\x5d\xd5\x4e\x17\xf5\x7b\x6e\x7c\x18\x3e\x26\xa4\xbe\x61\xfd\x2d\x19\x2d\xcc\x3b\x29\xf3\xc5\x23\xee\x5d\xce\xff\x8c\x64\x7f\xca\x19\x08\xef\xf9\x7a\x39\x9f\xfc\x3f\x00\x00\xff\xff\xab\xa6\xeb\x43\x23\x22\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 8739, mode: os.FileMode(420), modTime: time.Unix(1506352061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x61\x85\xd6\x2e\x90\x08\xde\xc7\x04\xde\x92\x20\x41\x1a\x20\x8d\x0d\x3b\xdd\x30\x64\xad\x40\x4b\xb4\x24\x58\x16\x35\x92\x52\x92\xc5\xf9\xef\x83\x48\x9b\x12\x25\xfa\x65\x5b\x96\x2f\x85\x75\x2f\xe4\xdd\xf3\xdc\x73\xec\x87\x23\x6f\x96\x64\x1e\x8f\x1d\xa7\x8c\x7a\x7d\x78\x75\x00\x00\x02\xcc\x09\x20\x77\x80\x20\xc9\xe4\x87\xea\x2f\xc9\x12\xd1\xd7\xbf\xaa\x3f\xdf\x2f\x23\xbf\xfa\x0c\xc8\x7d\x3d\x3f\xfd\xe9\x0d\x19\xe6\xb3\x33\xfd\x13\x07\x22\x29\xb1\x20\x96\xf8\x8d\x69\x6f\x8e\x90\xec\xc8\x52\x1b\xf7\xe6\x09\xc2\x1c\x07\x0b\x1c\x11\x6e\xc9\x53\x1b\x0f\xb8\x0f\x17\x8c\xbe\x58\x2f\x23\x2d\x7b\x33\x44\x29\x9d\xe1\xf4\xfa\x99\x04\x96\x24\xb5\x71\x6f\x9e\x22\x8f\x18\x0e\x6d\x6d\x59\x5b\xf6\x66\xf8\x6c\xc6\x06\x74\xb9\xc4\x59\x08\x65\x04\xc8\x3d\x57\x51\x84\xe3\xc0\x71\xde\x1c\x47\xa3\xae\xe9\x52\x46\xd0\xe8\xfe\xda\xbf\x8c\x20\x4d\xb2\x85\x8e\xa8\x3b\xab\xe3\x92\x39\x3c\xc2\xf1\x5f\x80\xdc\x5f\x6f\x27\x0f\xdf\x2e\xee\x6e\x46\x08\xbe\x9f\x81\x88\x49\x4d\x3b\x12\xc4\x14\xae\x19\xa3\xec\x14\xee\x29\x94\x09\x13\x05\x4e\x23\x0a\x4f\x94\x2d\x78\x8e\x03\x02\x09\x57\xe7\x13\xc0\xa2\x0a\x86\x25\x5d\x92\x4c\xe8\x14\x65\x04\x31\x49\xf3\x06\xf2\xda\xc4\x88\x28\x58\x06\x03\xf9\x61\x9e\x28\xf6\x87\xcd\x1b\xf9\xe3\x8b\x87\x2f\x1e\x67\x81\x87\xaa\x5a\x1c\x83\xb4\xad\x52\xb2\xdd\xa5\x94\x51\x83\xc4\x9b\x13\x55\x73\x9f\x73\xca\x04\xe8\xd8\xa1\xdb\x2b\x23\x39\x71\x53\x22\x44\x92\x45\x5c\x36\xb6\xbf\xf6\xae\x5a\x82\x2e\x54\xa2\x24\x8b\xa0\x71\xa8\x3d\x9f\x2c\x62\xe8\x7e\x19\x7d\xbd\xf6\x4e\x74\x0b\xbd\x3a\xce\x08\xf3\xeb\xb8\xd1\xdd\xd5\x78\x3a\x18\xba\xe3\xe9\x60\xbb\xc7\xcd\x48\xa5\x57\xff\xee\xc8\x24\xbd\xa4\x4f\xab\x69\x37\xa3\xcb\xdb\x7b\x0b\xf6\xf6\xd3\x2e\x6f\xef\x87\x2a\x44\x9d\x95\x72\x72\x50\x88\xed\xd6\x95\xfc\x19\x50\xa8\xb9\xf3\xe7\x38\x4d\x67\x38\x58\x28\x24\xfe\x2c\x08\x7b\xd9\x40\xd1\x6f\xdc\x1e\xb9\x2d\x7f\x04\x43\x40\x82\x15\x64\x6b\x35\x9b\x6e\x99\xe0\x9c\x1a\xdd\xb3\x54\x64\x0f\xb3\xb1\x68\x5d\x6d\x8b\xc1\x9b\x3a\xd7\x4e\x32\xd9\xba\xf1\xa7\x12\x13\xb4\x6d\x26\xfd\xab\xdb\xe9\xc5\xe5\xdd\xb5\x3f\x9e\x8c\xbe\x8e\x1f\xb6\x16\x56\x11\x05\xf5\xea\xb8\x3e\x54\xb4\x41\xc6\x15\x97\x8b\x30\x61\x70\x9c\x6f\x9b\xb0\x96\x8f\xe2\x85\xd3\x56\x99\x09\xc1\xa9\x16\x96\x7a\xa4\xfe\x93\xb0\xfc\x2b\x45\x69\x8d\xb3\x4d\x51\x1a\x13\x7b\xb5\xf1\xde\x35\xb3\x72\xdc\x3a\x13\x68\xc1\xd7\x42\x71\xc7\xc2\x17\x1b\xe9\x3b\x44\x68\x1f\xa8\x47\xb4\xc8\x38\x69\xe8\x48\x57\x1a\x2c\x23\x6e\x1b\x3e\xab\x62\xb4\xf4\xa9\x81\xa8\xdc\x9f\x16\x38\x07\x5d\x18\x0f\xc2\xfa\x9d\x16\x89\x09\xbd\xbc\xa4\x61\x33\xb0\x6f\x6c\x14\x30\x77\x6a\xfd\x3e\x68\x70\xa0\x35\xf7\x56\xf7\x73\x73\x98\xec\x4b\x07\x3e\x7e\x84\x23\x78\x55\x0b\x98\x0b\x58\x41\xc4\x48\x0e\xe8\x47\xed\xf5\x87\x8b\xe0\x67\xf0\x42\x52\x7a\x59\x91\xa6\x67\xf0\x76\xc8\xa6\xaa\xb7\x5f\x21\x68\x77\x05\x6e\xb8\x4d\x33\x9f\x51\x2a\x86\xee\xf8\xb7\x2b\x69\x78\x8a\x93\x94\x48\xad\x6c\xb9\x20\x38\x1a\x02\x92\x68\x85\xb4\x05\xe8\xbc\xeb\xde\xd8\x5c\x76\x84\x33\xf2\xe4\x6b\x17\x3f\xc3\x4b\x32\x74\x7b\x01\x16\xbb\x53\x99\x4f\x1f\xa5\xea\x52\xc5\xcd\xae\xae\x56\xb2\x84\xee\x19\xaa\x8a\x7d\xec\x83\xce\x3b\xc9\x92\xc9\x88\x68\x70\xa7\xe6\x96\x8d\x59\x1f\x40\xc4\x09\x07\x2e\x58\x92\x73\x49\xdb\x14\x73\x01\x39\x16\x71\x45\xa3\x9c\x66\x24\x13\x30\x67\x74\x29\x8d\xd5\xf7\x93\xf6\xcb\xbc\x46\xad\xa7\xb4\xaa\x8b\xd5\x0a\x38\x09\xe1\x13\x5f\x79\x8f\x3f\xbc\xef\x9f\xdd\xd5\xea\x93\x6a\x5d\x48\x33\xa2\x67\x77\xfd\xe2\xd4\xac\xa0\x69\x58\x57\xd9\x58\x4a\x87\xbf\x9a\x5a\x22\xdf\xd5\xd5\x6f\x79\xa8\x24\x55\x9f\xa3\x16\x39\x85\x88\x08\x38\x2e\x20\x4a\x44\x5c\xcc\x4e\x02\xba\xf4\x6e\x88\x98\x0a\x46\xf0\xd2\x2b\xa3\x46\x8a\x09\x49\x29\x0e\xab\x1c\x55\x87\x78\x4c\xd2\x14\x72\xcc\x04\xd0\xf9\x3f\xce\xaa\xef\xcc\x64\xd2\xf6\xa8\x1a\x0d\x59\x8f\xeb\xa3\xd9\x01\xc9\xa7\xb6\x9f\x6d\x7b\xa1\x89\xb1\x51\xcc\x10\xc7\x4e\x3b\x8b\x93\x9a\xed\xd6\xff\x3a\x0e\x53\xdf\xa6\xa8\xfe\x4e\x0b\xe0\x31\x2d\xd2\x10\x78\x4e\x82\x64\xfe\x02\x58\xeb\x98\x88\xb1\xd8\x58\x67\x04\xc8\x33\x09\x0a\x41\xc2\xce\x46\xad\x2f\xb0\x7b\xa3\x6e\xe5\xd5\xfb\x10\x4b\x6b\xad\x3a\xdc\x0f\x68\x48\x86\xee\x2f\xff\x13\x98\x87\x20\xd4\xe8\x84\xdb\xb8\x94\x54\x65\x8b\x2c\x3b\x7f\x07\x00\x00\xff\xff\x99\x46\x34\x5a\xda\x0f\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 4058, mode: os.FileMode(420), modTime: time.Unix(1506354265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1506352061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

