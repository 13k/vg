#!/bin/fish/

function vg
    if not count $argv > /dev/null
        command vg
        return
    end
    # echo $argv[1]
    switch $argv[1]
        case init
            _vg_init $argv[1..-1]
        case activate
            _vg_activate $argv[1..-1]
        case deactivate
            _vg_deactivate
        case '*'
            command vg $argv
    end
end


function _vg_init
    _vg_activate $argv
    vg link
end


function _vg_activate
    if [ -n "$VIRTUALGO" ]
        _vg_deactivate
    end

    if [ (count $argv) -lt 2 ]
        set argv[2] (basename $PWD)
    end

    set -gx VIRTUALGO $argv[2]
    set -gx VIRTUALGO_PATH $HOME/.virtualgo/$VIRTUALGO

    set -gx _VIRTUALGO_OLDGOPATH $GOPATH
    set -gx _VIRTUALGO_OLDGOBIN $GOBIN
    set -gx _VIRTUALGO_OLDPATH $PATH

    set -gx GOPATH $VIRTUALGO_PATH:$GOPATH
    set -gx GOBIN $VIRTUALGO_PATH/bin

    mkdir -p $VIRTUALGO_PATH/src/
    mkdir -p $GOBIN

    set -gx PATH $GOBIN $PATH

    if [ -z "$VIRTUALGO_DISABLE_PROMPT" ]
        functions -c fish_prompt _old_fish_prompt
        function fish_prompt
            echo -n "($VIRTUALGO) "
            _old_fish_prompt
        end
    end
end

function _vg_deactivate
    if [ -z "$VIRTUALGO" ]
        echo Error: No go workspace is active at the moment
        vg help
        return 1
    end
    set -x GOBIN $_VIRTUALGO_OLDGOBIN
    set -x GOPATH $_VIRTUALGO_OLDGOPATH
    set -x PATH $_VIRTUALGO_OLDPATH

    if [ -z "$VIRTUALGO_DISABLE_PROMPT" ]
        functions -e fish_prompt
        functions -c _old_fish_prompt fish_prompt
        functions -e _old_fish_prompt
    end

    set -e VIRTUALGO
    set -e VIRTUALGO_PATH
    set -e _VIRTUALGO_OLDPATH
    set -e _VIRTUALGO_OLDGOBIN
    set -e _VIRTUALGO_OLDGOPATH
end

function __vg_auto_activate --on-variable PWD
    if status --is-command-substitution
        return
    end

    # find an auto-activation file
    set -l activation_root $PWD
    while test $activation_root != ""
        if test -f "$activation_root/.virtualgo"
            set new_virtualgo_name (cat "$activation_root/.virtualgo")
            if begin not set -q VIRTUALGO; or test $new_virtualgo_name != $VIRTUALGO; end
                vg activate $new_virtualgo_name
            end
            return
        end
        # this strips the last path component from the path.
        set activation_root (echo $activation_root | sed 's|/[^/]*$||')
    end
end

__vg_auto_activate

complete -c vg --exclusive

complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa activate    -d "Activate a specific virtualgo workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa deactivate  -d "Deactivate the current virtualgo workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa ensure      -d "A wrapper for dep that installs the dependencies in the virtualgo workspace instead of vendor"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa eval        -d "Expose the script that should be eval-ed in the current shell"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa help        -d "Help about any command"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa init        -d "Create and enable a workspace and link it to the current directory"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa link        -d "Link the current virtualgo workspace to the this directory"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa list        -d "List all existing workspaces"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa unlink      -d "Unlinks the current directory from the workspace it's linked to"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa setup       -d "Enables virtualgo in your shell"

function __fish_vg_using_command
    set cmd (commandline -opc)

    if [ (count $cmd) -gt 1 ]
        if [ $argv[1] = $cmd[2] ]
            return 0
        end
    end

    return 1
end

complete -c vg -n "__fish_vg_using_command activate" -xa "(vg list)"
